EVENTS

EVENT BlueCharacterSetTieredStatusTrue
VARS
	CHARACTER:_Character
ON 
	OnCharacterStatusAttempt(_Character, POSTIER)
ACTIONS
	//DisplayCombatInfoText(_Character, "POSTIER", 5)
	IF "!c1"
		GameIsLoading()
	THEN
		CharacterApplyStatus(_Character, STATUS:POSTIER_True, 0)
	ENDIF

EVENT BlueCharacterSetTieredStatus
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	FLOAT:_Strength
	FLOAT:_StatCheck
	INT:_AbilCheck
	CHARACTER:_Sourcee
	FIXEDSTRING:_Text
	FLOAT:_GritMultiplier
	FLOAT:_WillpowerMultiplier
	FLOAT:_AptitudeMultiplier
	INT:_Turns
	CHARACTER:_OriginSource
	//Unique Status Variable for every tiered status in the game.
	//I've tried doing the tiered system without so many variables.
	//It was a nightmare. Don't do it.
	//For posterity:
	//CHARMED is used in place of CharmedH.
	//STUNNED is used in place of ShockedH.
	//PETRIFIED is used in place of PetrifiedH.
	//MADNESS is used in place of MadH.
	//KNOCKED_DOWN is used in place of StaggeredH.
	FLOAT:_BleedingUSV
	FLOAT:_SlowedUSV
	FLOAT:_DiseasedUSV
	FLOAT:_CrippledUSV
	FLOAT:_ChilledUSV
	FLOAT:_WeakUSV
	FLOAT:_DecayingUSV
	FLOAT:_AcidUSV
	FLOAT:_AtrophyUSV
	FLOAT:_BlindUSV
	FLOAT:_FearUSV
	FLOAT:_StaggeredUSV
	FLOAT:_MutedUSV
	FLOAT:_PetrifiedUSV
	FLOAT:_BurningUSV
	FLOAT:_PoisonedUSV
	FLOAT:_ShockedUSV
	FLOAT:_SleepingUSV
	FLOAT:_LoweredResistancesUSV
	FLOAT:_DrainWillpowerUSV
	FLOAT:_SunderedUSV
	FLOAT:_HebetudinousUSV
	FLOAT:_MadUSV
	FLOAT:_FortifiedUSV
	FLOAT:_ClearMindedUSV
	FLOAT:_RestedUSV
	FLOAT:_StrongUSV
	FLOAT:_AntidoteUSV
	FLOAT:_BolsterUSV
	FLOAT:_MagicShellUSV
	FLOAT:_SoulSapUSV
	FLOAT:_CharmedUSV
ON 
	FetchCharacterApplyStatusData(_Character, POSTIER_True)
ACTIONS
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//
	// Phase 0: Setup
	// This phase just sets Grit/Willpower/Aptitude multipliers and acquires the source.
	//
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ListClear(_RemoveList)
	Set(_Result,null)
	//Get Source
	ListAdd(_RemoveList, PRETIER)
	ListAdd(_RemoveList, PRETIERArrow)
	IF "!c1"
		CharacterHasStatus(_Character, PRETIERCLEAR)
	THEN
		IF "c1&c2"
			CharacterHasStatus(_Character, PRETIER)
			CharacterGetStatusSourceCharacter(_Character, PRETIER, _OriginSource)
		THEN
			SetVar(_Character, "LastAttacker", _OriginSource)
		ENDIF
	ELIF "c1"
		CharacterHasStatus(_Character, PRETIERCLEAR)
	THEN
		Set(_OriginSource, null)
		//SetVar(_Character, "LastAttacker", _OriginSource)
		ListAdd(_RemoveList, PRETIERCLEAR)
		SetTag(_Character, "BlueSaveTagPRETIERCLEAR")
	ENDIF
	//Generate Aptitude
	IF "!c1"
		CharacterHasStatus(_Character, PRETIERCLEAR)
	THEN
		IF "c1&c2&c3"
			GetVar(_OriginSource, _Character, "LastAttacker")
			CharacterGetStat(_AptitudeMultiplier, _OriginSource, Intelligence)
			GetVar(_Strength, _Character, "AptitudeBonus")
		THEN
			Subtract(_AptitudeMultiplier, FLOAT:10)
			Multiply(_AptitudeMultiplier, FLOAT:0.05) //APTITUDE
			Add(_AptitudeMultiplier, FLOAT:1)
			Multiply(_AptitudeMultiplier, _Strength)
		ENDIF
	ELIF "c1"
		CharacterHasStatus(_Character, PRETIERCLEAR)
	THEN
		Set(_AptitudeMultiplier, FLOAT:1)
	ENDIF
	// New Grit/Willpower calculation (25% per point multiplicative)
	//Generate Grit
	IF "c1"
		CharacterGetAbility(_AbilCheck, _Character, Barter)
	THEN
		IF "c1"
			IsGreaterThen(_AbilCheck, INT:15)
		THEN
			Set(_AbilCheck, INT:15)
		ENDIF
		// Precalculated values.
 		GetElement(_GritMultiplier, _AbilCheck, 1.0, 0.75, 0.56, 0.42, 0.31, 0.23, 0.17, 0.13, 0.10, 0.07, 0.05, 0.04, 0.03, 0.02, 0.01, 0.01, 0.01)
	ENDIF
	//Generate Willpower
	IF "c1"
		CharacterGetAbility(_AbilCheck, _Character, Telekinesis)
	THEN
		IF "c1"
			IsGreaterThen(_AbilCheck, INT:15)
		THEN
			Set(_AbilCheck, INT:15)
		ENDIF
		// Precalculated values.
 		GetElement(_WillpowerMultiplier, _AbilCheck, 1.0, 0.75, 0.56, 0.42, 0.31, 0.23, 0.17, 0.13, 0.10, 0.07, 0.05, 0.04, 0.03, 0.02, 0.01, 0.01, 0.01)
	ENDIF
	// Old Grit/Willpower calculation (15% per point additive)
	/*
	//Generate Grit
	IF "c1"
		CharacterGetAbility(_AbilCheck, _Character, Barter)
	THEN
		Cast(_GritMultiplier, _AbilCheck)
		Multiply(_GritMultiplier, FLOAT:0.15)
		Subtract(_GritMultiplier, FLOAT:1)
		Multiply(_GritMultiplier, FLOAT:-1)
		IF "c1"
			IsLessThen(_GritMultiplier, FLOAT:0)
		THEN
			Set(_GritMultiplier, FLOAT:0)
		ENDIF
	ENDIF
	//Generate Willpower
	IF "c1"
		CharacterGetAbility(_AbilCheck, _Character, Telekinesis)
	THEN
		Cast(_WillpowerMultiplier, _AbilCheck)
		Multiply(_WillpowerMultiplier, FLOAT:0.15)
		Subtract(_WillpowerMultiplier, FLOAT:1)
		Multiply(_WillpowerMultiplier, FLOAT:-1)
		IF "c1"
			IsLessThen(_WillpowerMultiplier, FLOAT:0)
		THEN
			Set(_WillpowerMultiplier, FLOAT:0)
		ENDIF
	ENDIF
	*/
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//
	// Phase 1: Get Status Changes
	// This phase checks every Apply status and updates USV's to be the net change in statuses.
	//
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Phase 1a
	// Check if any statuses are applied for Wet.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	IF "c1"
		CharacterHasStatus(_Character, STATUS:WET)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8|c9|c10|c11|c12|c13|c14|c15|c16|c17|c18"
			CharacterHasStatus(_Character, STATUS:ApplyChilledA)
			CharacterHasStatus(_Character, STATUS:ApplyChilledB)
			CharacterHasStatus(_Character, STATUS:ApplyChilledC)
			CharacterHasStatus(_Character, STATUS:ApplyChilledD)
			CharacterHasStatus(_Character, STATUS:ApplyChilledE)
			CharacterHasStatus(_Character, STATUS:ApplyChilledF)
			CharacterHasStatus(_Character, STATUS:ApplyChilledG)
			CharacterHasStatus(_Character, STATUS:ApplyChilledH)
			CharacterHasStatus(_Character, STATUS:ApplyChilledO)
			CharacterHasStatus(_Character, STATUS:ChilledA)
			CharacterHasStatus(_Character, STATUS:ChilledB)
			CharacterHasStatus(_Character, STATUS:ChilledC)
			CharacterHasStatus(_Character, STATUS:ChilledD)
			CharacterHasStatus(_Character, STATUS:ChilledE)
			CharacterHasStatus(_Character, STATUS:ChilledF)
			CharacterHasStatus(_Character, STATUS:ChilledG)
			CharacterHasStatus(_Character, STATUS:ChilledH)
			//Frozen is also included in the tiered system.
			//When applying the status properly this will be checked again and Frozen will be used instead of ChilledH.
			CharacterHasStatus(_Character, STATUS:FROZEN)
		THEN
			IF "!c1"
				//Making sure the character hasn't had status strength increased before (on this turn).
				CharacterHasStatus(_Character, STATUS:Blue_Frosted)
			THEN
				CharacterApplyStatus(_Character, STATUS:Blue_Frosted, 1, 0, _OriginSource)
				IF "c1"
					//Checking if it's been defined before.
					IsEqual(_ChilledUSV, null)
				THEN
					//If not, set it.
					Set(_ChilledUSV, FLOAT:1)
				ELSE
					//If it has, add to it.
					Add(_ChilledUSV, FLOAT:1)
				ENDIF
			ENDIF
		ENDIF
		IF "c1|c2|c3|c4|c5|c6|c7|c8|c9|c10|c11|c12|c13|c14|c15|c16|c17"
			CharacterHasStatus(_Character, STATUS:ApplyShockedA)
			CharacterHasStatus(_Character, STATUS:ApplyShockedB)
			CharacterHasStatus(_Character, STATUS:ApplyShockedC)
			CharacterHasStatus(_Character, STATUS:ApplyShockedD)
			CharacterHasStatus(_Character, STATUS:ApplyShockedE)
			CharacterHasStatus(_Character, STATUS:ApplyShockedF)
			CharacterHasStatus(_Character, STATUS:ApplyShockedG)
			CharacterHasStatus(_Character, STATUS:ApplyShockedH)
			CharacterHasStatus(_Character, STATUS:ApplyShockedO)
			CharacterHasStatus(_Character, STATUS:ShockedA)
			CharacterHasStatus(_Character, STATUS:ShockedB)
			CharacterHasStatus(_Character, STATUS:ShockedC)
			CharacterHasStatus(_Character, STATUS:ShockedD)
			CharacterHasStatus(_Character, STATUS:ShockedE)
			CharacterHasStatus(_Character, STATUS:ShockedF)
			CharacterHasStatus(_Character, STATUS:ShockedG)
			CharacterHasStatus(_Character, STATUS:STUNNED)
		THEN
			IF "!c1"
				//Making sure the character hasn't had status strength increased before (on this turn).
				CharacterHasStatus(_Character, STATUS:Blue_Conducted)
			THEN
				CharacterApplyStatus(_Character, STATUS:Blue_Conducted, 1, 0, _OriginSource)
				IF "c1"
					//Checking if it's been defined before.
					IsEqual(_ShockedUSV, null)
				THEN
					//If not, set it.
					Set(_ShockedUSV, FLOAT:1)
				ELSE
					//If it has, add to it.
					Add(_ShockedUSV, FLOAT:1)
				ENDIF
			ENDIF
		ENDIF
		IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
			CharacterHasStatus(_Character, STATUS:ApplyBurningA)
			CharacterHasStatus(_Character, STATUS:ApplyBurningB)
			CharacterHasStatus(_Character, STATUS:ApplyBurningC)
			CharacterHasStatus(_Character, STATUS:ApplyBurningD)
			CharacterHasStatus(_Character, STATUS:ApplyBurningE)
			CharacterHasStatus(_Character, STATUS:ApplyBurningF)
			CharacterHasStatus(_Character, STATUS:ApplyBurningG)
			CharacterHasStatus(_Character, STATUS:ApplyBurningH)
			CharacterHasStatus(_Character, STATUS:ApplyBurningO)
		THEN
			ListAdd(_RemoveList, WET)
			IF "c1"
				//Checking if it's been defined before.
				IsEqual(_BurningUSV, null)
			THEN
				//If not, set it.
				Set(_BurningUSV, FLOAT:-8)
			ELSE
				//If it has, add to it.
				Add(_BurningUSV, FLOAT:-8)
			ENDIF
		ENDIF
	ENDIF
	
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Phase 1b
	// Check all statuses.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//Check if any statuses are applied for Charmed.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyCharmedA)
		CharacterHasStatus(_Character, STATUS:ApplyCharmedB)
		CharacterHasStatus(_Character, STATUS:ApplyCharmedC)
		CharacterHasStatus(_Character, STATUS:ApplyCharmedD)
		CharacterHasStatus(_Character, STATUS:ApplyCharmedE)
		CharacterHasStatus(_Character, STATUS:ApplyCharmedF)
		CharacterHasStatus(_Character, STATUS:ApplyCharmedG)
		CharacterHasStatus(_Character, STATUS:ApplyCharmedH)
		CharacterHasStatus(_Character, STATUS:ApplyCharmedO)
	THEN
		SetTag(_Character, "BlueSaveTagCharmed")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyCharmedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyCharmedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyCharmedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyCharmedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyCharmedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyCharmedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyCharmedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyCharmedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCharmedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyCharmedO)
		ENDIF
		//Multiply against Grit/Willpower/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_CharmedUSV, null)
		THEN
			//If not, set it.
			Set(_CharmedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_CharmedUSV, _Strength)
		ENDIF
		//Specific to Charmed, the strength is reversed if applied by an ally.
		IF "c1"
			CharacterIsAlly(_Character, _OriginSource)
		THEN
			Multiply(_CharmedUSV, FLOAT:-1)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_ClearMindedUSV, null)
		THEN
			Set(_ClearMindedUSV, _Strength)
			Multiply(_ClearMindedUSV, FLOAT:-1)
		ELSE
			Subtract(_ClearMindedUSV, _Strength)
		ENDIF
	ENDIF
	
	//Check if any statuses are applied for SoulSap.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplySoulSapA)
		CharacterHasStatus(_Character, STATUS:ApplySoulSapB)
		CharacterHasStatus(_Character, STATUS:ApplySoulSapC)
		CharacterHasStatus(_Character, STATUS:ApplySoulSapD)
		CharacterHasStatus(_Character, STATUS:ApplySoulSapE)
		CharacterHasStatus(_Character, STATUS:ApplySoulSapF)
		CharacterHasStatus(_Character, STATUS:ApplySoulSapG)
		CharacterHasStatus(_Character, STATUS:ApplySoulSapH)
		CharacterHasStatus(_Character, STATUS:ApplySoulSapO)
	THEN
		SetTag(_Character, "BlueSaveTagSoulSap")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplySoulSapA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplySoulSapB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplySoulSapC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplySoulSapD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplySoulSapE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplySoulSapF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplySoulSapG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplySoulSapH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySoulSapO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplySoulSapO)
		ENDIF
		//Multiply against Grit/Willpower/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_SoulSapUSV, null)
		THEN
			//If not, set it.
			Set(_SoulSapUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_SoulSapUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Soul Sap has no opposites.
	ENDIF
	
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyBleedingA)
		CharacterHasStatus(_Character, STATUS:ApplyBleedingB)
		CharacterHasStatus(_Character, STATUS:ApplyBleedingC)
		CharacterHasStatus(_Character, STATUS:ApplyBleedingD)
		CharacterHasStatus(_Character, STATUS:ApplyBleedingE)
		CharacterHasStatus(_Character, STATUS:ApplyBleedingF)
		CharacterHasStatus(_Character, STATUS:ApplyBleedingG)
		CharacterHasStatus(_Character, STATUS:ApplyBleedingH)
		CharacterHasStatus(_Character, STATUS:ApplyBleedingO)
	THEN
		SetTag(_Character, "BlueSaveTagBleeding")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyBleedingA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyBleedingB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyBleedingC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyBleedingD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyBleedingE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyBleedingF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyBleedingG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyBleedingH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBleedingO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyBleedingO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_BleedingUSV, null)
		THEN
			//If not, set it.
			Set(_BleedingUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_BleedingUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_FortifiedUSV, null)
		THEN
			Set(_FortifiedUSV, _Strength)
			Multiply(_FortifiedUSV, FLOAT:-1)
		ELSE
			Subtract(_FortifiedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_RestedUSV, null)
		THEN
			Set(_RestedUSV, _Strength)
			Multiply(_RestedUSV, FLOAT:-1)
		ELSE
			Subtract(_RestedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_BolsterUSV, null)
		THEN
			Set(_BolsterUSV, _Strength)
			Multiply(_BolsterUSV, FLOAT:-1)
		ELSE
			Subtract(_BolsterUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Slowed.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplySlowedA)
		CharacterHasStatus(_Character, STATUS:ApplySlowedB)
		CharacterHasStatus(_Character, STATUS:ApplySlowedC)
		CharacterHasStatus(_Character, STATUS:ApplySlowedD)
		CharacterHasStatus(_Character, STATUS:ApplySlowedE)
		CharacterHasStatus(_Character, STATUS:ApplySlowedF)
		CharacterHasStatus(_Character, STATUS:ApplySlowedG)
		CharacterHasStatus(_Character, STATUS:ApplySlowedH)
		CharacterHasStatus(_Character, STATUS:ApplySlowedO)
	THEN
		SetTag(_Character, "BlueSaveTagSlowed")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplySlowedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplySlowedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplySlowedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplySlowedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplySlowedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplySlowedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplySlowedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplySlowedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySlowedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplySlowedO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_SlowedUSV, null)
		THEN
			//If not, set it.
			Set(_SlowedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_SlowedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_MagicShellUSV, null)
		THEN
			Set(_MagicShellUSV, _Strength)
			Multiply(_MagicShellUSV, FLOAT:-1)
		ELSE
			Subtract(_MagicShellUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Diseased.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedA)
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedB)
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedC)
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedD)
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedE)
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedF)
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedG)
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedH)
		CharacterHasStatus(_Character, STATUS:ApplyDiseasedO)
	THEN
		SetTag(_Character, "BlueSaveTagDiseased")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyDiseasedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyDiseasedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyDiseasedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyDiseasedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyDiseasedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyDiseasedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyDiseasedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyDiseasedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDiseasedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyDiseasedO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_DiseasedUSV, null)
		THEN
			//If not, set it.
			Set(_DiseasedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_DiseasedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_RestedUSV, null)
		THEN
			Set(_RestedUSV, _Strength)
			Multiply(_RestedUSV, FLOAT:-1)
		ELSE
			Subtract(_RestedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_AntidoteUSV, null)
		THEN
			Set(_AntidoteUSV, _Strength)
			Multiply(_AntidoteUSV, FLOAT:-1)
		ELSE
			Subtract(_AntidoteUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Crippled.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyCrippledA)
		CharacterHasStatus(_Character, STATUS:ApplyCrippledB)
		CharacterHasStatus(_Character, STATUS:ApplyCrippledC)
		CharacterHasStatus(_Character, STATUS:ApplyCrippledD)
		CharacterHasStatus(_Character, STATUS:ApplyCrippledE)
		CharacterHasStatus(_Character, STATUS:ApplyCrippledF)
		CharacterHasStatus(_Character, STATUS:ApplyCrippledG)
		CharacterHasStatus(_Character, STATUS:ApplyCrippledH)
		CharacterHasStatus(_Character, STATUS:ApplyCrippledO)
	THEN
		SetTag(_Character, "BlueSaveTagCrippled")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyCrippledA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyCrippledB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyCrippledC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyCrippledD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyCrippledE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyCrippledF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyCrippledG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyCrippledH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyCrippledO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyCrippledO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_CrippledUSV, null)
		THEN
			//If not, set it.
			Set(_CrippledUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_CrippledUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_RestedUSV, null)
		THEN
			Set(_RestedUSV, _Strength)
			Multiply(_RestedUSV, FLOAT:-1)
		ELSE
			Subtract(_RestedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Chilled.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyChilledA)
		CharacterHasStatus(_Character, STATUS:ApplyChilledB)
		CharacterHasStatus(_Character, STATUS:ApplyChilledC)
		CharacterHasStatus(_Character, STATUS:ApplyChilledD)
		CharacterHasStatus(_Character, STATUS:ApplyChilledE)
		CharacterHasStatus(_Character, STATUS:ApplyChilledF)
		CharacterHasStatus(_Character, STATUS:ApplyChilledG)
		CharacterHasStatus(_Character, STATUS:ApplyChilledH)
		CharacterHasStatus(_Character, STATUS:ApplyChilledO)
	THEN
		SetTag(_Character, "BlueSaveTagChilled")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyChilledA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyChilledB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyChilledC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyChilledD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyChilledE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyChilledF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyChilledG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyChilledH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyChilledO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyChilledO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_ChilledUSV, null)
		THEN
			//If not, set it.
			Set(_ChilledUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_ChilledUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_BurningUSV, null)
		THEN
			Set(_BurningUSV, _Strength)
			Multiply(_BurningUSV, FLOAT:-1)
		ELSE
			Subtract(_BurningUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_MagicShellUSV, null)
		THEN
			Set(_MagicShellUSV, _Strength)
			Multiply(_MagicShellUSV, FLOAT:-1)
		ELSE
			Subtract(_MagicShellUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_BolsterUSV, null)
		THEN
			Set(_BolsterUSV, _Strength)
			Multiply(_BolsterUSV, FLOAT:-1)
		ELSE
			Subtract(_BolsterUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Weak.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyWeakA)
		CharacterHasStatus(_Character, STATUS:ApplyWeakB)
		CharacterHasStatus(_Character, STATUS:ApplyWeakC)
		CharacterHasStatus(_Character, STATUS:ApplyWeakD)
		CharacterHasStatus(_Character, STATUS:ApplyWeakE)
		CharacterHasStatus(_Character, STATUS:ApplyWeakF)
		CharacterHasStatus(_Character, STATUS:ApplyWeakG)
		CharacterHasStatus(_Character, STATUS:ApplyWeakH)
		CharacterHasStatus(_Character, STATUS:ApplyWeakO)
	THEN
		SetTag(_Character, "BlueSaveTagWeak")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyWeakA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyWeakB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyWeakC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyWeakD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyWeakE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyWeakF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyWeakG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyWeakH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyWeakO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyWeakO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_WeakUSV, null)
		THEN
			//If not, set it.
			Set(_WeakUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_WeakUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_StrongUSV, null)
		THEN
			Set(_StrongUSV, _Strength)
			Multiply(_StrongUSV, FLOAT:-1)
		ELSE
			Subtract(_StrongUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Decaying.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyDecayingA)
		CharacterHasStatus(_Character, STATUS:ApplyDecayingB)
		CharacterHasStatus(_Character, STATUS:ApplyDecayingC)
		CharacterHasStatus(_Character, STATUS:ApplyDecayingD)
		CharacterHasStatus(_Character, STATUS:ApplyDecayingE)
		CharacterHasStatus(_Character, STATUS:ApplyDecayingF)
		CharacterHasStatus(_Character, STATUS:ApplyDecayingG)
		CharacterHasStatus(_Character, STATUS:ApplyDecayingH)
		CharacterHasStatus(_Character, STATUS:ApplyDecayingO)
	THEN
		SetTag(_Character, "BlueSaveTagDecaying")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyDecayingA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyDecayingB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyDecayingC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyDecayingD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyDecayingE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyDecayingF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyDecayingG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyDecayingH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDecayingO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyDecayingO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_DecayingUSV, null)
		THEN
			//If not, set it.
			Set(_DecayingUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_DecayingUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_FortifiedUSV, null)
		THEN
			Set(_FortifiedUSV, _Strength)
			Multiply(_FortifiedUSV, FLOAT:-1)
		ELSE
			Subtract(_FortifiedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_AntidoteUSV, null)
		THEN
			Set(_AntidoteUSV, _Strength)
			Multiply(_AntidoteUSV, FLOAT:-1)
		ELSE
			Subtract(_AntidoteUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Acid.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyAcidA)
		CharacterHasStatus(_Character, STATUS:ApplyAcidB)
		CharacterHasStatus(_Character, STATUS:ApplyAcidC)
		CharacterHasStatus(_Character, STATUS:ApplyAcidD)
		CharacterHasStatus(_Character, STATUS:ApplyAcidE)
		CharacterHasStatus(_Character, STATUS:ApplyAcidF)
		CharacterHasStatus(_Character, STATUS:ApplyAcidG)
		CharacterHasStatus(_Character, STATUS:ApplyAcidH)
		CharacterHasStatus(_Character, STATUS:ApplyAcidO)
	THEN
		SetTag(_Character, "BlueSaveTagAcid")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyAcidA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyAcidB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyAcidC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyAcidD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyAcidE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyAcidF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyAcidG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyAcidH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAcidO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyAcidO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_AcidUSV, null)
		THEN
			//If not, set it.
			Set(_AcidUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_AcidUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_FortifiedUSV, null)
		THEN
			Set(_FortifiedUSV, _Strength)
			Multiply(_FortifiedUSV, FLOAT:-1)
		ELSE
			Subtract(_FortifiedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Atrophy.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyA)
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyB)
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyC)
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyD)
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyE)
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyF)
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyG)
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyH)
		CharacterHasStatus(_Character, STATUS:ApplyAtrophyO)
	THEN
		SetTag(_Character, "BlueSaveTagAtrophy")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyAtrophyA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyAtrophyB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyAtrophyC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyAtrophyD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyAtrophyE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyAtrophyF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyAtrophyG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyAtrophyH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAtrophyO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyAtrophyO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_AtrophyUSV, null)
		THEN
			//If not, set it.
			Set(_AtrophyUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_AtrophyUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_StrongUSV, null)
		THEN
			Set(_StrongUSV, _Strength)
			Multiply(_StrongUSV, FLOAT:-1)
		ELSE
			Subtract(_StrongUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_AntidoteUSV, null)
		THEN
			Set(_AntidoteUSV, _Strength)
			Multiply(_AntidoteUSV, FLOAT:-1)
		ELSE
			Subtract(_AntidoteUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Blind.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyBlindA)
		CharacterHasStatus(_Character, STATUS:ApplyBlindB)
		CharacterHasStatus(_Character, STATUS:ApplyBlindC)
		CharacterHasStatus(_Character, STATUS:ApplyBlindD)
		CharacterHasStatus(_Character, STATUS:ApplyBlindE)
		CharacterHasStatus(_Character, STATUS:ApplyBlindF)
		CharacterHasStatus(_Character, STATUS:ApplyBlindG)
		CharacterHasStatus(_Character, STATUS:ApplyBlindH)
		CharacterHasStatus(_Character, STATUS:ApplyBlindO)
	THEN
		SetTag(_Character, "BlueSaveTagBlind")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyBlindA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyBlindB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyBlindC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyBlindD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyBlindE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyBlindF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyBlindG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyBlindH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBlindO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyBlindO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_BlindUSV, null)
		THEN
			//If not, set it.
			Set(_BlindUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_BlindUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_RestedUSV, null)
		THEN
			Set(_RestedUSV, _Strength)
			Multiply(_RestedUSV, FLOAT:-1)
		ELSE
			Subtract(_RestedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_ClearMindedUSV, null)
		THEN
			Set(_ClearMindedUSV, _Strength)
			Multiply(_ClearMindedUSV, FLOAT:-1)
		ELSE
			Subtract(_ClearMindedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Fear.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyFearA)
		CharacterHasStatus(_Character, STATUS:ApplyFearB)
		CharacterHasStatus(_Character, STATUS:ApplyFearC)
		CharacterHasStatus(_Character, STATUS:ApplyFearD)
		CharacterHasStatus(_Character, STATUS:ApplyFearE)
		CharacterHasStatus(_Character, STATUS:ApplyFearF)
		CharacterHasStatus(_Character, STATUS:ApplyFearG)
		CharacterHasStatus(_Character, STATUS:ApplyFearH)
		CharacterHasStatus(_Character, STATUS:ApplyFearO)
	THEN
		SetTag(_Character, "BlueSaveTagFear")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyFearA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyFearB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyFearC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyFearD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyFearE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyFearF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyFearG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyFearH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFearO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyFearO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_FearUSV, null)
		THEN
			//If not, set it.
			Set(_FearUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_FearUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_ClearMindedUSV, null)
		THEN
			Set(_ClearMindedUSV, _Strength)
			Multiply(_ClearMindedUSV, FLOAT:-1)
		ELSE
			Subtract(_ClearMindedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_BolsterUSV, null)
		THEN
			Set(_BolsterUSV, _Strength)
			Multiply(_BolsterUSV, FLOAT:-1)
		ELSE
			Subtract(_BolsterUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Staggered.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredA)
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredB)
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredC)
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredD)
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredE)
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredF)
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredG)
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredH)
		CharacterHasStatus(_Character, STATUS:ApplyStaggeredO)
	THEN
		SetTag(_Character, "BlueSaveTagStaggered")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyStaggeredA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyStaggeredB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyStaggeredC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyStaggeredD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyStaggeredE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyStaggeredF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyStaggeredG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyStaggeredH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStaggeredO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyStaggeredO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_StaggeredUSV, null)
		THEN
			//If not, set it.
			Set(_StaggeredUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_StaggeredUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_BolsterUSV, null)
		THEN
			Set(_BolsterUSV, _Strength)
			Multiply(_BolsterUSV, FLOAT:-1)
		ELSE
			Subtract(_BolsterUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_FortifiedUSV, null)
		THEN
			Set(_FortifiedUSV, _Strength)
			Multiply(_FortifiedUSV, FLOAT:-1)
		ELSE
			Subtract(_FortifiedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_RestedUSV, null)
		THEN
			Set(_RestedUSV, _Strength)
			Multiply(_RestedUSV, FLOAT:-1)
		ELSE
			Subtract(_RestedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Petrified.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedA)
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedB)
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedC)
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedD)
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedE)
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedF)
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedG)
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedH)
		CharacterHasStatus(_Character, STATUS:ApplyPetrifiedO)
	THEN
		SetTag(_Character, "BlueSaveTagPetrified")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyPetrifiedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyPetrifiedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyPetrifiedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyPetrifiedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyPetrifiedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyPetrifiedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyPetrifiedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyPetrifiedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPetrifiedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyPetrifiedO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_PetrifiedUSV, null)
		THEN
			//If not, set it.
			Set(_PetrifiedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_PetrifiedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_FortifiedUSV, null)
		THEN
			Set(_FortifiedUSV, _Strength)
			Multiply(_FortifiedUSV, FLOAT:-1)
		ELSE
			Subtract(_FortifiedUSV, _Strength)
		ENDIF
	ENDIF
	
	//Check if any statuses are applied for Muted.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyMutedA)
		CharacterHasStatus(_Character, STATUS:ApplyMutedB)
		CharacterHasStatus(_Character, STATUS:ApplyMutedC)
		CharacterHasStatus(_Character, STATUS:ApplyMutedD)
		CharacterHasStatus(_Character, STATUS:ApplyMutedE)
		CharacterHasStatus(_Character, STATUS:ApplyMutedF)
		CharacterHasStatus(_Character, STATUS:ApplyMutedG)
		CharacterHasStatus(_Character, STATUS:ApplyMutedH)
		CharacterHasStatus(_Character, STATUS:ApplyMutedO)
	THEN
		SetTag(_Character, "BlueSaveTagMuted")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyMutedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyMutedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyMutedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyMutedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyMutedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyMutedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyMutedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyMutedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMutedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyMutedO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_MutedUSV, null)
		THEN
			//If not, set it.
			Set(_MutedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_MutedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_MagicShellUSV, null)
		THEN
			Set(_MagicShellUSV, _Strength)
			Multiply(_MagicShellUSV, FLOAT:-1)
		ELSE
			Subtract(_MagicShellUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Burning.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyBurningA)
		CharacterHasStatus(_Character, STATUS:ApplyBurningB)
		CharacterHasStatus(_Character, STATUS:ApplyBurningC)
		CharacterHasStatus(_Character, STATUS:ApplyBurningD)
		CharacterHasStatus(_Character, STATUS:ApplyBurningE)
		CharacterHasStatus(_Character, STATUS:ApplyBurningF)
		CharacterHasStatus(_Character, STATUS:ApplyBurningG)
		CharacterHasStatus(_Character, STATUS:ApplyBurningH)
		CharacterHasStatus(_Character, STATUS:ApplyBurningO)
	THEN
		SetTag(_Character, "BlueSaveTagBurning")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyBurningA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyBurningB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyBurningC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyBurningD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyBurningE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyBurningF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyBurningG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyBurningH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBurningO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyBurningO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_BurningUSV, null)
		THEN
			//If not, set it.
			Set(_BurningUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_BurningUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_ChilledUSV, null)
		THEN
			Set(_ChilledUSV, _Strength)
			Multiply(_ChilledUSV, FLOAT:-1)
		ELSE
			Subtract(_ChilledUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_MagicShellUSV, null)
		THEN
			Set(_MagicShellUSV, _Strength)
			Multiply(_MagicShellUSV, FLOAT:-1)
		ELSE
			Subtract(_MagicShellUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_FortifiedUSV, null)
		THEN
			Set(_FortifiedUSV, _Strength)
			Multiply(_FortifiedUSV, FLOAT:-1)
		ELSE
			Subtract(_FortifiedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Poisoned.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedA)
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedB)
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedC)
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedD)
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedE)
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedF)
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedG)
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedH)
		CharacterHasStatus(_Character, STATUS:ApplyPoisonedO)
	THEN
		SetTag(_Character, "BlueSaveTagPoisoned")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyPoisonedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyPoisonedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyPoisonedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyPoisonedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyPoisonedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyPoisonedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyPoisonedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyPoisonedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyPoisonedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyPoisonedO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_PoisonedUSV, null)
		THEN
			//If not, set it.
			Set(_PoisonedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_PoisonedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_AntidoteUSV, null)
		THEN
			Set(_AntidoteUSV, _Strength)
			Multiply(_AntidoteUSV, FLOAT:-1)
		ELSE
			Subtract(_AntidoteUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Shocked.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyShockedA)
		CharacterHasStatus(_Character, STATUS:ApplyShockedB)
		CharacterHasStatus(_Character, STATUS:ApplyShockedC)
		CharacterHasStatus(_Character, STATUS:ApplyShockedD)
		CharacterHasStatus(_Character, STATUS:ApplyShockedE)
		CharacterHasStatus(_Character, STATUS:ApplyShockedF)
		CharacterHasStatus(_Character, STATUS:ApplyShockedG)
		CharacterHasStatus(_Character, STATUS:ApplyShockedH)
		CharacterHasStatus(_Character, STATUS:ApplyShockedO)
	THEN
		SetTag(_Character, "BlueSaveTagShocked")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyShockedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyShockedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyShockedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyShockedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyShockedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyShockedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyShockedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyShockedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyShockedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyShockedO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_ShockedUSV, null)
		THEN
			//If not, set it.
			Set(_ShockedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_ShockedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_BolsterUSV, null)
		THEN
			Set(_BolsterUSV, _Strength)
			Multiply(_BolsterUSV, FLOAT:-1)
		ELSE
			Subtract(_BolsterUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_MagicShellUSV, null)
		THEN
			Set(_MagicShellUSV, _Strength)
			Multiply(_MagicShellUSV, FLOAT:-1)
		ELSE
			Subtract(_MagicShellUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Sleeping.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplySleepingA)
		CharacterHasStatus(_Character, STATUS:ApplySleepingB)
		CharacterHasStatus(_Character, STATUS:ApplySleepingC)
		CharacterHasStatus(_Character, STATUS:ApplySleepingD)
		CharacterHasStatus(_Character, STATUS:ApplySleepingE)
		CharacterHasStatus(_Character, STATUS:ApplySleepingF)
		CharacterHasStatus(_Character, STATUS:ApplySleepingG)
		CharacterHasStatus(_Character, STATUS:ApplySleepingH)
		CharacterHasStatus(_Character, STATUS:ApplySleepingO)
	THEN
		SetTag(_Character, "BlueSaveTagSleeping")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplySleepingA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplySleepingB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplySleepingC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplySleepingD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplySleepingE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplySleepingF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplySleepingG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplySleepingH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySleepingO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplySleepingO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_SleepingUSV, null)
		THEN
			//If not, set it.
			Set(_SleepingUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_SleepingUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_RestedUSV, null)
		THEN
			Set(_RestedUSV, _Strength)
			Multiply(_RestedUSV, FLOAT:-1)
		ELSE
			Subtract(_RestedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_ClearMindedUSV, null)
		THEN
			Set(_ClearMindedUSV, _Strength)
			Multiply(_ClearMindedUSV, FLOAT:-1)
		ELSE
			Subtract(_ClearMindedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for LoweredResistances.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesA)
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesB)
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesC)
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesD)
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesE)
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesF)
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesG)
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesH)
		CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesO)
	THEN
		SetTag(_Character, "BlueSaveTagLoweredResistances")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyLoweredResistancesA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyLoweredResistancesB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyLoweredResistancesC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyLoweredResistancesD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyLoweredResistancesE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyLoweredResistancesF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyLoweredResistancesG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyLoweredResistancesH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyLoweredResistancesO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyLoweredResistancesO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_LoweredResistancesUSV, null)
		THEN
			//If not, set it.
			Set(_LoweredResistancesUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_LoweredResistancesUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_MagicShellUSV, null)
		THEN
			Set(_MagicShellUSV, _Strength)
			Multiply(_MagicShellUSV, FLOAT:-1)
		ELSE
			Subtract(_MagicShellUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for DrainWillpower.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerA)
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerB)
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerC)
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerD)
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerE)
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerF)
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerG)
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerH)
		CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerO)
	THEN
		SetTag(_Character, "BlueSaveTagDrainWillpower")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyDrainWillpowerA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyDrainWillpowerB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyDrainWillpowerC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyDrainWillpowerD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyDrainWillpowerE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyDrainWillpowerF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyDrainWillpowerG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyDrainWillpowerH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyDrainWillpowerO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyDrainWillpowerO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_DrainWillpowerUSV, null)
		THEN
			//If not, set it.
			Set(_DrainWillpowerUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_DrainWillpowerUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_ClearMindedUSV, null)
		THEN
			Set(_ClearMindedUSV, _Strength)
			Multiply(_ClearMindedUSV, FLOAT:-1)
		ELSE
			Subtract(_ClearMindedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Sundered.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplySunderedA)
		CharacterHasStatus(_Character, STATUS:ApplySunderedB)
		CharacterHasStatus(_Character, STATUS:ApplySunderedC)
		CharacterHasStatus(_Character, STATUS:ApplySunderedD)
		CharacterHasStatus(_Character, STATUS:ApplySunderedE)
		CharacterHasStatus(_Character, STATUS:ApplySunderedF)
		CharacterHasStatus(_Character, STATUS:ApplySunderedG)
		CharacterHasStatus(_Character, STATUS:ApplySunderedH)
		CharacterHasStatus(_Character, STATUS:ApplySunderedO)
	THEN
		SetTag(_Character, "BlueSaveTagSundered")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplySunderedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplySunderedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplySunderedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplySunderedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplySunderedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplySunderedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplySunderedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplySunderedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplySunderedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplySunderedO)
		ENDIF
		//Multiply against Grit/Aptitude.
		Multiply(_Strength, _GritMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_SunderedUSV, null)
		THEN
			//If not, set it.
			Set(_SunderedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_SunderedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_FortifiedUSV, null)
		THEN
			Set(_FortifiedUSV, _Strength)
			Multiply(_FortifiedUSV, FLOAT:-1)
		ELSE
			Subtract(_FortifiedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Hebetudinous.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousA)
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousB)
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousC)
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousD)
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousE)
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousF)
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousG)
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousH)
		CharacterHasStatus(_Character, STATUS:ApplyHebetudinousO)
	THEN
		SetTag(_Character, "BlueSaveTagHebetudinous")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyHebetudinousA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyHebetudinousB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyHebetudinousC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyHebetudinousD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyHebetudinousE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyHebetudinousF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyHebetudinousG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyHebetudinousH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyHebetudinousO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyHebetudinousO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_HebetudinousUSV, null)
		THEN
			//If not, set it.
			Set(_HebetudinousUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_HebetudinousUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_ClearMindedUSV, null)
		THEN
			Set(_ClearMindedUSV, _Strength)
			Multiply(_ClearMindedUSV, FLOAT:-1)
		ELSE
			Subtract(_ClearMindedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Mad.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyMadA)
		CharacterHasStatus(_Character, STATUS:ApplyMadB)
		CharacterHasStatus(_Character, STATUS:ApplyMadC)
		CharacterHasStatus(_Character, STATUS:ApplyMadD)
		CharacterHasStatus(_Character, STATUS:ApplyMadE)
		CharacterHasStatus(_Character, STATUS:ApplyMadF)
		CharacterHasStatus(_Character, STATUS:ApplyMadG)
		CharacterHasStatus(_Character, STATUS:ApplyMadH)
		CharacterHasStatus(_Character, STATUS:ApplyMadO)
	THEN
		SetTag(_Character, "BlueSaveTagMad")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyMadA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyMadB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyMadC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyMadD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyMadE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyMadF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyMadG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyMadH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMadO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyMadO)
		ENDIF
		//Multiply against Willpower/Aptitude.
		Multiply(_Strength, _WillpowerMultiplier)
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_MadUSV, null)
		THEN
			//If not, set it.
			Set(_MadUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_MadUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_ClearMindedUSV, null)
		THEN
			Set(_ClearMindedUSV, _Strength)
			Multiply(_ClearMindedUSV, FLOAT:-1)
		ELSE
			Subtract(_ClearMindedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_BolsterUSV, null)
		THEN
			Set(_BolsterUSV, _Strength)
			Multiply(_BolsterUSV, FLOAT:-1)
		ELSE
			Subtract(_BolsterUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Fortified.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedA)
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedB)
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedC)
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedD)
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedE)
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedF)
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedG)
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedH)
		CharacterHasStatus(_Character, STATUS:ApplyFortifiedO)
	THEN
		SetTag(_Character, "BlueSaveTagFortified")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyFortifiedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyFortifiedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyFortifiedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyFortifiedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyFortifiedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyFortifiedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyFortifiedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyFortifiedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyFortifiedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyFortifiedO)
		ENDIF
		//Multiply against NONE/Aptitude.
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_FortifiedUSV, null)
		THEN
			//If not, set it.
			Set(_FortifiedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_FortifiedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_BleedingUSV, null)
		THEN
			Set(_BleedingUSV, _Strength)
			Multiply(_BleedingUSV, FLOAT:-1)
		ELSE
			Subtract(_BleedingUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_DecayingUSV, null)
		THEN
			Set(_DecayingUSV, _Strength)
			Multiply(_DecayingUSV, FLOAT:-1)
		ELSE
			Subtract(_DecayingUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_AcidUSV, null)
		THEN
			Set(_AcidUSV, _Strength)
			Multiply(_AcidUSV, FLOAT:-1)
		ELSE
			Subtract(_AcidUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_SunderedUSV, null)
		THEN
			Set(_SunderedUSV, _Strength)
			Multiply(_SunderedUSV, FLOAT:-1)
		ELSE
			Subtract(_SunderedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_BurningUSV, null)
		THEN
			Set(_BurningUSV, _Strength)
			Multiply(_BurningUSV, FLOAT:-1)
		ELSE
			Subtract(_BurningUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_StaggeredUSV, null)
		THEN
			Set(_StaggeredUSV, _Strength)
			Multiply(_StaggeredUSV, FLOAT:-1)
		ELSE
			Subtract(_StaggeredUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_PetrifiedUSV, null)
		THEN
			Set(_PetrifiedUSV, _Strength)
			Multiply(_PetrifiedUSV, FLOAT:-1)
		ELSE
			Subtract(_PetrifiedUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for ClearMinded.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedA)
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedB)
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedC)
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedD)
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedE)
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedF)
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedG)
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedH)
		CharacterHasStatus(_Character, STATUS:ApplyClearMindedO)
	THEN
		SetTag(_Character, "BlueSaveTagClearMinded")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyClearMindedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyClearMindedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyClearMindedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyClearMindedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyClearMindedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyClearMindedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyClearMindedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyClearMindedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyClearMindedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyClearMindedO)
		ENDIF
		//Multiply against NONE/Aptitude.
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_ClearMindedUSV, null)
		THEN
			//If not, set it.
			Set(_ClearMindedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_ClearMindedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_BlindUSV, null)
		THEN
			Set(_BlindUSV, _Strength)
			Multiply(_BlindUSV, FLOAT:-1)
		ELSE
			Subtract(_BlindUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_SleepingUSV, null)
		THEN
			Set(_SleepingUSV, _Strength)
			Multiply(_SleepingUSV, FLOAT:-1)
		ELSE
			Subtract(_SleepingUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_DrainWillpowerUSV, null)
		THEN
			Set(_DrainWillpowerUSV, _Strength)
			Multiply(_DrainWillpowerUSV, FLOAT:-1)
		ELSE
			Subtract(_DrainWillpowerUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_FearUSV, null)
		THEN
			Set(_FearUSV, _Strength)
			Multiply(_FearUSV, FLOAT:-1)
		ELSE
			Subtract(_FearUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_MadUSV, null)
		THEN
			Set(_MadUSV, _Strength)
			Multiply(_MadUSV, FLOAT:-1)
		ELSE
			Subtract(_MadUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_CharmedUSV, null)
		THEN
			Set(_CharmedUSV, _Strength)
			Multiply(_CharmedUSV, FLOAT:-1)
		ELSE
			Subtract(_CharmedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_HebetudinousUSV, null)
		THEN
			Set(_HebetudinousUSV, _Strength)
			Multiply(_HebetudinousUSV, FLOAT:-1)
		ELSE
			Subtract(_HebetudinousUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Rested.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyRestedA)
		CharacterHasStatus(_Character, STATUS:ApplyRestedB)
		CharacterHasStatus(_Character, STATUS:ApplyRestedC)
		CharacterHasStatus(_Character, STATUS:ApplyRestedD)
		CharacterHasStatus(_Character, STATUS:ApplyRestedE)
		CharacterHasStatus(_Character, STATUS:ApplyRestedF)
		CharacterHasStatus(_Character, STATUS:ApplyRestedG)
		CharacterHasStatus(_Character, STATUS:ApplyRestedH)
		CharacterHasStatus(_Character, STATUS:ApplyRestedO)
	THEN
		SetTag(_Character, "BlueSaveTagRested")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyRestedA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyRestedB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyRestedC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyRestedD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyRestedE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyRestedF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyRestedG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyRestedH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyRestedO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyRestedO)
		ENDIF
		//Multiply against NONE/Aptitude.
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_RestedUSV, null)
		THEN
			//If not, set it.
			Set(_RestedUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_RestedUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_BlindUSV, null)
		THEN
			Set(_BlindUSV, _Strength)
			Multiply(_BlindUSV, FLOAT:-1)
		ELSE
			Subtract(_BlindUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_CrippledUSV, null)
		THEN
			Set(_CrippledUSV, _Strength)
			Multiply(_CrippledUSV, FLOAT:-1)
		ELSE
			Subtract(_CrippledUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_DiseasedUSV, null)
		THEN
			Set(_DiseasedUSV, _Strength)
			Multiply(_DiseasedUSV, FLOAT:-1)
		ELSE
			Subtract(_DiseasedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_SleepingUSV, null)
		THEN
			Set(_SleepingUSV, _Strength)
			Multiply(_SleepingUSV, FLOAT:-1)
		ELSE
			Subtract(_SleepingUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_BleedingUSV, null)
		THEN
			Set(_BleedingUSV, _Strength)
			Multiply(_BleedingUSV, FLOAT:-1)
		ELSE
			Subtract(_BleedingUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_StaggeredUSV, null)
		THEN
			Set(_StaggeredUSV, _Strength)
			Multiply(_StaggeredUSV, FLOAT:-1)
		ELSE
			Subtract(_StaggeredUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Strong.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyStrongA)
		CharacterHasStatus(_Character, STATUS:ApplyStrongB)
		CharacterHasStatus(_Character, STATUS:ApplyStrongC)
		CharacterHasStatus(_Character, STATUS:ApplyStrongD)
		CharacterHasStatus(_Character, STATUS:ApplyStrongE)
		CharacterHasStatus(_Character, STATUS:ApplyStrongF)
		CharacterHasStatus(_Character, STATUS:ApplyStrongG)
		CharacterHasStatus(_Character, STATUS:ApplyStrongH)
		CharacterHasStatus(_Character, STATUS:ApplyStrongO)
	THEN
		SetTag(_Character, "BlueSaveTagStrong")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyStrongA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyStrongB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyStrongC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyStrongD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyStrongE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyStrongF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyStrongG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyStrongH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyStrongO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyStrongO)
		ENDIF
		//Multiply against NONE/Aptitude.
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_StrongUSV, null)
		THEN
			//If not, set it.
			Set(_StrongUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_StrongUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_WeakUSV, null)
		THEN
			Set(_WeakUSV, _Strength)
			Multiply(_WeakUSV, FLOAT:-1)
		ELSE
			Subtract(_WeakUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_AtrophyUSV, null)
		THEN
			Set(_AtrophyUSV, _Strength)
			Multiply(_AtrophyUSV, FLOAT:-1)
		ELSE
			Subtract(_AtrophyUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Antidote.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteA)
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteB)
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteC)
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteD)
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteE)
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteF)
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteG)
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteH)
		CharacterHasStatus(_Character, STATUS:ApplyAntidoteO)
	THEN
		SetTag(_Character, "BlueSaveTagAntidote")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyAntidoteA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyAntidoteB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyAntidoteC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyAntidoteD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyAntidoteE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyAntidoteF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyAntidoteG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyAntidoteH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyAntidoteO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyAntidoteO)
		ENDIF
		//Multiply against NONE/Aptitude.
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_AntidoteUSV, null)
		THEN
			//If not, set it.
			Set(_AntidoteUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_AntidoteUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_PoisonedUSV, null)
		THEN
			Set(_PoisonedUSV, _Strength)
			Multiply(_PoisonedUSV, FLOAT:-1)
		ELSE
			Subtract(_PoisonedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_DiseasedUSV, null)
		THEN
			Set(_DiseasedUSV, _Strength)
			Multiply(_DiseasedUSV, FLOAT:-1)
		ELSE
			Subtract(_DiseasedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_DecayingUSV, null)
		THEN
			Set(_DecayingUSV, _Strength)
			Multiply(_DecayingUSV, FLOAT:-1)
		ELSE
			Subtract(_DecayingUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_AtrophyUSV, null)
		THEN
			Set(_AtrophyUSV, _Strength)
			Multiply(_AtrophyUSV, FLOAT:-1)
		ELSE
			Subtract(_AtrophyUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for Bolster.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyBolsterA)
		CharacterHasStatus(_Character, STATUS:ApplyBolsterB)
		CharacterHasStatus(_Character, STATUS:ApplyBolsterC)
		CharacterHasStatus(_Character, STATUS:ApplyBolsterD)
		CharacterHasStatus(_Character, STATUS:ApplyBolsterE)
		CharacterHasStatus(_Character, STATUS:ApplyBolsterF)
		CharacterHasStatus(_Character, STATUS:ApplyBolsterG)
		CharacterHasStatus(_Character, STATUS:ApplyBolsterH)
		CharacterHasStatus(_Character, STATUS:ApplyBolsterO)
	THEN
		SetTag(_Character, "BlueSaveTagBolster")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyBolsterA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyBolsterB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyBolsterC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyBolsterD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyBolsterE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyBolsterF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyBolsterG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyBolsterH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyBolsterO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyBolsterO)
		ENDIF
		//Multiply against NONE/Aptitude.
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_BolsterUSV, null)
		THEN
			//If not, set it.
			Set(_BolsterUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_BolsterUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_ChilledUSV, null)
		THEN
			Set(_ChilledUSV, _Strength)
			Multiply(_ChilledUSV, FLOAT:-1)
		ELSE
			Subtract(_ChilledUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_StaggeredUSV, null)
		THEN
			Set(_StaggeredUSV, _Strength)
			Multiply(_StaggeredUSV, FLOAT:-1)
		ELSE
			Subtract(_StaggeredUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_ShockedUSV, null)
		THEN
			Set(_ShockedUSV, _Strength)
			Multiply(_ShockedUSV, FLOAT:-1)
		ELSE
			Subtract(_ShockedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_FearUSV, null)
		THEN
			Set(_FearUSV, _Strength)
			Multiply(_FearUSV, FLOAT:-1)
		ELSE
			Subtract(_FearUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_BleedingUSV, null)
		THEN
			Set(_BleedingUSV, _Strength)
			Multiply(_BleedingUSV, FLOAT:-1)
		ELSE
			Subtract(_BleedingUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_MadUSV, null)
		THEN
			Set(_MadUSV, _Strength)
			Multiply(_MadUSV, FLOAT:-1)
		ELSE
			Subtract(_MadUSV, _Strength)
		ENDIF
	ENDIF

	//Check if any statuses are applied for MagicShell.
	IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellA)
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellB)
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellC)
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellD)
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellE)
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellF)
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellG)
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellH)
		CharacterHasStatus(_Character, STATUS:ApplyMagicShellO)
	THEN
		SetTag(_Character, "BlueSaveTagMagicShell")
		//Figure out which one, now.
		IF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellA)
		THEN
			Set(_Strength, FLOAT:1)
			SetTag(_Character, "BlueSaveTagStrength1")
			ListAdd(_RemoveList, ApplyMagicShellA)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellB)
		THEN
			Set(_Strength, FLOAT:2)
			SetTag(_Character, "BlueSaveTagStrength2")
			ListAdd(_RemoveList, ApplyMagicShellB)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellC)
		THEN
			Set(_Strength, FLOAT:3)
			SetTag(_Character, "BlueSaveTagStrength3")
			ListAdd(_RemoveList, ApplyMagicShellC)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellD)
		THEN
			Set(_Strength, FLOAT:4)
			SetTag(_Character, "BlueSaveTagStrength4")
			ListAdd(_RemoveList, ApplyMagicShellD)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellE)
		THEN
			Set(_Strength, FLOAT:5)
			SetTag(_Character, "BlueSaveTagStrength5")
			ListAdd(_RemoveList, ApplyMagicShellE)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellF)
		THEN
			Set(_Strength, FLOAT:6)
			SetTag(_Character, "BlueSaveTagStrength6")
			ListAdd(_RemoveList, ApplyMagicShellF)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellG)
		THEN
			Set(_Strength, FLOAT:7)
			SetTag(_Character, "BlueSaveTagStrength7")
			ListAdd(_RemoveList, ApplyMagicShellG)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellH)
		THEN
			Set(_Strength, FLOAT:8)
			SetTag(_Character, "BlueSaveTagStrength8")
			ListAdd(_RemoveList, ApplyMagicShellH)
		ELIF "c1"
			CharacterHasStatus(_Character, STATUS:ApplyMagicShellO)
		THEN
			Set(_Strength, FLOAT:16)
			SetTag(_Character, "BlueSaveTagStrength16")
			ListAdd(_RemoveList, ApplyMagicShellO)
		ENDIF
		//Multiply against NONE/Aptitude.
		Multiply(_Strength, _AptitudeMultiplier)
		//Mumbo jumbo to convert possible decimals into a random chance for upgraded chance.
		Set(_StatCheck, _Strength)
		//0.99 is used so 0% chance to apply a higher tier status is actually 0%. Technically reduces chance.
		Add(_Strength, FLOAT:0.99)
		GetRandomBetween(_Strength, _StatCheck, _Strength)
		Cast(_AbilCheck, _Strength)
		Cast(_Strength, _AbilCheck)
		//Inform text generation that the random chance passed if it did.
		IF "c1"
			IsGreaterThen(_Strength, _StatCheck)
		THEN
			SetTag(_Character, "BlueSaveTagRandomPass")
		ENDIF
		CharacterCharacterEvent(_Character, _OriginSource, "BlueSaveTagGenerateText")
		//Update USV's of relevant statuses.
		IF "c1"
			//Checking if it's been defined before.
			IsEqual(_MagicShellUSV, null)
		THEN
			//If not, set it.
			Set(_MagicShellUSV, _Strength)
		ELSE
			//If it has, add to it.
			Add(_MagicShellUSV, _Strength)
		ENDIF
		//USV's of opposite statuses. Similar to above, they need to be defined if they are not already.
		IF "c1"
			IsEqual(_SlowedUSV, null)
		THEN
			Set(_SlowedUSV, _Strength)
			Multiply(_SlowedUSV, FLOAT:-1)
		ELSE
			Subtract(_SlowedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_ShockedUSV, null)
		THEN
			Set(_ShockedUSV, _Strength)
			Multiply(_ShockedUSV, FLOAT:-1)
		ELSE
			Subtract(_ShockedUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_LoweredResistancesUSV, null)
		THEN
			Set(_LoweredResistancesUSV, _Strength)
			Multiply(_LoweredResistancesUSV, FLOAT:-1)
		ELSE
			Subtract(_LoweredResistancesUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_ChilledUSV, null)
		THEN
			Set(_ChilledUSV, _Strength)
			Multiply(_ChilledUSV, FLOAT:-1)
		ELSE
			Subtract(_ChilledUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_BurningUSV, null)
		THEN
			Set(_BurningUSV, _Strength)
			Multiply(_BurningUSV, FLOAT:-1)
		ELSE
			Subtract(_BurningUSV, _Strength)
		ENDIF
		IF "c1"
			IsEqual(_MutedUSV, null)
		THEN
			Set(_MutedUSV, _Strength)
			Multiply(_MutedUSV, FLOAT:-1)
		ELSE
			Subtract(_MutedUSV, _Strength)
		ENDIF
	ENDIF
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//
	// Phase 2: Update USV's; Discount irrelevant ones.
	// This phase is a weird one. To avoid as many actions as possible:
	// 1000 is added to used USV's instead of nullifying unused ones.
	// That is, instead of spending ~30 actions to get rid of USVs that haven't changed, I use 1-3 actions to add 1000 to ones that have.
	//
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	IF "c1&!c2"
		IsGreaterThen(_CharmedUSV, FLOAT:0)
		IsEqual(_CharmedUSV, null)
	THEN
		Add(_CharmedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Charmed_Increased")
	ELIF "c1&!c2"
		IsLessThen(_CharmedUSV, FLOAT:0)
		IsEqual(_CharmedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:CharmedA)
			CharacterHasStatus(_Character, STATUS:CharmedB)
			CharacterHasStatus(_Character, STATUS:CharmedC)
			CharacterHasStatus(_Character, STATUS:CharmedD)
			CharacterHasStatus(_Character, STATUS:CharmedE)
			CharacterHasStatus(_Character, STATUS:CharmedF)
			CharacterHasStatus(_Character, STATUS:CharmedG)
			CharacterHasStatus(_Character, STATUS:CHARMED)
		THEN
			Add(_CharmedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Charmed_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_SoulSapUSV, FLOAT:0)
		IsEqual(_SoulSapUSV, null)
	THEN
		Add(_SoulSapUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_SoulSap_Increased")
	ELIF "c1&!c2"
		IsLessThen(_SoulSapUSV, FLOAT:0)
		IsEqual(_SoulSapUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:SoulSapA)
			CharacterHasStatus(_Character, STATUS:SoulSapB)
			CharacterHasStatus(_Character, STATUS:SoulSapC)
			CharacterHasStatus(_Character, STATUS:SoulSapD)
			CharacterHasStatus(_Character, STATUS:SoulSapE)
			CharacterHasStatus(_Character, STATUS:SoulSapF)
			CharacterHasStatus(_Character, STATUS:SoulSapG)
			CharacterHasStatus(_Character, STATUS:SoulSapH)
		THEN
			Add(_SoulSapUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_SoulSap_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_BleedingUSV, FLOAT:0)
		IsEqual(_BleedingUSV, null)
	THEN
		Add(_BleedingUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Bleeding_Increased")
	ELIF "c1&!c2"
		IsLessThen(_BleedingUSV, FLOAT:0)
		IsEqual(_BleedingUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:BleedingA)
			CharacterHasStatus(_Character, STATUS:BleedingB)
			CharacterHasStatus(_Character, STATUS:BleedingC)
			CharacterHasStatus(_Character, STATUS:BleedingD)
			CharacterHasStatus(_Character, STATUS:BleedingE)
			CharacterHasStatus(_Character, STATUS:BleedingF)
			CharacterHasStatus(_Character, STATUS:BleedingG)
			CharacterHasStatus(_Character, STATUS:BleedingH)
		THEN
			Add(_BleedingUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Bleeding_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_SlowedUSV, FLOAT:0)
		IsEqual(_SlowedUSV, null)
	THEN
		Add(_SlowedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Slowed_Increased")
	ELIF "c1&!c2"
		IsLessThen(_SlowedUSV, FLOAT:0)
		IsEqual(_SlowedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:SlowedA)
			CharacterHasStatus(_Character, STATUS:SlowedB)
			CharacterHasStatus(_Character, STATUS:SlowedC)
			CharacterHasStatus(_Character, STATUS:SlowedD)
			CharacterHasStatus(_Character, STATUS:SlowedE)
			CharacterHasStatus(_Character, STATUS:SlowedF)
			CharacterHasStatus(_Character, STATUS:SlowedG)
			CharacterHasStatus(_Character, STATUS:SlowedH)
		THEN
			Add(_SlowedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Slowed_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_DiseasedUSV, FLOAT:0)
		IsEqual(_DiseasedUSV, null)
	THEN
		Add(_DiseasedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Diseased_Increased")
	ELIF "c1&!c2"
		IsLessThen(_DiseasedUSV, FLOAT:0)
		IsEqual(_DiseasedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:DiseasedA)
			CharacterHasStatus(_Character, STATUS:DiseasedB)
			CharacterHasStatus(_Character, STATUS:DiseasedC)
			CharacterHasStatus(_Character, STATUS:DiseasedD)
			CharacterHasStatus(_Character, STATUS:DiseasedE)
			CharacterHasStatus(_Character, STATUS:DiseasedF)
			CharacterHasStatus(_Character, STATUS:DiseasedG)
			CharacterHasStatus(_Character, STATUS:DiseasedH)
		THEN
			Add(_DiseasedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Diseased_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_CrippledUSV, FLOAT:0)
		IsEqual(_CrippledUSV, null)
	THEN
		Add(_CrippledUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Crippled_Increased")
	ELIF "c1&!c2"
		IsLessThen(_CrippledUSV, FLOAT:0)
		IsEqual(_CrippledUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:CrippledA)
			CharacterHasStatus(_Character, STATUS:CrippledB)
			CharacterHasStatus(_Character, STATUS:CrippledC)
			CharacterHasStatus(_Character, STATUS:CrippledD)
			CharacterHasStatus(_Character, STATUS:CrippledE)
			CharacterHasStatus(_Character, STATUS:CrippledF)
			CharacterHasStatus(_Character, STATUS:CrippledG)
			CharacterHasStatus(_Character, STATUS:CrippledH)
		THEN
			Add(_CrippledUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Crippled_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_ChilledUSV, FLOAT:0)
		IsEqual(_ChilledUSV, null)
	THEN
		Add(_ChilledUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Chilled_Increased")
	ELIF "c1&!c2"
		IsLessThen(_ChilledUSV, FLOAT:0)
		IsEqual(_ChilledUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
			CharacterHasStatus(_Character, STATUS:ChilledA)
			CharacterHasStatus(_Character, STATUS:ChilledB)
			CharacterHasStatus(_Character, STATUS:ChilledC)
			CharacterHasStatus(_Character, STATUS:ChilledD)
			CharacterHasStatus(_Character, STATUS:ChilledE)
			CharacterHasStatus(_Character, STATUS:ChilledF)
			CharacterHasStatus(_Character, STATUS:ChilledG)
			CharacterHasStatus(_Character, STATUS:ChilledH)
			CharacterHasStatus(_Character, STATUS:FROZEN)
		THEN
			Add(_ChilledUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Chilled_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_WeakUSV, FLOAT:0)
		IsEqual(_WeakUSV, null)
	THEN
		Add(_WeakUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Weak_Increased")
	ELIF "c1&!c2"
		IsLessThen(_WeakUSV, FLOAT:0)
		IsEqual(_WeakUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:WeakA)
			CharacterHasStatus(_Character, STATUS:WeakB)
			CharacterHasStatus(_Character, STATUS:WeakC)
			CharacterHasStatus(_Character, STATUS:WeakD)
			CharacterHasStatus(_Character, STATUS:WeakE)
			CharacterHasStatus(_Character, STATUS:WeakF)
			CharacterHasStatus(_Character, STATUS:WeakG)
			CharacterHasStatus(_Character, STATUS:WeakH)
		THEN
			Add(_WeakUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Weak_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_DecayingUSV, FLOAT:0)
		IsEqual(_DecayingUSV, null)
	THEN
		Add(_DecayingUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Decaying_Increased")
	ELIF "c1&!c2"
		IsLessThen(_DecayingUSV, FLOAT:0)
		IsEqual(_DecayingUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:DecayingA)
			CharacterHasStatus(_Character, STATUS:DecayingB)
			CharacterHasStatus(_Character, STATUS:DecayingC)
			CharacterHasStatus(_Character, STATUS:DecayingD)
			CharacterHasStatus(_Character, STATUS:DecayingE)
			CharacterHasStatus(_Character, STATUS:DecayingF)
			CharacterHasStatus(_Character, STATUS:DecayingG)
			CharacterHasStatus(_Character, STATUS:DecayingH)
		THEN
			Add(_DecayingUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Decaying_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_AcidUSV, FLOAT:0)
		IsEqual(_AcidUSV, null)
	THEN
		Add(_AcidUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Acid_Increased")
	ELIF "c1&!c2"
		IsLessThen(_AcidUSV, FLOAT:0)
		IsEqual(_AcidUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:AcidA)
			CharacterHasStatus(_Character, STATUS:AcidB)
			CharacterHasStatus(_Character, STATUS:AcidC)
			CharacterHasStatus(_Character, STATUS:AcidD)
			CharacterHasStatus(_Character, STATUS:AcidE)
			CharacterHasStatus(_Character, STATUS:AcidF)
			CharacterHasStatus(_Character, STATUS:AcidG)
			CharacterHasStatus(_Character, STATUS:AcidH)
		THEN
			Add(_AcidUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Acid_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_AtrophyUSV, FLOAT:0)
		IsEqual(_AtrophyUSV, null)
	THEN
		Add(_AtrophyUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Atrophy_Increased")
	ELIF "c1&!c2"
		IsLessThen(_AtrophyUSV, FLOAT:0)
		IsEqual(_AtrophyUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:AtrophyA)
			CharacterHasStatus(_Character, STATUS:AtrophyB)
			CharacterHasStatus(_Character, STATUS:AtrophyC)
			CharacterHasStatus(_Character, STATUS:AtrophyD)
			CharacterHasStatus(_Character, STATUS:AtrophyE)
			CharacterHasStatus(_Character, STATUS:AtrophyF)
			CharacterHasStatus(_Character, STATUS:AtrophyG)
			CharacterHasStatus(_Character, STATUS:AtrophyH)
		THEN
			Add(_AtrophyUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Atrophy_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_BlindUSV, FLOAT:0)
		IsEqual(_BlindUSV, null)
	THEN
		Add(_BlindUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Blind_Increased")
	ELIF "c1&!c2"
		IsLessThen(_BlindUSV, FLOAT:0)
		IsEqual(_BlindUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:BlindA)
			CharacterHasStatus(_Character, STATUS:BlindB)
			CharacterHasStatus(_Character, STATUS:BlindC)
			CharacterHasStatus(_Character, STATUS:BlindD)
			CharacterHasStatus(_Character, STATUS:BlindE)
			CharacterHasStatus(_Character, STATUS:BlindF)
			CharacterHasStatus(_Character, STATUS:BlindG)
			CharacterHasStatus(_Character, STATUS:BlindH)
		THEN
			Add(_BlindUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Blind_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_FearUSV, FLOAT:0)
		IsEqual(_FearUSV, null)
	THEN
		Add(_FearUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Fear_Increased")
	ELIF "c1&!c2"
		IsLessThen(_FearUSV, FLOAT:0)
		IsEqual(_FearUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:FearA)
			CharacterHasStatus(_Character, STATUS:FearB)
			CharacterHasStatus(_Character, STATUS:FearC)
			CharacterHasStatus(_Character, STATUS:FearD)
			CharacterHasStatus(_Character, STATUS:FearE)
			CharacterHasStatus(_Character, STATUS:FearF)
			CharacterHasStatus(_Character, STATUS:FearG)
			CharacterHasStatus(_Character, STATUS:FearH)
		THEN
			Add(_FearUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Fear_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_StaggeredUSV, FLOAT:0)
		IsEqual(_StaggeredUSV, null)
	THEN
		Add(_StaggeredUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Staggered_Increased")
	ELIF "c1&!c2"
		IsLessThen(_StaggeredUSV, FLOAT:0)
		IsEqual(_StaggeredUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:StaggeredA)
			CharacterHasStatus(_Character, STATUS:StaggeredB)
			CharacterHasStatus(_Character, STATUS:StaggeredC)
			CharacterHasStatus(_Character, STATUS:StaggeredD)
			CharacterHasStatus(_Character, STATUS:StaggeredE)
			CharacterHasStatus(_Character, STATUS:StaggeredF)
			CharacterHasStatus(_Character, STATUS:StaggeredG)
			CharacterHasStatus(_Character, STATUS:KNOCKED_DOWN)
		THEN
			Add(_StaggeredUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Staggered_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_MutedUSV, FLOAT:0)
		IsEqual(_MutedUSV, null)
	THEN
		Add(_MutedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Muted_Increased")
	ELIF "c1&!c2"
		IsLessThen(_MutedUSV, FLOAT:0)
		IsEqual(_MutedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:MutedA)
			CharacterHasStatus(_Character, STATUS:MutedB)
			CharacterHasStatus(_Character, STATUS:MutedC)
			CharacterHasStatus(_Character, STATUS:MutedD)
			CharacterHasStatus(_Character, STATUS:MutedE)
			CharacterHasStatus(_Character, STATUS:MutedF)
			CharacterHasStatus(_Character, STATUS:MutedG)
			CharacterHasStatus(_Character, STATUS:MutedH)
		THEN
			Add(_MutedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Muted_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_PetrifiedUSV, FLOAT:0)
		IsEqual(_PetrifiedUSV, null)
	THEN
		Add(_PetrifiedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Petrified_Increased")
	ELIF "c1&!c2"
		IsLessThen(_PetrifiedUSV, FLOAT:0)
		IsEqual(_PetrifiedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:PetrifiedA)
			CharacterHasStatus(_Character, STATUS:PetrifiedB)
			CharacterHasStatus(_Character, STATUS:PetrifiedC)
			CharacterHasStatus(_Character, STATUS:PetrifiedD)
			CharacterHasStatus(_Character, STATUS:PetrifiedE)
			CharacterHasStatus(_Character, STATUS:PetrifiedF)
			CharacterHasStatus(_Character, STATUS:PetrifiedG)
			CharacterHasStatus(_Character, STATUS:PETRIFIED)
		THEN
			Add(_PetrifiedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Petrified_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_BurningUSV, FLOAT:0)
		IsEqual(_BurningUSV, null)
	THEN
		Add(_BurningUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Burning_Increased")
	ELIF "c1&!c2"
		IsLessThen(_BurningUSV, FLOAT:0)
		IsEqual(_BurningUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:BurningA)
			CharacterHasStatus(_Character, STATUS:BurningB)
			CharacterHasStatus(_Character, STATUS:BurningC)
			CharacterHasStatus(_Character, STATUS:BurningD)
			CharacterHasStatus(_Character, STATUS:BurningE)
			CharacterHasStatus(_Character, STATUS:BurningF)
			CharacterHasStatus(_Character, STATUS:BurningG)
			CharacterHasStatus(_Character, STATUS:BurningH)
		THEN
			Add(_BurningUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Burning_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_PoisonedUSV, FLOAT:0)
		IsEqual(_PoisonedUSV, null)
	THEN
		Add(_PoisonedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Poisoned_Increased")
	ELIF "c1&!c2"
		IsLessThen(_PoisonedUSV, FLOAT:0)
		IsEqual(_PoisonedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:PoisonedA)
			CharacterHasStatus(_Character, STATUS:PoisonedB)
			CharacterHasStatus(_Character, STATUS:PoisonedC)
			CharacterHasStatus(_Character, STATUS:PoisonedD)
			CharacterHasStatus(_Character, STATUS:PoisonedE)
			CharacterHasStatus(_Character, STATUS:PoisonedF)
			CharacterHasStatus(_Character, STATUS:PoisonedG)
			CharacterHasStatus(_Character, STATUS:PoisonedH)
		THEN
			Add(_PoisonedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Poisoned_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_ShockedUSV, FLOAT:0)
		IsEqual(_ShockedUSV, null)
	THEN
		Add(_ShockedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Shocked_Increased")
	ELIF "c1&!c2"
		IsLessThen(_ShockedUSV, FLOAT:0)
		IsEqual(_ShockedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:ShockedA)
			CharacterHasStatus(_Character, STATUS:ShockedB)
			CharacterHasStatus(_Character, STATUS:ShockedC)
			CharacterHasStatus(_Character, STATUS:ShockedD)
			CharacterHasStatus(_Character, STATUS:ShockedE)
			CharacterHasStatus(_Character, STATUS:ShockedF)
			CharacterHasStatus(_Character, STATUS:ShockedG)
			CharacterHasStatus(_Character, STATUS:STUNNED)
		THEN
			Add(_ShockedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Shocked_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_SleepingUSV, FLOAT:0)
		IsEqual(_SleepingUSV, null)
	THEN
		Add(_SleepingUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Sleeping_Increased")
	ELIF "c1&!c2"
		IsLessThen(_SleepingUSV, FLOAT:0)
		IsEqual(_SleepingUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:SleepingA)
			CharacterHasStatus(_Character, STATUS:SleepingB)
			CharacterHasStatus(_Character, STATUS:SleepingC)
			CharacterHasStatus(_Character, STATUS:SleepingD)
			CharacterHasStatus(_Character, STATUS:SleepingE)
			CharacterHasStatus(_Character, STATUS:SleepingF)
			CharacterHasStatus(_Character, STATUS:SleepingG)
			CharacterHasStatus(_Character, STATUS:SleepingH)
		THEN
			Add(_SleepingUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Sleeping_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_LoweredResistancesUSV, FLOAT:0)
		IsEqual(_LoweredResistancesUSV, null)
	THEN
		Add(_LoweredResistancesUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_LoweredResistances_Increased")
	ELIF "c1&!c2"
		IsLessThen(_LoweredResistancesUSV, FLOAT:0)
		IsEqual(_LoweredResistancesUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesA)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesB)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesC)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesD)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesE)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesF)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesG)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesH)
		THEN
			Add(_LoweredResistancesUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_LoweredResistances_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_DrainWillpowerUSV, FLOAT:0)
		IsEqual(_DrainWillpowerUSV, null)
	THEN
		Add(_DrainWillpowerUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_DrainWillpower_Increased")
	ELIF "c1&!c2"
		IsLessThen(_DrainWillpowerUSV, FLOAT:0)
		IsEqual(_DrainWillpowerUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerA)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerB)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerC)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerD)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerE)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerF)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerG)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerH)
		THEN
			Add(_DrainWillpowerUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_DrainWillpower_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_SunderedUSV, FLOAT:0)
		IsEqual(_SunderedUSV, null)
	THEN
		Add(_SunderedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Sundered_Increased")
	ELIF "c1&!c2"
		IsLessThen(_SunderedUSV, FLOAT:0)
		IsEqual(_SunderedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:SunderedA)
			CharacterHasStatus(_Character, STATUS:SunderedB)
			CharacterHasStatus(_Character, STATUS:SunderedC)
			CharacterHasStatus(_Character, STATUS:SunderedD)
			CharacterHasStatus(_Character, STATUS:SunderedE)
			CharacterHasStatus(_Character, STATUS:SunderedF)
			CharacterHasStatus(_Character, STATUS:SunderedG)
			CharacterHasStatus(_Character, STATUS:SunderedH)
		THEN
			Add(_SunderedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Sundered_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_HebetudinousUSV, FLOAT:0)
		IsEqual(_HebetudinousUSV, null)
	THEN
		Add(_HebetudinousUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Hebetudinous_Increased")
	ELIF "c1&!c2"
		IsLessThen(_HebetudinousUSV, FLOAT:0)
		IsEqual(_HebetudinousUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:HebetudinousA)
			CharacterHasStatus(_Character, STATUS:HebetudinousB)
			CharacterHasStatus(_Character, STATUS:HebetudinousC)
			CharacterHasStatus(_Character, STATUS:HebetudinousD)
			CharacterHasStatus(_Character, STATUS:HebetudinousE)
			CharacterHasStatus(_Character, STATUS:HebetudinousF)
			CharacterHasStatus(_Character, STATUS:HebetudinousG)
			CharacterHasStatus(_Character, STATUS:HebetudinousH)
		THEN
			Add(_HebetudinousUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Hebetudinous_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_MadUSV, FLOAT:0)
		IsEqual(_MadUSV, null)
	THEN
		Add(_MadUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Mad_Increased")
	ELIF "c1&!c2"
		IsLessThen(_MadUSV, FLOAT:0)
		IsEqual(_MadUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:MadA)
			CharacterHasStatus(_Character, STATUS:MadB)
			CharacterHasStatus(_Character, STATUS:MadC)
			CharacterHasStatus(_Character, STATUS:MadD)
			CharacterHasStatus(_Character, STATUS:MadE)
			CharacterHasStatus(_Character, STATUS:MadF)
			CharacterHasStatus(_Character, STATUS:MadG)
			CharacterHasStatus(_Character, STATUS:MADNESS)
		THEN
			Add(_MadUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Mad_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_FortifiedUSV, FLOAT:0)
		IsEqual(_FortifiedUSV, null)
	THEN
		Add(_FortifiedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Fortified_Increased")
	ELIF "c1&!c2"
		IsLessThen(_FortifiedUSV, FLOAT:0)
		IsEqual(_FortifiedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:FortifiedA)
			CharacterHasStatus(_Character, STATUS:FortifiedB)
			CharacterHasStatus(_Character, STATUS:FortifiedC)
			CharacterHasStatus(_Character, STATUS:FortifiedD)
			CharacterHasStatus(_Character, STATUS:FortifiedE)
			CharacterHasStatus(_Character, STATUS:FortifiedF)
			CharacterHasStatus(_Character, STATUS:FortifiedG)
			CharacterHasStatus(_Character, STATUS:FortifiedH)
		THEN
			Add(_FortifiedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Fortified_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_ClearMindedUSV, FLOAT:0)
		IsEqual(_ClearMindedUSV, null)
	THEN
		Add(_ClearMindedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_ClearMinded_Increased")
	ELIF "c1&!c2"
		IsLessThen(_ClearMindedUSV, FLOAT:0)
		IsEqual(_ClearMindedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:ClearMindedA)
			CharacterHasStatus(_Character, STATUS:ClearMindedB)
			CharacterHasStatus(_Character, STATUS:ClearMindedC)
			CharacterHasStatus(_Character, STATUS:ClearMindedD)
			CharacterHasStatus(_Character, STATUS:ClearMindedE)
			CharacterHasStatus(_Character, STATUS:ClearMindedF)
			CharacterHasStatus(_Character, STATUS:ClearMindedG)
			CharacterHasStatus(_Character, STATUS:ClearMindedH)
		THEN
			Add(_ClearMindedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_ClearMinded_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_RestedUSV, FLOAT:0)
		IsEqual(_RestedUSV, null)
	THEN
		Add(_RestedUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Rested_Increased")
	ELIF "c1&!c2"
		IsLessThen(_RestedUSV, FLOAT:0)
		IsEqual(_RestedUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:RestedA)
			CharacterHasStatus(_Character, STATUS:RestedB)
			CharacterHasStatus(_Character, STATUS:RestedC)
			CharacterHasStatus(_Character, STATUS:RestedD)
			CharacterHasStatus(_Character, STATUS:RestedE)
			CharacterHasStatus(_Character, STATUS:RestedF)
			CharacterHasStatus(_Character, STATUS:RestedG)
			CharacterHasStatus(_Character, STATUS:RestedH)
		THEN
			Add(_RestedUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Rested_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_StrongUSV, FLOAT:0)
		IsEqual(_StrongUSV, null)
	THEN
		Add(_StrongUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Strong_Increased")
	ELIF "c1&!c2"
		IsLessThen(_StrongUSV, FLOAT:0)
		IsEqual(_StrongUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:StrongA)
			CharacterHasStatus(_Character, STATUS:StrongB)
			CharacterHasStatus(_Character, STATUS:StrongC)
			CharacterHasStatus(_Character, STATUS:StrongD)
			CharacterHasStatus(_Character, STATUS:StrongE)
			CharacterHasStatus(_Character, STATUS:StrongF)
			CharacterHasStatus(_Character, STATUS:StrongG)
			CharacterHasStatus(_Character, STATUS:StrongH)
		THEN
			Add(_StrongUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Strong_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_AntidoteUSV, FLOAT:0)
		IsEqual(_AntidoteUSV, null)
	THEN
		Add(_AntidoteUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Antidote_Increased")
	ELIF "c1&!c2"
		IsLessThen(_AntidoteUSV, FLOAT:0)
		IsEqual(_AntidoteUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:AntidoteA)
			CharacterHasStatus(_Character, STATUS:AntidoteB)
			CharacterHasStatus(_Character, STATUS:AntidoteC)
			CharacterHasStatus(_Character, STATUS:AntidoteD)
			CharacterHasStatus(_Character, STATUS:AntidoteE)
			CharacterHasStatus(_Character, STATUS:AntidoteF)
			CharacterHasStatus(_Character, STATUS:AntidoteG)
			CharacterHasStatus(_Character, STATUS:AntidoteH)
		THEN
			Add(_AntidoteUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Antidote_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_BolsterUSV, FLOAT:0)
		IsEqual(_BolsterUSV, null)
	THEN
		Add(_BolsterUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_Bolster_Increased")
	ELIF "c1&!c2"
		IsLessThen(_BolsterUSV, FLOAT:0)
		IsEqual(_BolsterUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:BolsterA)
			CharacterHasStatus(_Character, STATUS:BolsterB)
			CharacterHasStatus(_Character, STATUS:BolsterC)
			CharacterHasStatus(_Character, STATUS:BolsterD)
			CharacterHasStatus(_Character, STATUS:BolsterE)
			CharacterHasStatus(_Character, STATUS:BolsterF)
			CharacterHasStatus(_Character, STATUS:BolsterG)
			CharacterHasStatus(_Character, STATUS:BolsterH)
		THEN
			Add(_BolsterUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_Bolster_Reduced")
		ENDIF
	ENDIF
	IF "c1&!c2"
		IsGreaterThen(_MagicShellUSV, FLOAT:0)
		IsEqual(_MagicShellUSV, null)
	THEN
		Add(_MagicShellUSV, FLOAT:1000)
		CharacterEvent(_Character, "Blue_MagicShell_Increased")
	ELIF "c1&!c2"
		IsLessThen(_MagicShellUSV, FLOAT:0)
		IsEqual(_MagicShellUSV, null)
	THEN
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:MagicShellA)
			CharacterHasStatus(_Character, STATUS:MagicShellB)
			CharacterHasStatus(_Character, STATUS:MagicShellC)
			CharacterHasStatus(_Character, STATUS:MagicShellD)
			CharacterHasStatus(_Character, STATUS:MagicShellE)
			CharacterHasStatus(_Character, STATUS:MagicShellF)
			CharacterHasStatus(_Character, STATUS:MagicShellG)
			CharacterHasStatus(_Character, STATUS:MagicShellH)
		THEN
			Add(_MagicShellUSV, FLOAT:1000)
			CharacterEvent(_Character, "Blue_MagicShell_Reduced")
		ENDIF
	ENDIF
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//
	// Phase 3: Check Existing Statuses
	// Now that we have the USV changes and what statuses are actually relevant, it's time to check existing statuses.
	//
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	IF "c1"
		IsGreaterThen(_CharmedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:CharmedA)
			CharacterHasStatus(_Character, STATUS:CharmedB)
			CharacterHasStatus(_Character, STATUS:CharmedC)
			CharacterHasStatus(_Character, STATUS:CharmedD)
			CharacterHasStatus(_Character, STATUS:CharmedE)
			CharacterHasStatus(_Character, STATUS:CharmedF)
			CharacterHasStatus(_Character, STATUS:CharmedG)
			CharacterHasStatus(_Character, STATUS:CHARMED)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:CharmedA)
			THEN
				Add(_CharmedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CharmedB)
			THEN
				Add(_CharmedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CharmedC)
			THEN
				Add(_CharmedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CharmedD)
			THEN
				Add(_CharmedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CharmedE)
			THEN
				Add(_CharmedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CharmedF)
			THEN
				Add(_CharmedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CharmedG)
			THEN
				Add(_CharmedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CHARMED)
			THEN
				Add(_CharmedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	
	IF "c1"
		IsGreaterThen(_SoulSapUSV, FLOAT:512)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:SoulSapA)
			CharacterHasStatus(_Character, STATUS:SoulSapB)
			CharacterHasStatus(_Character, STATUS:SoulSapC)
			CharacterHasStatus(_Character, STATUS:SoulSapD)
			CharacterHasStatus(_Character, STATUS:SoulSapE)
			CharacterHasStatus(_Character, STATUS:SoulSapF)
			CharacterHasStatus(_Character, STATUS:SoulSapG)
			CharacterHasStatus(_Character, STATUS:SoulSapH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:SoulSapA)
			THEN
				Add(_SoulSapUSV, FLOAT:1)
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SoulSapB)
			THEN
				Add(_SoulSapUSV, FLOAT:2)
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SoulSapC)
			THEN
				Add(_SoulSapUSV, FLOAT:3)
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SoulSapD)
			THEN
				Add(_SoulSapUSV, FLOAT:4)
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SoulSapE)
			THEN
				Add(_SoulSapUSV, FLOAT:5)
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SoulSapF)
			THEN
				Add(_SoulSapUSV, FLOAT:6)
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SoulSapG)
			THEN
				Add(_SoulSapUSV, FLOAT:7)
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SoulSapH)
			THEN
				Add(_SoulSapUSV, FLOAT:8)
			ENDIF
		ENDIF
	ENDIF
	
	IF "c1"
		IsGreaterThen(_BleedingUSV, FLOAT:512)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:BleedingA)
			CharacterHasStatus(_Character, STATUS:BleedingB)
			CharacterHasStatus(_Character, STATUS:BleedingC)
			CharacterHasStatus(_Character, STATUS:BleedingD)
			CharacterHasStatus(_Character, STATUS:BleedingE)
			CharacterHasStatus(_Character, STATUS:BleedingF)
			CharacterHasStatus(_Character, STATUS:BleedingG)
			CharacterHasStatus(_Character, STATUS:BleedingH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:BleedingA)
			THEN
				Add(_BleedingUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BleedingB)
			THEN
				Add(_BleedingUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BleedingC)
			THEN
				Add(_BleedingUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BleedingD)
			THEN
				Add(_BleedingUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BleedingE)
			THEN
				Add(_BleedingUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BleedingF)
			THEN
				Add(_BleedingUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BleedingG)
			THEN
				Add(_BleedingUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BleedingH)
			THEN
				Add(_BleedingUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_SlowedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:SlowedA)
			CharacterHasStatus(_Character, STATUS:SlowedB)
			CharacterHasStatus(_Character, STATUS:SlowedC)
			CharacterHasStatus(_Character, STATUS:SlowedD)
			CharacterHasStatus(_Character, STATUS:SlowedE)
			CharacterHasStatus(_Character, STATUS:SlowedF)
			CharacterHasStatus(_Character, STATUS:SlowedG)
			CharacterHasStatus(_Character, STATUS:SlowedH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:SlowedA)
			THEN
				Add(_SlowedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SlowedB)
			THEN
				Add(_SlowedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SlowedC)
			THEN
				Add(_SlowedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SlowedD)
			THEN
				Add(_SlowedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SlowedE)
			THEN
				Add(_SlowedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SlowedF)
			THEN
				Add(_SlowedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SlowedG)
			THEN
				Add(_SlowedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SlowedH)
			THEN
				Add(_SlowedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_DiseasedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:DiseasedA)
			CharacterHasStatus(_Character, STATUS:DiseasedB)
			CharacterHasStatus(_Character, STATUS:DiseasedC)
			CharacterHasStatus(_Character, STATUS:DiseasedD)
			CharacterHasStatus(_Character, STATUS:DiseasedE)
			CharacterHasStatus(_Character, STATUS:DiseasedF)
			CharacterHasStatus(_Character, STATUS:DiseasedG)
			CharacterHasStatus(_Character, STATUS:DiseasedH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:DiseasedA)
			THEN
				Add(_DiseasedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DiseasedB)
			THEN
				Add(_DiseasedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DiseasedC)
			THEN
				Add(_DiseasedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DiseasedD)
			THEN
				Add(_DiseasedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DiseasedE)
			THEN
				Add(_DiseasedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DiseasedF)
			THEN
				Add(_DiseasedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DiseasedG)
			THEN
				Add(_DiseasedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DiseasedH)
			THEN
				Add(_DiseasedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_CrippledUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:CrippledA)
			CharacterHasStatus(_Character, STATUS:CrippledB)
			CharacterHasStatus(_Character, STATUS:CrippledC)
			CharacterHasStatus(_Character, STATUS:CrippledD)
			CharacterHasStatus(_Character, STATUS:CrippledE)
			CharacterHasStatus(_Character, STATUS:CrippledF)
			CharacterHasStatus(_Character, STATUS:CrippledG)
			CharacterHasStatus(_Character, STATUS:CrippledH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:CrippledA)
			THEN
				Add(_CrippledUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CrippledB)
			THEN
				Add(_CrippledUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CrippledC)
			THEN
				Add(_CrippledUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CrippledD)
			THEN
				Add(_CrippledUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CrippledE)
			THEN
				Add(_CrippledUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CrippledF)
			THEN
				Add(_CrippledUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CrippledG)
			THEN
				Add(_CrippledUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:CrippledH)
			THEN
				Add(_CrippledUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_ChilledUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
			CharacterHasStatus(_Character, STATUS:ChilledA)
			CharacterHasStatus(_Character, STATUS:ChilledB)
			CharacterHasStatus(_Character, STATUS:ChilledC)
			CharacterHasStatus(_Character, STATUS:ChilledD)
			CharacterHasStatus(_Character, STATUS:ChilledE)
			CharacterHasStatus(_Character, STATUS:ChilledF)
			CharacterHasStatus(_Character, STATUS:ChilledG)
			CharacterHasStatus(_Character, STATUS:ChilledH)
			//Frozen is also included in the tiered system.
			//When applying the status properly this will be checked again and Frozen will be used instead of ChilledH.
			CharacterHasStatus(_Character, STATUS:FROZEN)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:ChilledA)
			THEN
				Add(_ChilledUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ChilledB)
			THEN
				Add(_ChilledUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ChilledC)
			THEN
				Add(_ChilledUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ChilledD)
			THEN
				Add(_ChilledUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ChilledE)
			THEN
				Add(_ChilledUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ChilledF)
			THEN
				Add(_ChilledUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ChilledG)
			THEN
				Add(_ChilledUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ChilledH)
			THEN
				Add(_ChilledUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:8)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FROZEN)
			THEN
				Add(_ChilledUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_WeakUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:WeakA)
			CharacterHasStatus(_Character, STATUS:WeakB)
			CharacterHasStatus(_Character, STATUS:WeakC)
			CharacterHasStatus(_Character, STATUS:WeakD)
			CharacterHasStatus(_Character, STATUS:WeakE)
			CharacterHasStatus(_Character, STATUS:WeakF)
			CharacterHasStatus(_Character, STATUS:WeakG)
			CharacterHasStatus(_Character, STATUS:WeakH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:WeakA)
			THEN
				Add(_WeakUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:WeakB)
			THEN
				Add(_WeakUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:WeakC)
			THEN
				Add(_WeakUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:WeakD)
			THEN
				Add(_WeakUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:WeakE)
			THEN
				Add(_WeakUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:WeakF)
			THEN
				Add(_WeakUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:WeakG)
			THEN
				Add(_WeakUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:WeakH)
			THEN
				Add(_WeakUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_DecayingUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:DecayingA)
			CharacterHasStatus(_Character, STATUS:DecayingB)
			CharacterHasStatus(_Character, STATUS:DecayingC)
			CharacterHasStatus(_Character, STATUS:DecayingD)
			CharacterHasStatus(_Character, STATUS:DecayingE)
			CharacterHasStatus(_Character, STATUS:DecayingF)
			CharacterHasStatus(_Character, STATUS:DecayingG)
			CharacterHasStatus(_Character, STATUS:DecayingH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:DecayingA)
			THEN
				Add(_DecayingUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DecayingB)
			THEN
				Add(_DecayingUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DecayingC)
			THEN
				Add(_DecayingUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DecayingD)
			THEN
				Add(_DecayingUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DecayingE)
			THEN
				Add(_DecayingUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DecayingF)
			THEN
				Add(_DecayingUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DecayingG)
			THEN
				Add(_DecayingUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DecayingH)
			THEN
				Add(_DecayingUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_AcidUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:AcidA)
			CharacterHasStatus(_Character, STATUS:AcidB)
			CharacterHasStatus(_Character, STATUS:AcidC)
			CharacterHasStatus(_Character, STATUS:AcidD)
			CharacterHasStatus(_Character, STATUS:AcidE)
			CharacterHasStatus(_Character, STATUS:AcidF)
			CharacterHasStatus(_Character, STATUS:AcidG)
			CharacterHasStatus(_Character, STATUS:AcidH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:AcidA)
			THEN
				Add(_AcidUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AcidB)
			THEN
				Add(_AcidUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AcidC)
			THEN
				Add(_AcidUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AcidD)
			THEN
				Add(_AcidUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AcidE)
			THEN
				Add(_AcidUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AcidF)
			THEN
				Add(_AcidUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AcidG)
			THEN
				Add(_AcidUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AcidH)
			THEN
				Add(_AcidUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_AtrophyUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:AtrophyA)
			CharacterHasStatus(_Character, STATUS:AtrophyB)
			CharacterHasStatus(_Character, STATUS:AtrophyC)
			CharacterHasStatus(_Character, STATUS:AtrophyD)
			CharacterHasStatus(_Character, STATUS:AtrophyE)
			CharacterHasStatus(_Character, STATUS:AtrophyF)
			CharacterHasStatus(_Character, STATUS:AtrophyG)
			CharacterHasStatus(_Character, STATUS:AtrophyH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:AtrophyA)
			THEN
				Add(_AtrophyUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AtrophyB)
			THEN
				Add(_AtrophyUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AtrophyC)
			THEN
				Add(_AtrophyUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AtrophyD)
			THEN
				Add(_AtrophyUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AtrophyE)
			THEN
				Add(_AtrophyUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AtrophyF)
			THEN
				Add(_AtrophyUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AtrophyG)
			THEN
				Add(_AtrophyUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AtrophyH)
			THEN
				Add(_AtrophyUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_StrongUSV, null)
				THEN
					Subtract(_StrongUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_BlindUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:BlindA)
			CharacterHasStatus(_Character, STATUS:BlindB)
			CharacterHasStatus(_Character, STATUS:BlindC)
			CharacterHasStatus(_Character, STATUS:BlindD)
			CharacterHasStatus(_Character, STATUS:BlindE)
			CharacterHasStatus(_Character, STATUS:BlindF)
			CharacterHasStatus(_Character, STATUS:BlindG)
			CharacterHasStatus(_Character, STATUS:BlindH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:BlindA)
			THEN
				Add(_BlindUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BlindB)
			THEN
				Add(_BlindUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BlindC)
			THEN
				Add(_BlindUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BlindD)
			THEN
				Add(_BlindUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BlindE)
			THEN
				Add(_BlindUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BlindF)
			THEN
				Add(_BlindUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BlindG)
			THEN
				Add(_BlindUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BlindH)
			THEN
				Add(_BlindUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_FearUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:FearA)
			CharacterHasStatus(_Character, STATUS:FearB)
			CharacterHasStatus(_Character, STATUS:FearC)
			CharacterHasStatus(_Character, STATUS:FearD)
			CharacterHasStatus(_Character, STATUS:FearE)
			CharacterHasStatus(_Character, STATUS:FearF)
			CharacterHasStatus(_Character, STATUS:FearG)
			CharacterHasStatus(_Character, STATUS:FearH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:FearA)
			THEN
				Add(_FearUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FearB)
			THEN
				Add(_FearUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FearC)
			THEN
				Add(_FearUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FearD)
			THEN
				Add(_FearUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FearE)
			THEN
				Add(_FearUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FearF)
			THEN
				Add(_FearUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FearG)
			THEN
				Add(_FearUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FearH)
			THEN
				Add(_FearUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_StaggeredUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:StaggeredA)
			CharacterHasStatus(_Character, STATUS:StaggeredB)
			CharacterHasStatus(_Character, STATUS:StaggeredC)
			CharacterHasStatus(_Character, STATUS:StaggeredD)
			CharacterHasStatus(_Character, STATUS:StaggeredE)
			CharacterHasStatus(_Character, STATUS:StaggeredF)
			CharacterHasStatus(_Character, STATUS:StaggeredG)
			CharacterHasStatus(_Character, STATUS:KNOCKED_DOWN)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:StaggeredA)
			THEN
				Add(_StaggeredUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StaggeredB)
			THEN
				Add(_StaggeredUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StaggeredC)
			THEN
				Add(_StaggeredUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StaggeredD)
			THEN
				Add(_StaggeredUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StaggeredE)
			THEN
				Add(_StaggeredUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StaggeredF)
			THEN
				Add(_StaggeredUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StaggeredG)
			THEN
				Add(_StaggeredUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:KNOCKED_DOWN)
			THEN
				Add(_StaggeredUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_PetrifiedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:PetrifiedA)
			CharacterHasStatus(_Character, STATUS:PetrifiedB)
			CharacterHasStatus(_Character, STATUS:PetrifiedC)
			CharacterHasStatus(_Character, STATUS:PetrifiedD)
			CharacterHasStatus(_Character, STATUS:PetrifiedE)
			CharacterHasStatus(_Character, STATUS:PetrifiedF)
			CharacterHasStatus(_Character, STATUS:PetrifiedG)
			CharacterHasStatus(_Character, STATUS:PETRIFIED)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:PetrifiedA)
			THEN
				Add(_PetrifiedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PetrifiedB)
			THEN
				Add(_PetrifiedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PetrifiedC)
			THEN
				Add(_PetrifiedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PetrifiedD)
			THEN
				Add(_PetrifiedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PetrifiedE)
			THEN
				Add(_PetrifiedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PetrifiedF)
			THEN
				Add(_PetrifiedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PetrifiedG)
			THEN
				Add(_PetrifiedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PETRIFIED)
			THEN
				Add(_PetrifiedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_MutedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:MutedA)
			CharacterHasStatus(_Character, STATUS:MutedB)
			CharacterHasStatus(_Character, STATUS:MutedC)
			CharacterHasStatus(_Character, STATUS:MutedD)
			CharacterHasStatus(_Character, STATUS:MutedE)
			CharacterHasStatus(_Character, STATUS:MutedF)
			CharacterHasStatus(_Character, STATUS:MutedG)
			CharacterHasStatus(_Character, STATUS:MutedH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:MutedA)
			THEN
				Add(_MutedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MutedB)
			THEN
				Add(_MutedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MutedC)
			THEN
				Add(_MutedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MutedD)
			THEN
				Add(_MutedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MutedE)
			THEN
				Add(_MutedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MutedF)
			THEN
				Add(_MutedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MutedG)
			THEN
				Add(_MutedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MutedH)
			THEN
				Add(_MutedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_BurningUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:BurningA)
			CharacterHasStatus(_Character, STATUS:BurningB)
			CharacterHasStatus(_Character, STATUS:BurningC)
			CharacterHasStatus(_Character, STATUS:BurningD)
			CharacterHasStatus(_Character, STATUS:BurningE)
			CharacterHasStatus(_Character, STATUS:BurningF)
			CharacterHasStatus(_Character, STATUS:BurningG)
			CharacterHasStatus(_Character, STATUS:BurningH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:BurningA)
			THEN
				Add(_BurningUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BurningB)
			THEN
				Add(_BurningUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BurningC)
			THEN
				Add(_BurningUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BurningD)
			THEN
				Add(_BurningUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BurningE)
			THEN
				Add(_BurningUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BurningF)
			THEN
				Add(_BurningUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BurningG)
			THEN
				Add(_BurningUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BurningH)
			THEN
				Add(_BurningUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_PoisonedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:PoisonedA)
			CharacterHasStatus(_Character, STATUS:PoisonedB)
			CharacterHasStatus(_Character, STATUS:PoisonedC)
			CharacterHasStatus(_Character, STATUS:PoisonedD)
			CharacterHasStatus(_Character, STATUS:PoisonedE)
			CharacterHasStatus(_Character, STATUS:PoisonedF)
			CharacterHasStatus(_Character, STATUS:PoisonedG)
			CharacterHasStatus(_Character, STATUS:PoisonedH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:PoisonedA)
			THEN
				Add(_PoisonedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PoisonedB)
			THEN
				Add(_PoisonedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PoisonedC)
			THEN
				Add(_PoisonedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PoisonedD)
			THEN
				Add(_PoisonedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PoisonedE)
			THEN
				Add(_PoisonedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PoisonedF)
			THEN
				Add(_PoisonedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PoisonedG)
			THEN
				Add(_PoisonedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:PoisonedH)
			THEN
				Add(_PoisonedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_AntidoteUSV, null)
				THEN
					Subtract(_AntidoteUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_ShockedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:ShockedA)
			CharacterHasStatus(_Character, STATUS:ShockedB)
			CharacterHasStatus(_Character, STATUS:ShockedC)
			CharacterHasStatus(_Character, STATUS:ShockedD)
			CharacterHasStatus(_Character, STATUS:ShockedE)
			CharacterHasStatus(_Character, STATUS:ShockedF)
			CharacterHasStatus(_Character, STATUS:ShockedG)
			CharacterHasStatus(_Character, STATUS:STUNNED)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:ShockedA)
			THEN
				Add(_ShockedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ShockedB)
			THEN
				Add(_ShockedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ShockedC)
			THEN
				Add(_ShockedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ShockedD)
			THEN
				Add(_ShockedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ShockedE)
			THEN
				Add(_ShockedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ShockedF)
			THEN
				Add(_ShockedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ShockedG)
			THEN
				Add(_ShockedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:STUNNED)
			THEN
				Add(_ShockedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:8)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:STUNNED)
			THEN
				Add(_ShockedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_SleepingUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:SleepingA)
			CharacterHasStatus(_Character, STATUS:SleepingB)
			CharacterHasStatus(_Character, STATUS:SleepingC)
			CharacterHasStatus(_Character, STATUS:SleepingD)
			CharacterHasStatus(_Character, STATUS:SleepingE)
			CharacterHasStatus(_Character, STATUS:SleepingF)
			CharacterHasStatus(_Character, STATUS:SleepingG)
			CharacterHasStatus(_Character, STATUS:SleepingH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:SleepingA)
			THEN
				Add(_SleepingUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SleepingB)
			THEN
				Add(_SleepingUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SleepingC)
			THEN
				Add(_SleepingUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SleepingD)
			THEN
				Add(_SleepingUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SleepingE)
			THEN
				Add(_SleepingUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SleepingF)
			THEN
				Add(_SleepingUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SleepingG)
			THEN
				Add(_SleepingUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SleepingH)
			THEN
				Add(_SleepingUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_RestedUSV, null)
				THEN
					Subtract(_RestedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_LoweredResistancesUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesA)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesB)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesC)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesD)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesE)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesF)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesG)
			CharacterHasStatus(_Character, STATUS:LoweredResistancesH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:LoweredResistancesA)
			THEN
				Add(_LoweredResistancesUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:LoweredResistancesB)
			THEN
				Add(_LoweredResistancesUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:LoweredResistancesC)
			THEN
				Add(_LoweredResistancesUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:LoweredResistancesD)
			THEN
				Add(_LoweredResistancesUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:LoweredResistancesE)
			THEN
				Add(_LoweredResistancesUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:LoweredResistancesF)
			THEN
				Add(_LoweredResistancesUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:LoweredResistancesG)
			THEN
				Add(_LoweredResistancesUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:LoweredResistancesH)
			THEN
				Add(_LoweredResistancesUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_MagicShellUSV, null)
				THEN
					Subtract(_MagicShellUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_DrainWillpowerUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerA)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerB)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerC)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerD)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerE)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerF)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerG)
			CharacterHasStatus(_Character, STATUS:DrainWillpowerH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:DrainWillpowerA)
			THEN
				Add(_DrainWillpowerUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DrainWillpowerB)
			THEN
				Add(_DrainWillpowerUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DrainWillpowerC)
			THEN
				Add(_DrainWillpowerUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DrainWillpowerD)
			THEN
				Add(_DrainWillpowerUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DrainWillpowerE)
			THEN
				Add(_DrainWillpowerUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DrainWillpowerF)
			THEN
				Add(_DrainWillpowerUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DrainWillpowerG)
			THEN
				Add(_DrainWillpowerUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:DrainWillpowerH)
			THEN
				Add(_DrainWillpowerUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_SunderedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:SunderedA)
			CharacterHasStatus(_Character, STATUS:SunderedB)
			CharacterHasStatus(_Character, STATUS:SunderedC)
			CharacterHasStatus(_Character, STATUS:SunderedD)
			CharacterHasStatus(_Character, STATUS:SunderedE)
			CharacterHasStatus(_Character, STATUS:SunderedF)
			CharacterHasStatus(_Character, STATUS:SunderedG)
			CharacterHasStatus(_Character, STATUS:SunderedH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:SunderedA)
			THEN
				Add(_SunderedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SunderedB)
			THEN
				Add(_SunderedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SunderedC)
			THEN
				Add(_SunderedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SunderedD)
			THEN
				Add(_SunderedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SunderedE)
			THEN
				Add(_SunderedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SunderedF)
			THEN
				Add(_SunderedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SunderedG)
			THEN
				Add(_SunderedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:SunderedH)
			THEN
				Add(_SunderedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_FortifiedUSV, null)
				THEN
					Subtract(_FortifiedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_HebetudinousUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:HebetudinousA)
			CharacterHasStatus(_Character, STATUS:HebetudinousB)
			CharacterHasStatus(_Character, STATUS:HebetudinousC)
			CharacterHasStatus(_Character, STATUS:HebetudinousD)
			CharacterHasStatus(_Character, STATUS:HebetudinousE)
			CharacterHasStatus(_Character, STATUS:HebetudinousF)
			CharacterHasStatus(_Character, STATUS:HebetudinousG)
			CharacterHasStatus(_Character, STATUS:HebetudinousH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:HebetudinousA)
			THEN
				Add(_HebetudinousUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:HebetudinousB)
			THEN
				Add(_HebetudinousUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:HebetudinousC)
			THEN
				Add(_HebetudinousUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:HebetudinousD)
			THEN
				Add(_HebetudinousUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:HebetudinousE)
			THEN
				Add(_HebetudinousUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:HebetudinousF)
			THEN
				Add(_HebetudinousUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:HebetudinousG)
			THEN
				Add(_HebetudinousUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:HebetudinousH)
			THEN
				Add(_HebetudinousUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_MadUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:MadA)
			CharacterHasStatus(_Character, STATUS:MadB)
			CharacterHasStatus(_Character, STATUS:MadC)
			CharacterHasStatus(_Character, STATUS:MadD)
			CharacterHasStatus(_Character, STATUS:MadE)
			CharacterHasStatus(_Character, STATUS:MadF)
			CharacterHasStatus(_Character, STATUS:MadG)
			CharacterHasStatus(_Character, STATUS:MADNESS)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:MadA)
			THEN
				Add(_MadUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MadB)
			THEN
				Add(_MadUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MadC)
			THEN
				Add(_MadUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MadD)
			THEN
				Add(_MadUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MadE)
			THEN
				Add(_MadUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MadF)
			THEN
				Add(_MadUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MadG)
			THEN
				Add(_MadUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MADNESS)
			THEN
				Add(_MadUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_ClearMindedUSV, null)
				THEN
					Subtract(_ClearMindedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_BolsterUSV, null)
				THEN
					Subtract(_BolsterUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_FortifiedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:FortifiedA)
			CharacterHasStatus(_Character, STATUS:FortifiedB)
			CharacterHasStatus(_Character, STATUS:FortifiedC)
			CharacterHasStatus(_Character, STATUS:FortifiedD)
			CharacterHasStatus(_Character, STATUS:FortifiedE)
			CharacterHasStatus(_Character, STATUS:FortifiedF)
			CharacterHasStatus(_Character, STATUS:FortifiedG)
			CharacterHasStatus(_Character, STATUS:FortifiedH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:FortifiedA)
			THEN
				Add(_FortifiedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_AcidUSV, null)
				THEN
					Subtract(_AcidUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_SunderedUSV, null)
				THEN
					Subtract(_SunderedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FortifiedB)
			THEN
				Add(_FortifiedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_AcidUSV, null)
				THEN
					Subtract(_AcidUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_SunderedUSV, null)
				THEN
					Subtract(_SunderedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FortifiedC)
			THEN
				Add(_FortifiedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_AcidUSV, null)
				THEN
					Subtract(_AcidUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_SunderedUSV, null)
				THEN
					Subtract(_SunderedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FortifiedD)
			THEN
				Add(_FortifiedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_AcidUSV, null)
				THEN
					Subtract(_AcidUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_SunderedUSV, null)
				THEN
					Subtract(_SunderedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FortifiedE)
			THEN
				Add(_FortifiedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_AcidUSV, null)
				THEN
					Subtract(_AcidUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_SunderedUSV, null)
				THEN
					Subtract(_SunderedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FortifiedF)
			THEN
				Add(_FortifiedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_AcidUSV, null)
				THEN
					Subtract(_AcidUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_SunderedUSV, null)
				THEN
					Subtract(_SunderedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FortifiedG)
			THEN
				Add(_FortifiedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_AcidUSV, null)
				THEN
					Subtract(_AcidUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_SunderedUSV, null)
				THEN
					Subtract(_SunderedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:FortifiedH)
			THEN
				Add(_FortifiedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_AcidUSV, null)
				THEN
					Subtract(_AcidUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_SunderedUSV, null)
				THEN
					Subtract(_SunderedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_ClearMindedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:ClearMindedA)
			CharacterHasStatus(_Character, STATUS:ClearMindedB)
			CharacterHasStatus(_Character, STATUS:ClearMindedC)
			CharacterHasStatus(_Character, STATUS:ClearMindedD)
			CharacterHasStatus(_Character, STATUS:ClearMindedE)
			CharacterHasStatus(_Character, STATUS:ClearMindedF)
			CharacterHasStatus(_Character, STATUS:ClearMindedG)
			CharacterHasStatus(_Character, STATUS:ClearMindedH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:ClearMindedA)
			THEN
				Add(_ClearMindedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_DrainWillpowerUSV, null)
				THEN
					Subtract(_DrainWillpowerUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_HebetudinousUSV, null)
				THEN
					Subtract(_HebetudinousUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ClearMindedB)
			THEN
				Add(_ClearMindedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_DrainWillpowerUSV, null)
				THEN
					Subtract(_DrainWillpowerUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_HebetudinousUSV, null)
				THEN
					Subtract(_HebetudinousUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ClearMindedC)
			THEN
				Add(_ClearMindedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_DrainWillpowerUSV, null)
				THEN
					Subtract(_DrainWillpowerUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_HebetudinousUSV, null)
				THEN
					Subtract(_HebetudinousUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ClearMindedD)
			THEN
				Add(_ClearMindedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_DrainWillpowerUSV, null)
				THEN
					Subtract(_DrainWillpowerUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_HebetudinousUSV, null)
				THEN
					Subtract(_HebetudinousUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ClearMindedE)
			THEN
				Add(_ClearMindedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_DrainWillpowerUSV, null)
				THEN
					Subtract(_DrainWillpowerUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_HebetudinousUSV, null)
				THEN
					Subtract(_HebetudinousUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ClearMindedF)
			THEN
				Add(_ClearMindedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_DrainWillpowerUSV, null)
				THEN
					Subtract(_DrainWillpowerUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_HebetudinousUSV, null)
				THEN
					Subtract(_HebetudinousUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ClearMindedG)
			THEN
				Add(_ClearMindedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_DrainWillpowerUSV, null)
				THEN
					Subtract(_DrainWillpowerUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_HebetudinousUSV, null)
				THEN
					Subtract(_HebetudinousUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:ClearMindedH)
			THEN
				Add(_ClearMindedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_DrainWillpowerUSV, null)
				THEN
					Subtract(_DrainWillpowerUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_HebetudinousUSV, null)
				THEN
					Subtract(_HebetudinousUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_RestedUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:RestedA)
			CharacterHasStatus(_Character, STATUS:RestedB)
			CharacterHasStatus(_Character, STATUS:RestedC)
			CharacterHasStatus(_Character, STATUS:RestedD)
			CharacterHasStatus(_Character, STATUS:RestedE)
			CharacterHasStatus(_Character, STATUS:RestedF)
			CharacterHasStatus(_Character, STATUS:RestedG)
			CharacterHasStatus(_Character, STATUS:RestedH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:RestedA)
			THEN
				Add(_RestedUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_CrippledUSV, null)
				THEN
					Subtract(_CrippledUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:RestedB)
			THEN
				Add(_RestedUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_CrippledUSV, null)
				THEN
					Subtract(_CrippledUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:RestedC)
			THEN
				Add(_RestedUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_CrippledUSV, null)
				THEN
					Subtract(_CrippledUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:RestedD)
			THEN
				Add(_RestedUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_CrippledUSV, null)
				THEN
					Subtract(_CrippledUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:RestedE)
			THEN
				Add(_RestedUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_CrippledUSV, null)
				THEN
					Subtract(_CrippledUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:RestedF)
			THEN
				Add(_RestedUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_CrippledUSV, null)
				THEN
					Subtract(_CrippledUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:RestedG)
			THEN
				Add(_RestedUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_CrippledUSV, null)
				THEN
					Subtract(_CrippledUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:RestedH)
			THEN
				Add(_RestedUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_BlindUSV, null)
				THEN
					Subtract(_BlindUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_CrippledUSV, null)
				THEN
					Subtract(_CrippledUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_SleepingUSV, null)
				THEN
					Subtract(_SleepingUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_BleedingUSV, null)
				THEN
					Subtract(_BleedingUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_StrongUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:StrongA)
			CharacterHasStatus(_Character, STATUS:StrongB)
			CharacterHasStatus(_Character, STATUS:StrongC)
			CharacterHasStatus(_Character, STATUS:StrongD)
			CharacterHasStatus(_Character, STATUS:StrongE)
			CharacterHasStatus(_Character, STATUS:StrongF)
			CharacterHasStatus(_Character, STATUS:StrongG)
			CharacterHasStatus(_Character, STATUS:StrongH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:StrongA)
			THEN
				Add(_StrongUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_WeakUSV, null)
				THEN
					Subtract(_WeakUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StrongB)
			THEN
				Add(_StrongUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_WeakUSV, null)
				THEN
					Subtract(_WeakUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StrongC)
			THEN
				Add(_StrongUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_WeakUSV, null)
				THEN
					Subtract(_WeakUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StrongD)
			THEN
				Add(_StrongUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_WeakUSV, null)
				THEN
					Subtract(_WeakUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StrongE)
			THEN
				Add(_StrongUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_WeakUSV, null)
				THEN
					Subtract(_WeakUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StrongF)
			THEN
				Add(_StrongUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_WeakUSV, null)
				THEN
					Subtract(_WeakUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StrongG)
			THEN
				Add(_StrongUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_WeakUSV, null)
				THEN
					Subtract(_WeakUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:StrongH)
			THEN
				Add(_StrongUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_WeakUSV, null)
				THEN
					Subtract(_WeakUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_AntidoteUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:AntidoteA)
			CharacterHasStatus(_Character, STATUS:AntidoteB)
			CharacterHasStatus(_Character, STATUS:AntidoteC)
			CharacterHasStatus(_Character, STATUS:AntidoteD)
			CharacterHasStatus(_Character, STATUS:AntidoteE)
			CharacterHasStatus(_Character, STATUS:AntidoteF)
			CharacterHasStatus(_Character, STATUS:AntidoteG)
			CharacterHasStatus(_Character, STATUS:AntidoteH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:AntidoteA)
			THEN
				Add(_AntidoteUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_PoisonedUSV, null)
				THEN
					Subtract(_PoisonedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AntidoteB)
			THEN
				Add(_AntidoteUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_PoisonedUSV, null)
				THEN
					Subtract(_PoisonedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AntidoteC)
			THEN
				Add(_AntidoteUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_PoisonedUSV, null)
				THEN
					Subtract(_PoisonedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AntidoteD)
			THEN
				Add(_AntidoteUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_PoisonedUSV, null)
				THEN
					Subtract(_PoisonedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AntidoteE)
			THEN
				Add(_AntidoteUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_PoisonedUSV, null)
				THEN
					Subtract(_PoisonedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AntidoteF)
			THEN
				Add(_AntidoteUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_PoisonedUSV, null)
				THEN
					Subtract(_PoisonedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AntidoteG)
			THEN
				Add(_AntidoteUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_PoisonedUSV, null)
				THEN
					Subtract(_PoisonedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:AntidoteH)
			THEN
				Add(_AntidoteUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_PoisonedUSV, null)
				THEN
					Subtract(_PoisonedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_DiseasedUSV, null)
				THEN
					Subtract(_DiseasedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_DecayingUSV, null)
				THEN
					Subtract(_DecayingUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_AtrophyUSV, null)
				THEN
					Subtract(_AtrophyUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_BolsterUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:BolsterA)
			CharacterHasStatus(_Character, STATUS:BolsterB)
			CharacterHasStatus(_Character, STATUS:BolsterC)
			CharacterHasStatus(_Character, STATUS:BolsterD)
			CharacterHasStatus(_Character, STATUS:BolsterE)
			CharacterHasStatus(_Character, STATUS:BolsterF)
			CharacterHasStatus(_Character, STATUS:BolsterG)
			CharacterHasStatus(_Character, STATUS:BolsterH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:BolsterA)
			THEN
				Add(_BolsterUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BolsterB)
			THEN
				Add(_BolsterUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BolsterC)
			THEN
				Add(_BolsterUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BolsterD)
			THEN
				Add(_BolsterUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BolsterE)
			THEN
				Add(_BolsterUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BolsterF)
			THEN
				Add(_BolsterUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BolsterG)
			THEN
				Add(_BolsterUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:BolsterH)
			THEN
				Add(_BolsterUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_StaggeredUSV, null)
				THEN
					Subtract(_StaggeredUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_FearUSV, null)
				THEN
					Subtract(_FearUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_CharmedUSV, null)
				THEN
					Subtract(_CharmedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_MadUSV, null)
				THEN
					Subtract(_MadUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_MagicShellUSV, FLOAT:900)
	THEN
		//Check if character has any existing statuses.
		IF "c1|c2|c3|c4|c5|c6|c7|c8"
			CharacterHasStatus(_Character, STATUS:MagicShellA)
			CharacterHasStatus(_Character, STATUS:MagicShellB)
			CharacterHasStatus(_Character, STATUS:MagicShellC)
			CharacterHasStatus(_Character, STATUS:MagicShellD)
			CharacterHasStatus(_Character, STATUS:MagicShellE)
			CharacterHasStatus(_Character, STATUS:MagicShellF)
			CharacterHasStatus(_Character, STATUS:MagicShellG)
			CharacterHasStatus(_Character, STATUS:MagicShellH)
		THEN
			//Figure out which one, now.
			IF "c1"
				CharacterHasStatus(_Character, STATUS:MagicShellA)
			THEN
				Add(_MagicShellUSV, FLOAT:1)
				//The below might look.. overkill and like it could be simplified a lot. It could, probably. But this saves on actions.
				IF "!c1"
					IsEqual(_SlowedUSV, null)
				THEN
					Subtract(_SlowedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_LoweredResistancesUSV, null)
				THEN
					Subtract(_LoweredResistancesUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_MutedUSV, null)
				THEN
					Subtract(_MutedUSV, FLOAT:1)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:1)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MagicShellB)
			THEN
				Add(_MagicShellUSV, FLOAT:2)
				IF "!c1"
					IsEqual(_SlowedUSV, null)
				THEN
					Subtract(_SlowedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_LoweredResistancesUSV, null)
				THEN
					Subtract(_LoweredResistancesUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_MutedUSV, null)
				THEN
					Subtract(_MutedUSV, FLOAT:2)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:2)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MagicShellC)
			THEN
				Add(_MagicShellUSV, FLOAT:3)
				IF "!c1"
					IsEqual(_SlowedUSV, null)
				THEN
					Subtract(_SlowedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_LoweredResistancesUSV, null)
				THEN
					Subtract(_LoweredResistancesUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_MutedUSV, null)
				THEN
					Subtract(_MutedUSV, FLOAT:3)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:3)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MagicShellD)
			THEN
				Add(_MagicShellUSV, FLOAT:4)
				IF "!c1"
					IsEqual(_SlowedUSV, null)
				THEN
					Subtract(_SlowedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_LoweredResistancesUSV, null)
				THEN
					Subtract(_LoweredResistancesUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_MutedUSV, null)
				THEN
					Subtract(_MutedUSV, FLOAT:4)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:4)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MagicShellE)
			THEN
				Add(_MagicShellUSV, FLOAT:5)
				IF "!c1"
					IsEqual(_SlowedUSV, null)
				THEN
					Subtract(_SlowedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_LoweredResistancesUSV, null)
				THEN
					Subtract(_LoweredResistancesUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_MutedUSV, null)
				THEN
					Subtract(_MutedUSV, FLOAT:5)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:5)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MagicShellF)
			THEN
				Add(_MagicShellUSV, FLOAT:6)
				IF "!c1"
					IsEqual(_SlowedUSV, null)
				THEN
					Subtract(_SlowedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_LoweredResistancesUSV, null)
				THEN
					Subtract(_LoweredResistancesUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_MutedUSV, null)
				THEN
					Subtract(_MutedUSV, FLOAT:6)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:6)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MagicShellG)
			THEN
				Add(_MagicShellUSV, FLOAT:7)
				IF "!c1"
					IsEqual(_SlowedUSV, null)
				THEN
					Subtract(_SlowedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_LoweredResistancesUSV, null)
				THEN
					Subtract(_LoweredResistancesUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_MutedUSV, null)
				THEN
					Subtract(_MutedUSV, FLOAT:7)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:7)
				ENDIF
			ELIF "c1"
				CharacterHasStatus(_Character, STATUS:MagicShellH)
			THEN
				Add(_MagicShellUSV, FLOAT:8)
				IF "!c1"
					IsEqual(_SlowedUSV, null)
				THEN
					Subtract(_SlowedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_ShockedUSV, null)
				THEN
					Subtract(_ShockedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_LoweredResistancesUSV, null)
				THEN
					Subtract(_LoweredResistancesUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_ChilledUSV, null)
				THEN
					Subtract(_ChilledUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_BurningUSV, null)
				THEN
					Subtract(_BurningUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_MutedUSV, null)
				THEN
					Subtract(_MutedUSV, FLOAT:8)
				ENDIF
				IF "!c1"
					IsEqual(_PetrifiedUSV, null)
				THEN
					Subtract(_PetrifiedUSV, FLOAT:8)
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//
	// Phase 4: Actually Â¬Ã¢â€žÂ¢!@#ing apply the statuses
	// Now that we have the complete USVs, we can remove/apply whatever needs to be.. removed or applied.
	//
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	IF "c1"
		IsGreaterThen(_CharmedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CharmedA)
			IsEqual(_CharmedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_CharmedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CharmedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:CharmedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CharmedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CharmedB)
			IsEqual(_CharmedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_CharmedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CharmedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:CharmedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CharmedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CharmedC)
			IsEqual(_CharmedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_CharmedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CharmedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:CharmedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CharmedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CharmedD)
			IsEqual(_CharmedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_CharmedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CharmedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:CharmedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CharmedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CharmedE)
			IsEqual(_CharmedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_CharmedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CharmedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:CharmedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CharmedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CharmedF)
			IsEqual(_CharmedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_CharmedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CharmedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:CharmedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CharmedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CharmedG)
			IsEqual(_CharmedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_CharmedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CharmedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:CharmedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CharmedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:CHARMED)
			IsLessThen(_CharmedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_CharmedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CHARMED, _Sourcee)
					GetStatusTurns(_Character, STATUS:CHARMED, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CHARMED)
		ENDIF
		IF "c1"
			IsEqual(_CharmedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, CharmedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Changed")
		ELIF "c1"
			IsEqual(_CharmedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, CharmedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Changed")
		ELIF "c1"
			IsEqual(_CharmedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, CharmedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Changed")
		ELIF "c1"
			IsEqual(_CharmedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, CharmedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Changed")
		ELIF "c1"
			IsEqual(_CharmedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, CharmedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Changed")
		ELIF "c1"
			IsEqual(_CharmedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, CharmedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Changed")
		ELIF "c1"
			IsEqual(_CharmedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, CharmedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Changed")
		ELIF "!c1"
			IsLessThen(_CharmedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, CHARMED, 1, 0, _Sourcee)
			SetTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Changed")
		ELSE
			ClearTag(_Character, "Blue_Charmed_Tag")
			CharacterEvent(_Character, "Blue_Charmed_Removed")
		ENDIF
	ENDIF
	
	IF "c1"
		IsGreaterThen(_SoulSapUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SoulSapA)
			IsEqual(_SoulSapUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_SoulSapUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SoulSapA, _Sourcee)
					GetStatusTurns(_Character, STATUS:SoulSapA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SoulSapA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SoulSapB)
			IsEqual(_SoulSapUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_SoulSapUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SoulSapB, _Sourcee)
					GetStatusTurns(_Character, STATUS:SoulSapB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SoulSapB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SoulSapC)
			IsEqual(_SoulSapUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_SoulSapUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SoulSapC, _Sourcee)
					GetStatusTurns(_Character, STATUS:SoulSapC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SoulSapC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SoulSapD)
			IsEqual(_SoulSapUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_SoulSapUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SoulSapD, _Sourcee)
					GetStatusTurns(_Character, STATUS:SoulSapD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SoulSapD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SoulSapE)
			IsEqual(_SoulSapUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_SoulSapUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SoulSapE, _Sourcee)
					GetStatusTurns(_Character, STATUS:SoulSapE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SoulSapE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SoulSapF)
			IsEqual(_SoulSapUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_SoulSapUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SoulSapF, _Sourcee)
					GetStatusTurns(_Character, STATUS:SoulSapF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SoulSapF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SoulSapG)
			IsEqual(_SoulSapUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_SoulSapUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SoulSapG, _Sourcee)
					GetStatusTurns(_Character, STATUS:SoulSapG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SoulSapG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:SoulSapH)
			IsLessThen(_SoulSapUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_SoulSapUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SoulSapH, _Sourcee)
					GetStatusTurns(_Character, STATUS:SoulSapH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SoulSapH)
		ENDIF
		IF "c1"
			IsEqual(_SoulSapUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, SoulSapA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Changed")
		ELIF "c1"
			IsEqual(_SoulSapUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, SoulSapB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Changed")
		ELIF "c1"
			IsEqual(_SoulSapUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, SoulSapC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Changed")
		ELIF "c1"
			IsEqual(_SoulSapUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, SoulSapD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Changed")
		ELIF "c1"
			IsEqual(_SoulSapUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, SoulSapE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Changed")
		ELIF "c1"
			IsEqual(_SoulSapUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, SoulSapF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Changed")
		ELIF "c1"
			IsEqual(_SoulSapUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, SoulSapG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Changed")
		ELIF "!c1"
			IsLessThen(_SoulSapUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, SoulSapH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Changed")
		ELSE
			ClearTag(_Character, "Blue_SoulSap_Tag")
			CharacterEvent(_Character, "Blue_SoulSap_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_BleedingUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BleedingA)
			IsEqual(_BleedingUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_BleedingUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BleedingA, _Sourcee)
					GetStatusTurns(_Character, STATUS:BleedingA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BleedingA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BleedingB)
			IsEqual(_BleedingUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_BleedingUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BleedingB, _Sourcee)
					GetStatusTurns(_Character, STATUS:BleedingB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BleedingB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BleedingC)
			IsEqual(_BleedingUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_BleedingUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BleedingC, _Sourcee)
					GetStatusTurns(_Character, STATUS:BleedingC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BleedingC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BleedingD)
			IsEqual(_BleedingUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_BleedingUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BleedingD, _Sourcee)
					GetStatusTurns(_Character, STATUS:BleedingD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BleedingD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BleedingE)
			IsEqual(_BleedingUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_BleedingUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BleedingE, _Sourcee)
					GetStatusTurns(_Character, STATUS:BleedingE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BleedingE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BleedingF)
			IsEqual(_BleedingUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_BleedingUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BleedingF, _Sourcee)
					GetStatusTurns(_Character, STATUS:BleedingF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BleedingF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BleedingG)
			IsEqual(_BleedingUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_BleedingUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BleedingG, _Sourcee)
					GetStatusTurns(_Character, STATUS:BleedingG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BleedingG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:BleedingH)
			IsLessThen(_BleedingUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_BleedingUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BleedingH, _Sourcee)
					GetStatusTurns(_Character, STATUS:BleedingH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BleedingH)
		ENDIF
		IF "c1"
			IsEqual(_BleedingUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, BleedingA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Changed")
		ELIF "c1"
			IsEqual(_BleedingUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, BleedingB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Changed")
		ELIF "c1"
			IsEqual(_BleedingUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, BleedingC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Changed")
		ELIF "c1"
			IsEqual(_BleedingUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, BleedingD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Changed")
		ELIF "c1"
			IsEqual(_BleedingUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, BleedingE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Changed")
		ELIF "c1"
			IsEqual(_BleedingUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, BleedingF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Changed")
		ELIF "c1"
			IsEqual(_BleedingUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, BleedingG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Changed")
		ELIF "!c1"
			IsLessThen(_BleedingUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, BleedingH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Changed")
		ELSE
			ClearTag(_Character, "Blue_Bleeding_Tag")
			CharacterEvent(_Character, "Blue_Bleeding_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_SlowedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SlowedA)
			IsEqual(_SlowedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_SlowedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SlowedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:SlowedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SlowedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SlowedB)
			IsEqual(_SlowedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_SlowedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SlowedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:SlowedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SlowedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SlowedC)
			IsEqual(_SlowedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_SlowedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SlowedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:SlowedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SlowedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SlowedD)
			IsEqual(_SlowedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_SlowedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SlowedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:SlowedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SlowedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SlowedE)
			IsEqual(_SlowedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_SlowedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SlowedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:SlowedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SlowedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SlowedF)
			IsEqual(_SlowedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_SlowedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SlowedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:SlowedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SlowedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SlowedG)
			IsEqual(_SlowedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_SlowedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SlowedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:SlowedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SlowedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:SlowedH)
			IsLessThen(_SlowedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_SlowedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SlowedH, _Sourcee)
					GetStatusTurns(_Character, STATUS:SlowedH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SlowedH)
		ENDIF
		IF "c1"
			IsEqual(_SlowedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, SlowedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Changed")
		ELIF "c1"
			IsEqual(_SlowedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, SlowedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Changed")
		ELIF "c1"
			IsEqual(_SlowedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, SlowedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Changed")
		ELIF "c1"
			IsEqual(_SlowedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, SlowedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Changed")
		ELIF "c1"
			IsEqual(_SlowedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, SlowedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Changed")
		ELIF "c1"
			IsEqual(_SlowedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, SlowedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Changed")
		ELIF "c1"
			IsEqual(_SlowedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, SlowedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Changed")
		ELIF "!c1"
			IsLessThen(_SlowedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, SlowedH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Changed")
		ELSE
			ClearTag(_Character, "Blue_Slowed_Tag")
			CharacterEvent(_Character, "Blue_Slowed_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_DiseasedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DiseasedA)
			IsEqual(_DiseasedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_DiseasedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DiseasedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:DiseasedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DiseasedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DiseasedB)
			IsEqual(_DiseasedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_DiseasedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DiseasedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:DiseasedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DiseasedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DiseasedC)
			IsEqual(_DiseasedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_DiseasedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DiseasedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:DiseasedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DiseasedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DiseasedD)
			IsEqual(_DiseasedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_DiseasedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DiseasedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:DiseasedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DiseasedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DiseasedE)
			IsEqual(_DiseasedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_DiseasedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DiseasedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:DiseasedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DiseasedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DiseasedF)
			IsEqual(_DiseasedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_DiseasedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DiseasedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:DiseasedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DiseasedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DiseasedG)
			IsEqual(_DiseasedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_DiseasedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DiseasedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:DiseasedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DiseasedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:DiseasedH)
			IsLessThen(_DiseasedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_DiseasedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DiseasedH, _Sourcee)
					GetStatusTurns(_Character, STATUS:DiseasedH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DiseasedH)
		ENDIF
		IF "c1"
			IsEqual(_DiseasedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, DiseasedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Changed")
		ELIF "c1"
			IsEqual(_DiseasedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, DiseasedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Changed")
		ELIF "c1"
			IsEqual(_DiseasedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, DiseasedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Changed")
		ELIF "c1"
			IsEqual(_DiseasedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, DiseasedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Changed")
		ELIF "c1"
			IsEqual(_DiseasedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, DiseasedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Changed")
		ELIF "c1"
			IsEqual(_DiseasedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, DiseasedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Changed")
		ELIF "c1"
			IsEqual(_DiseasedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, DiseasedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Changed")
		ELIF "!c1"
			IsLessThen(_DiseasedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, DiseasedH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Changed")
		ELSE
			ClearTag(_Character, "Blue_Diseased_Tag")
			CharacterEvent(_Character, "Blue_Diseased_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_CrippledUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CrippledA)
			IsEqual(_CrippledUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_CrippledUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CrippledA, _Sourcee)
					GetStatusTurns(_Character, STATUS:CrippledA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CrippledA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CrippledB)
			IsEqual(_CrippledUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_CrippledUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CrippledB, _Sourcee)
					GetStatusTurns(_Character, STATUS:CrippledB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CrippledB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CrippledC)
			IsEqual(_CrippledUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_CrippledUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CrippledC, _Sourcee)
					GetStatusTurns(_Character, STATUS:CrippledC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CrippledC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CrippledD)
			IsEqual(_CrippledUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_CrippledUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CrippledD, _Sourcee)
					GetStatusTurns(_Character, STATUS:CrippledD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CrippledD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CrippledE)
			IsEqual(_CrippledUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_CrippledUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CrippledE, _Sourcee)
					GetStatusTurns(_Character, STATUS:CrippledE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CrippledE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CrippledF)
			IsEqual(_CrippledUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_CrippledUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CrippledF, _Sourcee)
					GetStatusTurns(_Character, STATUS:CrippledF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CrippledF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:CrippledG)
			IsEqual(_CrippledUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_CrippledUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CrippledG, _Sourcee)
					GetStatusTurns(_Character, STATUS:CrippledG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CrippledG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:CrippledH)
			IsLessThen(_CrippledUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_CrippledUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:CrippledH, _Sourcee)
					GetStatusTurns(_Character, STATUS:CrippledH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, CrippledH)
		ENDIF
		IF "c1"
			IsEqual(_CrippledUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, CrippledA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Changed")
		ELIF "c1"
			IsEqual(_CrippledUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, CrippledB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Changed")
		ELIF "c1"
			IsEqual(_CrippledUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, CrippledC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Changed")
		ELIF "c1"
			IsEqual(_CrippledUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, CrippledD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Changed")
		ELIF "c1"
			IsEqual(_CrippledUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, CrippledE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Changed")
		ELIF "c1"
			IsEqual(_CrippledUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, CrippledF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Changed")
		ELIF "c1"
			IsEqual(_CrippledUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, CrippledG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Changed")
		ELIF "!c1"
			IsLessThen(_CrippledUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, CrippledH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Changed")
		ELSE
			ClearTag(_Character, "Blue_Crippled_Tag")
			CharacterEvent(_Character, "Blue_Crippled_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_ChilledUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ChilledA)
			IsEqual(_ChilledUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ChilledA, _Sourcee)
					GetStatusTurns(_Character, STATUS:ChilledA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ChilledA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ChilledB)
			IsEqual(_ChilledUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ChilledB, _Sourcee)
					GetStatusTurns(_Character, STATUS:ChilledB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ChilledB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ChilledC)
			IsEqual(_ChilledUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ChilledC, _Sourcee)
					GetStatusTurns(_Character, STATUS:ChilledC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ChilledC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ChilledD)
			IsEqual(_ChilledUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ChilledD, _Sourcee)
					GetStatusTurns(_Character, STATUS:ChilledD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ChilledD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ChilledE)
			IsEqual(_ChilledUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ChilledE, _Sourcee)
					GetStatusTurns(_Character, STATUS:ChilledE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ChilledE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ChilledF)
			IsEqual(_ChilledUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ChilledF, _Sourcee)
					GetStatusTurns(_Character, STATUS:ChilledF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ChilledF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ChilledG)
			IsEqual(_ChilledUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ChilledG, _Sourcee)
					GetStatusTurns(_Character, STATUS:ChilledG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ChilledG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:ChilledH)
			IsLessThen(_ChilledUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ChilledH, _Sourcee)
					GetStatusTurns(_Character, STATUS:ChilledH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ChilledH)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:FROZEN)
			IsLessThen(_ChilledUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_ChilledUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FROZEN, _Sourcee)
					GetStatusTurns(_Character, STATUS:FROZEN, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FROZEN)
		ENDIF
		IF "c1"
			IsEqual(_ChilledUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, ChilledA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELIF "c1"
			IsEqual(_ChilledUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, ChilledB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELIF "c1"
			IsEqual(_ChilledUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, ChilledC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELIF "c1"
			IsEqual(_ChilledUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, ChilledD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELIF "c1"
			IsEqual(_ChilledUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, ChilledE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELIF "c1"
			IsEqual(_ChilledUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, ChilledF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELIF "c1"
			IsEqual(_ChilledUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, ChilledG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELIF "!c1&!c2"
			IsLessThen(_ChilledUSV, FLOAT:1008)
			CharacterHasStatus(_Character, STATUS:FROZEN)
		THEN
			CharacterApplyStatus(_Character, ChilledH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELIF "!c1&c2"
			IsLessThen(_ChilledUSV, FLOAT:1008)
			CharacterHasStatus(_Character, STATUS:FROZEN)
		THEN
			CharacterApplyStatus(_Character, FROZEN, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Changed")
		ELSE
			ClearTag(_Character, "Blue_Chilled_Tag")
			CharacterEvent(_Character, "Blue_Chilled_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_WeakUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:WeakA)
			IsEqual(_WeakUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_WeakUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:WeakA, _Sourcee)
					GetStatusTurns(_Character, STATUS:WeakA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, WeakA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:WeakB)
			IsEqual(_WeakUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_WeakUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:WeakB, _Sourcee)
					GetStatusTurns(_Character, STATUS:WeakB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, WeakB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:WeakC)
			IsEqual(_WeakUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_WeakUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:WeakC, _Sourcee)
					GetStatusTurns(_Character, STATUS:WeakC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, WeakC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:WeakD)
			IsEqual(_WeakUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_WeakUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:WeakD, _Sourcee)
					GetStatusTurns(_Character, STATUS:WeakD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, WeakD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:WeakE)
			IsEqual(_WeakUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_WeakUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:WeakE, _Sourcee)
					GetStatusTurns(_Character, STATUS:WeakE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, WeakE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:WeakF)
			IsEqual(_WeakUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_WeakUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:WeakF, _Sourcee)
					GetStatusTurns(_Character, STATUS:WeakF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, WeakF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:WeakG)
			IsEqual(_WeakUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_WeakUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:WeakG, _Sourcee)
					GetStatusTurns(_Character, STATUS:WeakG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, WeakG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:WeakH)
			IsLessThen(_WeakUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_WeakUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:WeakH, _Sourcee)
					GetStatusTurns(_Character, STATUS:WeakH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, WeakH)
		ENDIF
		IF "c1"
			IsEqual(_WeakUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, WeakA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Changed")
		ELIF "c1"
			IsEqual(_WeakUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, WeakB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Changed")
		ELIF "c1"
			IsEqual(_WeakUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, WeakC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Changed")
		ELIF "c1"
			IsEqual(_WeakUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, WeakD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Changed")
		ELIF "c1"
			IsEqual(_WeakUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, WeakE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Changed")
		ELIF "c1"
			IsEqual(_WeakUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, WeakF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Changed")
		ELIF "c1"
			IsEqual(_WeakUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, WeakG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Changed")
		ELIF "!c1"
			IsLessThen(_WeakUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, WeakH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Changed")
		ELSE
			ClearTag(_Character, "Blue_Weak_Tag")
			CharacterEvent(_Character, "Blue_Weak_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_DecayingUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DecayingA)
			IsEqual(_DecayingUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_DecayingUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DecayingA, _Sourcee)
					GetStatusTurns(_Character, STATUS:DecayingA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DecayingA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DecayingB)
			IsEqual(_DecayingUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_DecayingUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DecayingB, _Sourcee)
					GetStatusTurns(_Character, STATUS:DecayingB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DecayingB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DecayingC)
			IsEqual(_DecayingUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_DecayingUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DecayingC, _Sourcee)
					GetStatusTurns(_Character, STATUS:DecayingC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DecayingC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DecayingD)
			IsEqual(_DecayingUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_DecayingUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DecayingD, _Sourcee)
					GetStatusTurns(_Character, STATUS:DecayingD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DecayingD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DecayingE)
			IsEqual(_DecayingUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_DecayingUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DecayingE, _Sourcee)
					GetStatusTurns(_Character, STATUS:DecayingE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DecayingE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DecayingF)
			IsEqual(_DecayingUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_DecayingUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DecayingF, _Sourcee)
					GetStatusTurns(_Character, STATUS:DecayingF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DecayingF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DecayingG)
			IsEqual(_DecayingUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_DecayingUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DecayingG, _Sourcee)
					GetStatusTurns(_Character, STATUS:DecayingG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DecayingG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:DecayingH)
			IsLessThen(_DecayingUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_DecayingUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DecayingH, _Sourcee)
					GetStatusTurns(_Character, STATUS:DecayingH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DecayingH)
		ENDIF
		IF "c1"
			IsEqual(_DecayingUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, DecayingA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Changed")
		ELIF "c1"
			IsEqual(_DecayingUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, DecayingB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Changed")
		ELIF "c1"
			IsEqual(_DecayingUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, DecayingC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Changed")
		ELIF "c1"
			IsEqual(_DecayingUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, DecayingD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Changed")
		ELIF "c1"
			IsEqual(_DecayingUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, DecayingE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Changed")
		ELIF "c1"
			IsEqual(_DecayingUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, DecayingF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Changed")
		ELIF "c1"
			IsEqual(_DecayingUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, DecayingG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Changed")
		ELIF "!c1"
			IsLessThen(_DecayingUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, DecayingH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Changed")
		ELSE
			ClearTag(_Character, "Blue_Decaying_Tag")
			CharacterEvent(_Character, "Blue_Decaying_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_AcidUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AcidA)
			IsEqual(_AcidUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_AcidUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AcidA, _Sourcee)
					GetStatusTurns(_Character, STATUS:AcidA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AcidA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AcidB)
			IsEqual(_AcidUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_AcidUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AcidB, _Sourcee)
					GetStatusTurns(_Character, STATUS:AcidB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AcidB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AcidC)
			IsEqual(_AcidUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_AcidUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AcidC, _Sourcee)
					GetStatusTurns(_Character, STATUS:AcidC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AcidC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AcidD)
			IsEqual(_AcidUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_AcidUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AcidD, _Sourcee)
					GetStatusTurns(_Character, STATUS:AcidD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AcidD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AcidE)
			IsEqual(_AcidUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_AcidUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AcidE, _Sourcee)
					GetStatusTurns(_Character, STATUS:AcidE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AcidE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AcidF)
			IsEqual(_AcidUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_AcidUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AcidF, _Sourcee)
					GetStatusTurns(_Character, STATUS:AcidF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AcidF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AcidG)
			IsEqual(_AcidUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_AcidUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AcidG, _Sourcee)
					GetStatusTurns(_Character, STATUS:AcidG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AcidG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:AcidH)
			IsLessThen(_AcidUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_AcidUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AcidH, _Sourcee)
					GetStatusTurns(_Character, STATUS:AcidH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AcidH)
		ENDIF
		IF "c1"
			IsEqual(_AcidUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, AcidA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Changed")
		ELIF "c1"
			IsEqual(_AcidUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, AcidB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Changed")
		ELIF "c1"
			IsEqual(_AcidUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, AcidC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Changed")
		ELIF "c1"
			IsEqual(_AcidUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, AcidD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Changed")
		ELIF "c1"
			IsEqual(_AcidUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, AcidE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Changed")
		ELIF "c1"
			IsEqual(_AcidUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, AcidF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Changed")
		ELIF "c1"
			IsEqual(_AcidUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, AcidG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Changed")
		ELIF "!c1"
			IsLessThen(_AcidUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, AcidH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Changed")
		ELSE
			ClearTag(_Character, "Blue_Acid_Tag")
			CharacterEvent(_Character, "Blue_Acid_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_AtrophyUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AtrophyA)
			IsEqual(_AtrophyUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_AtrophyUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AtrophyA, _Sourcee)
					GetStatusTurns(_Character, STATUS:AtrophyA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AtrophyA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AtrophyB)
			IsEqual(_AtrophyUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_AtrophyUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AtrophyB, _Sourcee)
					GetStatusTurns(_Character, STATUS:AtrophyB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AtrophyB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AtrophyC)
			IsEqual(_AtrophyUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_AtrophyUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AtrophyC, _Sourcee)
					GetStatusTurns(_Character, STATUS:AtrophyC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AtrophyC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AtrophyD)
			IsEqual(_AtrophyUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_AtrophyUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AtrophyD, _Sourcee)
					GetStatusTurns(_Character, STATUS:AtrophyD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AtrophyD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AtrophyE)
			IsEqual(_AtrophyUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_AtrophyUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AtrophyE, _Sourcee)
					GetStatusTurns(_Character, STATUS:AtrophyE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AtrophyE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AtrophyF)
			IsEqual(_AtrophyUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_AtrophyUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AtrophyF, _Sourcee)
					GetStatusTurns(_Character, STATUS:AtrophyF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AtrophyF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AtrophyG)
			IsEqual(_AtrophyUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_AtrophyUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AtrophyG, _Sourcee)
					GetStatusTurns(_Character, STATUS:AtrophyG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AtrophyG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:AtrophyH)
			IsLessThen(_AtrophyUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_AtrophyUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AtrophyH, _Sourcee)
					GetStatusTurns(_Character, STATUS:AtrophyH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AtrophyH)
		ENDIF
		IF "c1"
			IsEqual(_AtrophyUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, AtrophyA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Changed")
		ELIF "c1"
			IsEqual(_AtrophyUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, AtrophyB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Changed")
		ELIF "c1"
			IsEqual(_AtrophyUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, AtrophyC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Changed")
		ELIF "c1"
			IsEqual(_AtrophyUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, AtrophyD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Changed")
		ELIF "c1"
			IsEqual(_AtrophyUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, AtrophyE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Changed")
		ELIF "c1"
			IsEqual(_AtrophyUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, AtrophyF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Changed")
		ELIF "c1"
			IsEqual(_AtrophyUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, AtrophyG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Changed")
		ELIF "!c1"
			IsLessThen(_AtrophyUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, AtrophyH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Changed")
		ELSE
			ClearTag(_Character, "Blue_Atrophy_Tag")
			CharacterEvent(_Character, "Blue_Atrophy_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_BlindUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BlindA)
			IsEqual(_BlindUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_BlindUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BlindA, _Sourcee)
					GetStatusTurns(_Character, STATUS:BlindA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BlindA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BlindB)
			IsEqual(_BlindUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_BlindUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BlindB, _Sourcee)
					GetStatusTurns(_Character, STATUS:BlindB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BlindB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BlindC)
			IsEqual(_BlindUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_BlindUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BlindC, _Sourcee)
					GetStatusTurns(_Character, STATUS:BlindC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BlindC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BlindD)
			IsEqual(_BlindUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_BlindUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BlindD, _Sourcee)
					GetStatusTurns(_Character, STATUS:BlindD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BlindD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BlindE)
			IsEqual(_BlindUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_BlindUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BlindE, _Sourcee)
					GetStatusTurns(_Character, STATUS:BlindE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BlindE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BlindF)
			IsEqual(_BlindUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_BlindUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BlindF, _Sourcee)
					GetStatusTurns(_Character, STATUS:BlindF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BlindF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BlindG)
			IsEqual(_BlindUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_BlindUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BlindG, _Sourcee)
					GetStatusTurns(_Character, STATUS:BlindG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BlindG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:BlindH)
			IsLessThen(_BlindUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_BlindUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BlindH, _Sourcee)
					GetStatusTurns(_Character, STATUS:BlindH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BlindH)
		ENDIF
		IF "c1"
			IsEqual(_BlindUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, BlindA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Changed")
		ELIF "c1"
			IsEqual(_BlindUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, BlindB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Changed")
		ELIF "c1"
			IsEqual(_BlindUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, BlindC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Changed")
		ELIF "c1"
			IsEqual(_BlindUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, BlindD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Changed")
		ELIF "c1"
			IsEqual(_BlindUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, BlindE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Changed")
		ELIF "c1"
			IsEqual(_BlindUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, BlindF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Changed")
		ELIF "c1"
			IsEqual(_BlindUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, BlindG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Changed")
		ELIF "!c1"
			IsLessThen(_BlindUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, BlindH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Changed")
		ELSE
			ClearTag(_Character, "Blue_Blind_Tag")
			CharacterEvent(_Character, "Blue_Blind_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_FearUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FearA)
			IsEqual(_FearUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_FearUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FearA, _Sourcee)
					GetStatusTurns(_Character, STATUS:FearA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FearA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FearB)
			IsEqual(_FearUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_FearUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FearB, _Sourcee)
					GetStatusTurns(_Character, STATUS:FearB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FearB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FearC)
			IsEqual(_FearUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_FearUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FearC, _Sourcee)
					GetStatusTurns(_Character, STATUS:FearC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FearC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FearD)
			IsEqual(_FearUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_FearUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FearD, _Sourcee)
					GetStatusTurns(_Character, STATUS:FearD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FearD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FearE)
			IsEqual(_FearUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_FearUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FearE, _Sourcee)
					GetStatusTurns(_Character, STATUS:FearE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FearE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FearF)
			IsEqual(_FearUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_FearUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FearF, _Sourcee)
					GetStatusTurns(_Character, STATUS:FearF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FearF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FearG)
			IsEqual(_FearUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_FearUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FearG, _Sourcee)
					GetStatusTurns(_Character, STATUS:FearG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FearG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:FearH)
			IsLessThen(_FearUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_FearUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FearH, _Sourcee)
					GetStatusTurns(_Character, STATUS:FearH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FearH)
		ENDIF
		IF "c1"
			IsEqual(_FearUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, FearA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Changed")
		ELIF "c1"
			IsEqual(_FearUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, FearB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Changed")
		ELIF "c1"
			IsEqual(_FearUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, FearC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Changed")
		ELIF "c1"
			IsEqual(_FearUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, FearD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Changed")
		ELIF "c1"
			IsEqual(_FearUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, FearE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Changed")
		ELIF "c1"
			IsEqual(_FearUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, FearF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Changed")
		ELIF "c1"
			IsEqual(_FearUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, FearG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Changed")
		ELIF "!c1"
			IsLessThen(_FearUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, FearH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Changed")
		ELSE
			ClearTag(_Character, "Blue_Fear_Tag")
			CharacterEvent(_Character, "Blue_Fear_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_StaggeredUSV, FLOAT:900)
	THEN
		//Staggered only lasts for ONE turn.
		Set(_Turns, INT:1)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StaggeredA)
			IsEqual(_StaggeredUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_StaggeredUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StaggeredA, _Sourcee)
					GetStatusTurns(_Character, STATUS:StaggeredA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StaggeredA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StaggeredB)
			IsEqual(_StaggeredUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_StaggeredUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StaggeredB, _Sourcee)
					GetStatusTurns(_Character, STATUS:StaggeredB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StaggeredB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StaggeredC)
			IsEqual(_StaggeredUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_StaggeredUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StaggeredC, _Sourcee)
					GetStatusTurns(_Character, STATUS:StaggeredC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StaggeredC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StaggeredD)
			IsEqual(_StaggeredUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_StaggeredUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StaggeredD, _Sourcee)
					GetStatusTurns(_Character, STATUS:StaggeredD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StaggeredD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StaggeredE)
			IsEqual(_StaggeredUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_StaggeredUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StaggeredE, _Sourcee)
					GetStatusTurns(_Character, STATUS:StaggeredE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StaggeredE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StaggeredF)
			IsEqual(_StaggeredUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_StaggeredUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StaggeredF, _Sourcee)
					GetStatusTurns(_Character, STATUS:StaggeredF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StaggeredF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StaggeredG)
			IsEqual(_StaggeredUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_StaggeredUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StaggeredG, _Sourcee)
					GetStatusTurns(_Character, STATUS:StaggeredG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StaggeredG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:KNOCKED_DOWN)
			IsLessThen(_StaggeredUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_StaggeredUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:KNOCKED_DOWN, _Sourcee)
					GetStatusTurns(_Character, STATUS:KNOCKED_DOWN, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, KNOCKED_DOWN)
		ENDIF
		IF "c1"
			IsEqual(_StaggeredUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, StaggeredA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Changed")
		ELIF "c1"
			IsEqual(_StaggeredUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, StaggeredB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Changed")
		ELIF "c1"
			IsEqual(_StaggeredUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, StaggeredC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Changed")
		ELIF "c1"
			IsEqual(_StaggeredUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, StaggeredD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Changed")
		ELIF "c1"
			IsEqual(_StaggeredUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, StaggeredE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Changed")
		ELIF "c1"
			IsEqual(_StaggeredUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, StaggeredF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Changed")
		ELIF "c1"
			IsEqual(_StaggeredUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, StaggeredG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Changed")
		ELIF "!c1"
			IsLessThen(_StaggeredUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, KNOCKED_DOWN, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Changed")
		ELSE
			ClearTag(_Character, "Blue_Staggered_Tag")
			CharacterEvent(_Character, "Blue_Staggered_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_MutedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MutedA)
			IsEqual(_MutedUSV, FLOAT:1001)
		THEN
			IF "c1|c2"
				IsLessThen(_MutedUSV, FLOAT:1001)
				CharacterHasStatus(_Character, STATUS:Blue_MutedKeepDur)
			THEN
				ListAdd(_RemoveList, STATUS:Blue_MutedKeepDur)
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MutedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:MutedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MutedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MutedB)
			IsEqual(_MutedUSV, FLOAT:1002)
		THEN
			IF "c1|c2"
				IsLessThen(_MutedUSV, FLOAT:1002)
				CharacterHasStatus(_Character, STATUS:Blue_MutedKeepDur)
			THEN
				ListAdd(_RemoveList, STATUS:Blue_MutedKeepDur)
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MutedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:MutedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MutedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MutedC)
			IsEqual(_MutedUSV, FLOAT:1003)
		THEN
			IF "c1|c2"
				IsLessThen(_MutedUSV, FLOAT:1003)
				CharacterHasStatus(_Character, STATUS:Blue_MutedKeepDur)
			THEN
				ListAdd(_RemoveList, STATUS:Blue_MutedKeepDur)
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MutedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:MutedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MutedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MutedD)
			IsEqual(_MutedUSV, FLOAT:1004)
		THEN
			IF "c1|c2"
				IsLessThen(_MutedUSV, FLOAT:1004)
				CharacterHasStatus(_Character, STATUS:Blue_MutedKeepDur)
			THEN
				ListAdd(_RemoveList, STATUS:Blue_MutedKeepDur)
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MutedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:MutedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MutedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MutedE)
			IsEqual(_MutedUSV, FLOAT:1005)
		THEN
			IF "c1|c2"
				IsLessThen(_MutedUSV, FLOAT:1005)
				CharacterHasStatus(_Character, STATUS:Blue_MutedKeepDur)
			THEN
				ListAdd(_RemoveList, STATUS:Blue_MutedKeepDur)
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MutedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:MutedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MutedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MutedF)
			IsEqual(_MutedUSV, FLOAT:1006)
		THEN
			IF "c1|c2"
				IsLessThen(_MutedUSV, FLOAT:1006)
				CharacterHasStatus(_Character, STATUS:Blue_MutedKeepDur)
			THEN
				ListAdd(_RemoveList, STATUS:Blue_MutedKeepDur)
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MutedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:MutedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MutedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MutedG)
			IsEqual(_MutedUSV, FLOAT:1007)
		THEN
			IF "c1|c2"
				IsLessThen(_MutedUSV, FLOAT:1007)
				CharacterHasStatus(_Character, STATUS:Blue_MutedKeepDur)
			THEN
				ListAdd(_RemoveList, STATUS:Blue_MutedKeepDur)
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MutedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:MutedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MutedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:MutedH)
			IsLessThen(_MutedUSV, FLOAT:1008)
		THEN
			IF "c1|c2"
				IsLessThen(_MutedUSV, FLOAT:1008)
				CharacterHasStatus(_Character, STATUS:Blue_MutedKeepDur)
			THEN
				ListAdd(_RemoveList, STATUS:Blue_MutedKeepDur)
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MutedH, _Sourcee)
					GetStatusTurns(_Character, STATUS:MutedH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MutedH)
		ENDIF
		IF "c1"
			IsEqual(_MutedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, MutedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Changed")
		ELIF "c1"
			IsEqual(_MutedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, MutedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Changed")
		ELIF "c1"
			IsEqual(_MutedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, MutedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Changed")
		ELIF "c1"
			IsEqual(_MutedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, MutedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Changed")
		ELIF "c1"
			IsEqual(_MutedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, MutedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Changed")
		ELIF "c1"
			IsEqual(_MutedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, MutedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Changed")
		ELIF "c1"
			IsEqual(_MutedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, MutedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Changed")
		ELIF "!c1"
			IsLessThen(_MutedUSV, FLOAT:1008)
		THEN
			//CharacterApplyStatus(_Character, MutedH, _Turns, 0, _Sourcee)
			CharacterApplyStatus(_Character, MutedH, -2, 0, _Sourcee)
			SetTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Changed")
		ELSE
			ClearTag(_Character, "Blue_Muted_Tag")
			CharacterEvent(_Character, "Blue_Muted_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_BurningUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BurningA)
			IsEqual(_BurningUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_BurningUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BurningA, _Sourcee)
					GetStatusTurns(_Character, STATUS:BurningA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BurningA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BurningB)
			IsEqual(_BurningUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_BurningUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BurningB, _Sourcee)
					GetStatusTurns(_Character, STATUS:BurningB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BurningB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BurningC)
			IsEqual(_BurningUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_BurningUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BurningC, _Sourcee)
					GetStatusTurns(_Character, STATUS:BurningC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BurningC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BurningD)
			IsEqual(_BurningUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_BurningUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BurningD, _Sourcee)
					GetStatusTurns(_Character, STATUS:BurningD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BurningD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BurningE)
			IsEqual(_BurningUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_BurningUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BurningE, _Sourcee)
					GetStatusTurns(_Character, STATUS:BurningE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BurningE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BurningF)
			IsEqual(_BurningUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_BurningUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BurningF, _Sourcee)
					GetStatusTurns(_Character, STATUS:BurningF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BurningF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BurningG)
			IsEqual(_BurningUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_BurningUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BurningG, _Sourcee)
					GetStatusTurns(_Character, STATUS:BurningG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BurningG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:BurningH)
			IsLessThen(_BurningUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_BurningUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BurningH, _Sourcee)
					GetStatusTurns(_Character, STATUS:BurningH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BurningH)
		ENDIF
		IF "c1"
			IsEqual(_BurningUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, BurningA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Burning_Tag")
			CharacterEvent(_Character, "Blue_Burning_Changed")
		ELIF "c1"
			IsEqual(_BurningUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, BurningB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Burning_Tag")
			CharacterEvent(_Character, "Blue_Burning_Changed")
		ELIF "c1"
			IsEqual(_BurningUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, BurningC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Burning_Tag")
			CharacterEvent(_Character, "Blue_Burning_Changed")
		ELIF "c1"
			IsEqual(_BurningUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, BurningD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Burning_Tag")
			CharacterEvent(_Character, "Blue_Burning_Changed")
		ELIF "c1"
			IsEqual(_BurningUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, BurningE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Burning_Tag")
			CharacterEvent(_Character, "Blue_Burning_Changed")
		ELIF "c1"
			IsEqual(_BurningUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, BurningF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Burning_Tag")
			CharacterEvent(_Character, "Blue_Burning_Changed")
		ELIF "c1"
			IsEqual(_BurningUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, BurningG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Burning_Tag")
			CharacterEvent(_Character, "Blue_Burning_Changed")
		ELIF "!c1"
			IsLessThen(_BurningUSV, FLOAT:1008)
		THEN
			IF "c1&c2"
				CharacterHasTalent(_Sourcee, Perfectionist)
				CharacterHasStatus(_Character, BurningH)
			THEN
				IF "c1|c2|c3|c4|c5|c6|c7|c8|c9"
					CharacterHasStatus(_Character, ApplyBurningA)
					CharacterHasStatus(_Character, ApplyBurningB)
					CharacterHasStatus(_Character, ApplyBurningC)
					CharacterHasStatus(_Character, ApplyBurningD)
					CharacterHasStatus(_Character, ApplyBurningE)
					CharacterHasStatus(_Character, ApplyBurningF)
					CharacterHasStatus(_Character, ApplyBurningG)
					CharacterHasStatus(_Character, ApplyBurningH)
					CharacterHasStatus(_Character, ApplyBurningO)
				THEN
					CharacterApplyStatus(_Character, NECROFIRE, 3, 0, _Sourcee)
					SetTag(_Character, "Blue_Burning_Tag")
					CharacterEvent(_Character, "Blue_Burning_Changed")
				ELSE
					CharacterApplyStatus(_Character, BurningH, _Turns, 0, _Sourcee)
					SetTag(_Character, "Blue_Burning_Tag")
					CharacterEvent(_Character, "Blue_Burning_Changed")
				ENDIF
			ELSE
				CharacterApplyStatus(_Character, BurningH, _Turns, 0, _Sourcee)
				SetTag(_Character, "Blue_Burning_Tag")
				CharacterEvent(_Character, "Blue_Burning_Changed")
			ENDIF
		ELSE
			ClearTag(_Character, "Blue_Burning_Tag")
			CharacterEvent(_Character, "Blue_Burning_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_PoisonedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PoisonedA)
			IsEqual(_PoisonedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_PoisonedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PoisonedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:PoisonedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PoisonedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PoisonedB)
			IsEqual(_PoisonedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_PoisonedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PoisonedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:PoisonedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PoisonedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PoisonedC)
			IsEqual(_PoisonedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_PoisonedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PoisonedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:PoisonedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PoisonedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PoisonedD)
			IsEqual(_PoisonedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_PoisonedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PoisonedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:PoisonedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PoisonedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PoisonedE)
			IsEqual(_PoisonedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_PoisonedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PoisonedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:PoisonedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PoisonedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PoisonedF)
			IsEqual(_PoisonedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_PoisonedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PoisonedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:PoisonedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PoisonedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PoisonedG)
			IsEqual(_PoisonedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_PoisonedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PoisonedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:PoisonedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PoisonedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:PoisonedH)
			IsLessThen(_PoisonedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_PoisonedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PoisonedH, _Sourcee)
					GetStatusTurns(_Character, STATUS:PoisonedH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PoisonedH)
		ENDIF
		IF "c1"
			IsEqual(_PoisonedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, PoisonedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Changed")
		ELIF "c1"
			IsEqual(_PoisonedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, PoisonedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Changed")
		ELIF "c1"
			IsEqual(_PoisonedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, PoisonedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Changed")
		ELIF "c1"
			IsEqual(_PoisonedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, PoisonedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Changed")
		ELIF "c1"
			IsEqual(_PoisonedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, PoisonedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Changed")
		ELIF "c1"
			IsEqual(_PoisonedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, PoisonedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Changed")
		ELIF "c1"
			IsEqual(_PoisonedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, PoisonedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Changed")
		ELIF "!c1"
			IsLessThen(_PoisonedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, PoisonedH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Changed")
		ELSE
			ClearTag(_Character, "Blue_Poisoned_Tag")
			CharacterEvent(_Character, "Blue_Poisoned_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_PetrifiedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PetrifiedA)
			IsEqual(_PetrifiedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_PetrifiedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PetrifiedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:PetrifiedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PetrifiedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PetrifiedB)
			IsEqual(_PetrifiedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_PetrifiedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PetrifiedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:PetrifiedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PetrifiedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PetrifiedC)
			IsEqual(_PetrifiedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_PetrifiedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PetrifiedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:PetrifiedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PetrifiedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PetrifiedD)
			IsEqual(_PetrifiedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_PetrifiedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PetrifiedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:PetrifiedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PetrifiedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PetrifiedE)
			IsEqual(_PetrifiedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_PetrifiedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PetrifiedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:PetrifiedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PetrifiedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PetrifiedF)
			IsEqual(_PetrifiedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_PetrifiedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PetrifiedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:PetrifiedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PetrifiedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:PetrifiedG)
			IsEqual(_PetrifiedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_PetrifiedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PetrifiedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:PetrifiedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PetrifiedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:PETRIFIED)
			IsLessThen(_PetrifiedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_PetrifiedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:PETRIFIED, _Sourcee)
					GetStatusTurns(_Character, STATUS:PETRIFIED, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, PETRIFIED)
		ENDIF
		IF "c1"
			IsEqual(_PetrifiedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, PetrifiedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Changed")
		ELIF "c1"
			IsEqual(_PetrifiedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, PetrifiedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Changed")
		ELIF "c1"
			IsEqual(_PetrifiedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, PetrifiedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Changed")
		ELIF "c1"
			IsEqual(_PetrifiedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, PetrifiedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Changed")
		ELIF "c1"
			IsEqual(_PetrifiedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, PetrifiedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Changed")
		ELIF "c1"
			IsEqual(_PetrifiedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, PetrifiedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Changed")
		ELIF "c1"
			IsEqual(_PetrifiedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, PetrifiedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Changed")
		ELIF "!c1"
			IsLessThen(_PetrifiedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, PETRIFIED, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Changed")
		ELSE
			ClearTag(_Character, "Blue_Petrified_Tag")
			CharacterEvent(_Character, "Blue_Petrified_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_ShockedUSV, FLOAT:900)
	THEN
		//Shocked only lasts for ONE turn.
		Set(_Turns, INT:1)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ShockedA)
			IsEqual(_ShockedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_ShockedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ShockedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:ShockedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ShockedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ShockedB)
			IsEqual(_ShockedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_ShockedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ShockedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:ShockedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ShockedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ShockedC)
			IsEqual(_ShockedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_ShockedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ShockedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:ShockedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ShockedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ShockedD)
			IsEqual(_ShockedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_ShockedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ShockedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:ShockedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ShockedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ShockedE)
			IsEqual(_ShockedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_ShockedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ShockedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:ShockedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ShockedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ShockedF)
			IsEqual(_ShockedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_ShockedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ShockedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:ShockedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ShockedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ShockedG)
			IsEqual(_ShockedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_ShockedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ShockedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:ShockedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ShockedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:STUNNED)
			IsLessThen(_ShockedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_ShockedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:STUNNED, _Sourcee)
					GetStatusTurns(_Character, STATUS:STUNNED, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, STUNNED)
		ENDIF
		IF "c1"
			IsEqual(_ShockedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, ShockedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Changed")
		ELIF "c1"
			IsEqual(_ShockedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, ShockedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Changed")
		ELIF "c1"
			IsEqual(_ShockedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, ShockedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Changed")
		ELIF "c1"
			IsEqual(_ShockedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, ShockedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Changed")
		ELIF "c1"
			IsEqual(_ShockedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, ShockedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Changed")
		ELIF "c1"
			IsEqual(_ShockedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, ShockedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Changed")
		ELIF "c1"
			IsEqual(_ShockedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, ShockedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Changed")
		ELIF "!c1"
			IsLessThen(_ShockedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, STUNNED, 1, 0, _Sourcee)
			SetTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Changed")
		ELSE
			ClearTag(_Character, "Blue_Shocked_Tag")
			CharacterEvent(_Character, "Blue_Shocked_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_SleepingUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SleepingA)
			IsEqual(_SleepingUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_SleepingUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SleepingA, _Sourcee)
					GetStatusTurns(_Character, STATUS:SleepingA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SleepingA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SleepingB)
			IsEqual(_SleepingUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_SleepingUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SleepingB, _Sourcee)
					GetStatusTurns(_Character, STATUS:SleepingB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SleepingB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SleepingC)
			IsEqual(_SleepingUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_SleepingUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SleepingC, _Sourcee)
					GetStatusTurns(_Character, STATUS:SleepingC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SleepingC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SleepingD)
			IsEqual(_SleepingUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_SleepingUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SleepingD, _Sourcee)
					GetStatusTurns(_Character, STATUS:SleepingD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SleepingD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SleepingE)
			IsEqual(_SleepingUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_SleepingUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SleepingE, _Sourcee)
					GetStatusTurns(_Character, STATUS:SleepingE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SleepingE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SleepingF)
			IsEqual(_SleepingUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_SleepingUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SleepingF, _Sourcee)
					GetStatusTurns(_Character, STATUS:SleepingF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SleepingF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SleepingG)
			IsEqual(_SleepingUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_SleepingUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SleepingG, _Sourcee)
					GetStatusTurns(_Character, STATUS:SleepingG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SleepingG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:SleepingH)
			IsLessThen(_SleepingUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_SleepingUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SleepingH, _Sourcee)
					GetStatusTurns(_Character, STATUS:SleepingH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SleepingH)
		ENDIF
		IF "c1"
			IsEqual(_SleepingUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, SleepingA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Changed")
		ELIF "c1"
			IsEqual(_SleepingUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, SleepingB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Changed")
		ELIF "c1"
			IsEqual(_SleepingUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, SleepingC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Changed")
		ELIF "c1"
			IsEqual(_SleepingUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, SleepingD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Changed")
		ELIF "c1"
			IsEqual(_SleepingUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, SleepingE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Changed")
		ELIF "c1"
			IsEqual(_SleepingUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, SleepingF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Changed")
		ELIF "c1"
			IsEqual(_SleepingUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, SleepingG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Changed")
		ELIF "!c1"
			IsLessThen(_SleepingUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, SleepingH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Changed")
		ELSE
			ClearTag(_Character, "Blue_Sleeping_Tag")
			CharacterEvent(_Character, "Blue_Sleeping_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_LoweredResistancesUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesA)
			IsEqual(_LoweredResistancesUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_LoweredResistancesUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:LoweredResistancesA, _Sourcee)
					GetStatusTurns(_Character, STATUS:LoweredResistancesA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, LoweredResistancesA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesB)
			IsEqual(_LoweredResistancesUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_LoweredResistancesUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:LoweredResistancesB, _Sourcee)
					GetStatusTurns(_Character, STATUS:LoweredResistancesB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, LoweredResistancesB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesC)
			IsEqual(_LoweredResistancesUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_LoweredResistancesUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:LoweredResistancesC, _Sourcee)
					GetStatusTurns(_Character, STATUS:LoweredResistancesC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, LoweredResistancesC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesD)
			IsEqual(_LoweredResistancesUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_LoweredResistancesUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:LoweredResistancesD, _Sourcee)
					GetStatusTurns(_Character, STATUS:LoweredResistancesD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, LoweredResistancesD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesE)
			IsEqual(_LoweredResistancesUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_LoweredResistancesUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:LoweredResistancesE, _Sourcee)
					GetStatusTurns(_Character, STATUS:LoweredResistancesE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, LoweredResistancesE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesF)
			IsEqual(_LoweredResistancesUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_LoweredResistancesUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:LoweredResistancesF, _Sourcee)
					GetStatusTurns(_Character, STATUS:LoweredResistancesF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, LoweredResistancesF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesG)
			IsEqual(_LoweredResistancesUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_LoweredResistancesUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:LoweredResistancesG, _Sourcee)
					GetStatusTurns(_Character, STATUS:LoweredResistancesG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, LoweredResistancesG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:LoweredResistancesH)
			IsLessThen(_LoweredResistancesUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_LoweredResistancesUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:LoweredResistancesH, _Sourcee)
					GetStatusTurns(_Character, STATUS:LoweredResistancesH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, LoweredResistancesH)
		ENDIF
		IF "c1"
			IsEqual(_LoweredResistancesUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, LoweredResistancesA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Changed")
		ELIF "c1"
			IsEqual(_LoweredResistancesUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, LoweredResistancesB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Changed")
		ELIF "c1"
			IsEqual(_LoweredResistancesUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, LoweredResistancesC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Changed")
		ELIF "c1"
			IsEqual(_LoweredResistancesUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, LoweredResistancesD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Changed")
		ELIF "c1"
			IsEqual(_LoweredResistancesUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, LoweredResistancesE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Changed")
		ELIF "c1"
			IsEqual(_LoweredResistancesUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, LoweredResistancesF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Changed")
		ELIF "c1"
			IsEqual(_LoweredResistancesUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, LoweredResistancesG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Changed")
		ELIF "!c1"
			IsLessThen(_LoweredResistancesUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, LoweredResistancesH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Changed")
		ELSE
			ClearTag(_Character, "Blue_LoweredResistances_Tag")
			CharacterEvent(_Character, "Blue_LoweredResistances_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_DrainWillpowerUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerA)
			IsEqual(_DrainWillpowerUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_DrainWillpowerUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DrainWillpowerA, _Sourcee)
					GetStatusTurns(_Character, STATUS:DrainWillpowerA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DrainWillpowerA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerB)
			IsEqual(_DrainWillpowerUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_DrainWillpowerUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DrainWillpowerB, _Sourcee)
					GetStatusTurns(_Character, STATUS:DrainWillpowerB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DrainWillpowerB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerC)
			IsEqual(_DrainWillpowerUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_DrainWillpowerUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DrainWillpowerC, _Sourcee)
					GetStatusTurns(_Character, STATUS:DrainWillpowerC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DrainWillpowerC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerD)
			IsEqual(_DrainWillpowerUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_DrainWillpowerUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DrainWillpowerD, _Sourcee)
					GetStatusTurns(_Character, STATUS:DrainWillpowerD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DrainWillpowerD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerE)
			IsEqual(_DrainWillpowerUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_DrainWillpowerUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DrainWillpowerE, _Sourcee)
					GetStatusTurns(_Character, STATUS:DrainWillpowerE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DrainWillpowerE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerF)
			IsEqual(_DrainWillpowerUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_DrainWillpowerUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DrainWillpowerF, _Sourcee)
					GetStatusTurns(_Character, STATUS:DrainWillpowerF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DrainWillpowerF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerG)
			IsEqual(_DrainWillpowerUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_DrainWillpowerUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DrainWillpowerG, _Sourcee)
					GetStatusTurns(_Character, STATUS:DrainWillpowerG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DrainWillpowerG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:DrainWillpowerH)
			IsLessThen(_DrainWillpowerUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_DrainWillpowerUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:DrainWillpowerH, _Sourcee)
					GetStatusTurns(_Character, STATUS:DrainWillpowerH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, DrainWillpowerH)
		ENDIF
		IF "c1"
			IsEqual(_DrainWillpowerUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, DrainWillpowerA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Changed")
		ELIF "c1"
			IsEqual(_DrainWillpowerUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, DrainWillpowerB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Changed")
		ELIF "c1"
			IsEqual(_DrainWillpowerUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, DrainWillpowerC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Changed")
		ELIF "c1"
			IsEqual(_DrainWillpowerUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, DrainWillpowerD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Changed")
		ELIF "c1"
			IsEqual(_DrainWillpowerUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, DrainWillpowerE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Changed")
		ELIF "c1"
			IsEqual(_DrainWillpowerUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, DrainWillpowerF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Changed")
		ELIF "c1"
			IsEqual(_DrainWillpowerUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, DrainWillpowerG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Changed")
		ELIF "!c1"
			IsLessThen(_DrainWillpowerUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, DrainWillpowerH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Changed")
		ELSE
			ClearTag(_Character, "Blue_DrainWillpower_Tag")
			CharacterEvent(_Character, "Blue_DrainWillpower_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_SunderedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SunderedA)
			IsEqual(_SunderedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_SunderedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SunderedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:SunderedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SunderedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SunderedB)
			IsEqual(_SunderedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_SunderedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SunderedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:SunderedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SunderedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SunderedC)
			IsEqual(_SunderedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_SunderedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SunderedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:SunderedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SunderedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SunderedD)
			IsEqual(_SunderedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_SunderedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SunderedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:SunderedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SunderedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SunderedE)
			IsEqual(_SunderedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_SunderedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SunderedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:SunderedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SunderedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SunderedF)
			IsEqual(_SunderedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_SunderedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SunderedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:SunderedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SunderedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:SunderedG)
			IsEqual(_SunderedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_SunderedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SunderedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:SunderedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SunderedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:SunderedH)
			IsLessThen(_SunderedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_SunderedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:SunderedH, _Sourcee)
					GetStatusTurns(_Character, STATUS:SunderedH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, SunderedH)
		ENDIF
		IF "c1"
			IsEqual(_SunderedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, SunderedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Changed")
		ELIF "c1"
			IsEqual(_SunderedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, SunderedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Changed")
		ELIF "c1"
			IsEqual(_SunderedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, SunderedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Changed")
		ELIF "c1"
			IsEqual(_SunderedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, SunderedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Changed")
		ELIF "c1"
			IsEqual(_SunderedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, SunderedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Changed")
		ELIF "c1"
			IsEqual(_SunderedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, SunderedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Changed")
		ELIF "c1"
			IsEqual(_SunderedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, SunderedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Changed")
		ELIF "!c1"
			IsLessThen(_SunderedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, SunderedH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Changed")
		ELSE
			ClearTag(_Character, "Blue_Sundered_Tag")
			CharacterEvent(_Character, "Blue_Sundered_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_HebetudinousUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:HebetudinousA)
			IsEqual(_HebetudinousUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_HebetudinousUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:HebetudinousA, _Sourcee)
					GetStatusTurns(_Character, STATUS:HebetudinousA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, HebetudinousA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:HebetudinousB)
			IsEqual(_HebetudinousUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_HebetudinousUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:HebetudinousB, _Sourcee)
					GetStatusTurns(_Character, STATUS:HebetudinousB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, HebetudinousB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:HebetudinousC)
			IsEqual(_HebetudinousUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_HebetudinousUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:HebetudinousC, _Sourcee)
					GetStatusTurns(_Character, STATUS:HebetudinousC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, HebetudinousC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:HebetudinousD)
			IsEqual(_HebetudinousUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_HebetudinousUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:HebetudinousD, _Sourcee)
					GetStatusTurns(_Character, STATUS:HebetudinousD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, HebetudinousD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:HebetudinousE)
			IsEqual(_HebetudinousUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_HebetudinousUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:HebetudinousE, _Sourcee)
					GetStatusTurns(_Character, STATUS:HebetudinousE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, HebetudinousE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:HebetudinousF)
			IsEqual(_HebetudinousUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_HebetudinousUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:HebetudinousF, _Sourcee)
					GetStatusTurns(_Character, STATUS:HebetudinousF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, HebetudinousF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:HebetudinousG)
			IsEqual(_HebetudinousUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_HebetudinousUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:HebetudinousG, _Sourcee)
					GetStatusTurns(_Character, STATUS:HebetudinousG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, HebetudinousG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:HebetudinousH)
			IsLessThen(_HebetudinousUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_HebetudinousUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:HebetudinousH, _Sourcee)
					GetStatusTurns(_Character, STATUS:HebetudinousH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, HebetudinousH)
		ENDIF
		IF "c1"
			IsEqual(_HebetudinousUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, HebetudinousA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Changed")
		ELIF "c1"
			IsEqual(_HebetudinousUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, HebetudinousB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Changed")
		ELIF "c1"
			IsEqual(_HebetudinousUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, HebetudinousC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Changed")
		ELIF "c1"
			IsEqual(_HebetudinousUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, HebetudinousD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Changed")
		ELIF "c1"
			IsEqual(_HebetudinousUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, HebetudinousE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Changed")
		ELIF "c1"
			IsEqual(_HebetudinousUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, HebetudinousF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Changed")
		ELIF "c1"
			IsEqual(_HebetudinousUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, HebetudinousG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Changed")
		ELIF "!c1"
			IsLessThen(_HebetudinousUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, HebetudinousH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Changed")
		ELSE
			ClearTag(_Character, "Blue_Hebetudinous_Tag")
			CharacterEvent(_Character, "Blue_Hebetudinous_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_MadUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MadA)
			IsEqual(_MadUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_MadUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MadA, _Sourcee)
					GetStatusTurns(_Character, STATUS:MadA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MadA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MadB)
			IsEqual(_MadUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_MadUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MadB, _Sourcee)
					GetStatusTurns(_Character, STATUS:MadB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MadB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MadC)
			IsEqual(_MadUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_MadUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MadC, _Sourcee)
					GetStatusTurns(_Character, STATUS:MadC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MadC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MadD)
			IsEqual(_MadUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_MadUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MadD, _Sourcee)
					GetStatusTurns(_Character, STATUS:MadD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MadD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MadE)
			IsEqual(_MadUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_MadUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MadE, _Sourcee)
					GetStatusTurns(_Character, STATUS:MadE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MadE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MadF)
			IsEqual(_MadUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_MadUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MadF, _Sourcee)
					GetStatusTurns(_Character, STATUS:MadF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MadF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MadG)
			IsEqual(_MadUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_MadUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MadG, _Sourcee)
					GetStatusTurns(_Character, STATUS:MadG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MadG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:MADNESS)
			IsLessThen(_MadUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_MadUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MADNESS, _Sourcee)
					GetStatusTurns(_Character, STATUS:MADNESS, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MADNESS)
		ENDIF
		IF "c1"
			IsEqual(_MadUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, MadA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Changed")
		ELIF "c1"
			IsEqual(_MadUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, MadB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Changed")
		ELIF "c1"
			IsEqual(_MadUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, MadC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Changed")
		ELIF "c1"
			IsEqual(_MadUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, MadD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Changed")
		ELIF "c1"
			IsEqual(_MadUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, MadE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Changed")
		ELIF "c1"
			IsEqual(_MadUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, MadF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Changed")
		ELIF "c1"
			IsEqual(_MadUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, MadG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Changed")
		ELIF "!c1"
			IsLessThen(_MadUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, MADNESS, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Changed")
		ELSE
			ClearTag(_Character, "Blue_Mad_Tag")
			CharacterEvent(_Character, "Blue_Mad_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_FortifiedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FortifiedA)
			IsEqual(_FortifiedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_FortifiedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FortifiedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:FortifiedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FortifiedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FortifiedB)
			IsEqual(_FortifiedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_FortifiedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FortifiedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:FortifiedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FortifiedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FortifiedC)
			IsEqual(_FortifiedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_FortifiedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FortifiedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:FortifiedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FortifiedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FortifiedD)
			IsEqual(_FortifiedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_FortifiedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FortifiedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:FortifiedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FortifiedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FortifiedE)
			IsEqual(_FortifiedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_FortifiedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FortifiedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:FortifiedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FortifiedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FortifiedF)
			IsEqual(_FortifiedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_FortifiedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FortifiedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:FortifiedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FortifiedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:FortifiedG)
			IsEqual(_FortifiedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_FortifiedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FortifiedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:FortifiedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FortifiedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:FortifiedH)
			IsLessThen(_FortifiedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_FortifiedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:FortifiedH, _Sourcee)
					GetStatusTurns(_Character, STATUS:FortifiedH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, FortifiedH)
		ENDIF
		IF "c1"
			IsEqual(_FortifiedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, FortifiedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Changed")
		ELIF "c1"
			IsEqual(_FortifiedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, FortifiedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Changed")
		ELIF "c1"
			IsEqual(_FortifiedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, FortifiedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Changed")
		ELIF "c1"
			IsEqual(_FortifiedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, FortifiedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Changed")
		ELIF "c1"
			IsEqual(_FortifiedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, FortifiedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Changed")
		ELIF "c1"
			IsEqual(_FortifiedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, FortifiedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Changed")
		ELIF "c1"
			IsEqual(_FortifiedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, FortifiedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Changed")
		ELIF "!c1"
			IsLessThen(_FortifiedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, FortifiedH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Changed")
		ELSE
			ClearTag(_Character, "Blue_Fortified_Tag")
			CharacterEvent(_Character, "Blue_Fortified_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_ClearMindedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ClearMindedA)
			IsEqual(_ClearMindedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_ClearMindedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ClearMindedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:ClearMindedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ClearMindedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ClearMindedB)
			IsEqual(_ClearMindedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_ClearMindedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ClearMindedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:ClearMindedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ClearMindedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ClearMindedC)
			IsEqual(_ClearMindedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_ClearMindedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ClearMindedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:ClearMindedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ClearMindedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ClearMindedD)
			IsEqual(_ClearMindedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_ClearMindedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ClearMindedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:ClearMindedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ClearMindedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ClearMindedE)
			IsEqual(_ClearMindedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_ClearMindedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ClearMindedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:ClearMindedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ClearMindedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ClearMindedF)
			IsEqual(_ClearMindedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_ClearMindedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ClearMindedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:ClearMindedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ClearMindedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:ClearMindedG)
			IsEqual(_ClearMindedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_ClearMindedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ClearMindedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:ClearMindedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ClearMindedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:ClearMindedH)
			IsLessThen(_ClearMindedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_ClearMindedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:ClearMindedH, _Sourcee)
					GetStatusTurns(_Character, STATUS:ClearMindedH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, ClearMindedH)
		ENDIF
		IF "c1"
			IsEqual(_ClearMindedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, ClearMindedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Changed")
		ELIF "c1"
			IsEqual(_ClearMindedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, ClearMindedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Changed")
		ELIF "c1"
			IsEqual(_ClearMindedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, ClearMindedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Changed")
		ELIF "c1"
			IsEqual(_ClearMindedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, ClearMindedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Changed")
		ELIF "c1"
			IsEqual(_ClearMindedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, ClearMindedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Changed")
		ELIF "c1"
			IsEqual(_ClearMindedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, ClearMindedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Changed")
		ELIF "c1"
			IsEqual(_ClearMindedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, ClearMindedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Changed")
		ELIF "!c1"
			IsLessThen(_ClearMindedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, ClearMindedH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Changed")
		ELSE
			ClearTag(_Character, "Blue_ClearMinded_Tag")
			CharacterEvent(_Character, "Blue_ClearMinded_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_RestedUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:RestedA)
			IsEqual(_RestedUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_RestedUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:RestedA, _Sourcee)
					GetStatusTurns(_Character, STATUS:RestedA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, RestedA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:RestedB)
			IsEqual(_RestedUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_RestedUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:RestedB, _Sourcee)
					GetStatusTurns(_Character, STATUS:RestedB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, RestedB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:RestedC)
			IsEqual(_RestedUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_RestedUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:RestedC, _Sourcee)
					GetStatusTurns(_Character, STATUS:RestedC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, RestedC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:RestedD)
			IsEqual(_RestedUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_RestedUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:RestedD, _Sourcee)
					GetStatusTurns(_Character, STATUS:RestedD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, RestedD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:RestedE)
			IsEqual(_RestedUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_RestedUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:RestedE, _Sourcee)
					GetStatusTurns(_Character, STATUS:RestedE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, RestedE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:RestedF)
			IsEqual(_RestedUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_RestedUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:RestedF, _Sourcee)
					GetStatusTurns(_Character, STATUS:RestedF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, RestedF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:RestedG)
			IsEqual(_RestedUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_RestedUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:RestedG, _Sourcee)
					GetStatusTurns(_Character, STATUS:RestedG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, RestedG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:RestedH)
			IsLessThen(_RestedUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_RestedUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:RestedH, _Sourcee)
					GetStatusTurns(_Character, STATUS:RestedH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, RestedH)
		ENDIF
		IF "c1"
			IsEqual(_RestedUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, RestedA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Changed")
		ELIF "c1"
			IsEqual(_RestedUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, RestedB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Changed")
		ELIF "c1"
			IsEqual(_RestedUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, RestedC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Changed")
		ELIF "c1"
			IsEqual(_RestedUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, RestedD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Changed")
		ELIF "c1"
			IsEqual(_RestedUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, RestedE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Changed")
		ELIF "c1"
			IsEqual(_RestedUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, RestedF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Changed")
		ELIF "c1"
			IsEqual(_RestedUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, RestedG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Changed")
		ELIF "!c1"
			IsLessThen(_RestedUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, RestedH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Changed")
		ELSE
			ClearTag(_Character, "Blue_Rested_Tag")
			CharacterEvent(_Character, "Blue_Rested_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_StrongUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StrongA)
			IsEqual(_StrongUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_StrongUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StrongA, _Sourcee)
					GetStatusTurns(_Character, STATUS:StrongA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StrongA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StrongB)
			IsEqual(_StrongUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_StrongUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StrongB, _Sourcee)
					GetStatusTurns(_Character, STATUS:StrongB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StrongB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StrongC)
			IsEqual(_StrongUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_StrongUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StrongC, _Sourcee)
					GetStatusTurns(_Character, STATUS:StrongC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StrongC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StrongD)
			IsEqual(_StrongUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_StrongUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StrongD, _Sourcee)
					GetStatusTurns(_Character, STATUS:StrongD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StrongD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StrongE)
			IsEqual(_StrongUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_StrongUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StrongE, _Sourcee)
					GetStatusTurns(_Character, STATUS:StrongE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StrongE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StrongF)
			IsEqual(_StrongUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_StrongUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StrongF, _Sourcee)
					GetStatusTurns(_Character, STATUS:StrongF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StrongF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:StrongG)
			IsEqual(_StrongUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_StrongUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StrongG, _Sourcee)
					GetStatusTurns(_Character, STATUS:StrongG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StrongG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:StrongH)
			IsLessThen(_StrongUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_StrongUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:StrongH, _Sourcee)
					GetStatusTurns(_Character, STATUS:StrongH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, StrongH)
		ENDIF
		IF "c1"
			IsEqual(_StrongUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, StrongA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Changed")
		ELIF "c1"
			IsEqual(_StrongUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, StrongB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Changed")
		ELIF "c1"
			IsEqual(_StrongUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, StrongC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Changed")
		ELIF "c1"
			IsEqual(_StrongUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, StrongD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Changed")
		ELIF "c1"
			IsEqual(_StrongUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, StrongE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Changed")
		ELIF "c1"
			IsEqual(_StrongUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, StrongF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Changed")
		ELIF "c1"
			IsEqual(_StrongUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, StrongG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Changed")
		ELIF "!c1"
			IsLessThen(_StrongUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, StrongH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Changed")
		ELSE
			ClearTag(_Character, "Blue_Strong_Tag")
			CharacterEvent(_Character, "Blue_Strong_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_AntidoteUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AntidoteA)
			IsEqual(_AntidoteUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_AntidoteUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AntidoteA, _Sourcee)
					GetStatusTurns(_Character, STATUS:AntidoteA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AntidoteA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AntidoteB)
			IsEqual(_AntidoteUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_AntidoteUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AntidoteB, _Sourcee)
					GetStatusTurns(_Character, STATUS:AntidoteB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AntidoteB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AntidoteC)
			IsEqual(_AntidoteUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_AntidoteUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AntidoteC, _Sourcee)
					GetStatusTurns(_Character, STATUS:AntidoteC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AntidoteC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AntidoteD)
			IsEqual(_AntidoteUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_AntidoteUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AntidoteD, _Sourcee)
					GetStatusTurns(_Character, STATUS:AntidoteD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AntidoteD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AntidoteE)
			IsEqual(_AntidoteUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_AntidoteUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AntidoteE, _Sourcee)
					GetStatusTurns(_Character, STATUS:AntidoteE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AntidoteE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AntidoteF)
			IsEqual(_AntidoteUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_AntidoteUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AntidoteF, _Sourcee)
					GetStatusTurns(_Character, STATUS:AntidoteF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AntidoteF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:AntidoteG)
			IsEqual(_AntidoteUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_AntidoteUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AntidoteG, _Sourcee)
					GetStatusTurns(_Character, STATUS:AntidoteG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AntidoteG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:AntidoteH)
			IsLessThen(_AntidoteUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_AntidoteUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:AntidoteH, _Sourcee)
					GetStatusTurns(_Character, STATUS:AntidoteH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, AntidoteH)
		ENDIF
		IF "c1"
			IsEqual(_AntidoteUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, AntidoteA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Changed")
		ELIF "c1"
			IsEqual(_AntidoteUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, AntidoteB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Changed")
		ELIF "c1"
			IsEqual(_AntidoteUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, AntidoteC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Changed")
		ELIF "c1"
			IsEqual(_AntidoteUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, AntidoteD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Changed")
		ELIF "c1"
			IsEqual(_AntidoteUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, AntidoteE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Changed")
		ELIF "c1"
			IsEqual(_AntidoteUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, AntidoteF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Changed")
		ELIF "c1"
			IsEqual(_AntidoteUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, AntidoteG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Changed")
		ELIF "!c1"
			IsLessThen(_AntidoteUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, AntidoteH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Changed")
		ELSE
			ClearTag(_Character, "Blue_Antidote_Tag")
			CharacterEvent(_Character, "Blue_Antidote_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_BolsterUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BolsterA)
			IsEqual(_BolsterUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_BolsterUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BolsterA, _Sourcee)
					GetStatusTurns(_Character, STATUS:BolsterA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BolsterA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BolsterB)
			IsEqual(_BolsterUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_BolsterUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BolsterB, _Sourcee)
					GetStatusTurns(_Character, STATUS:BolsterB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BolsterB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BolsterC)
			IsEqual(_BolsterUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_BolsterUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BolsterC, _Sourcee)
					GetStatusTurns(_Character, STATUS:BolsterC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BolsterC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BolsterD)
			IsEqual(_BolsterUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_BolsterUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BolsterD, _Sourcee)
					GetStatusTurns(_Character, STATUS:BolsterD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BolsterD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BolsterE)
			IsEqual(_BolsterUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_BolsterUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BolsterE, _Sourcee)
					GetStatusTurns(_Character, STATUS:BolsterE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BolsterE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BolsterF)
			IsEqual(_BolsterUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_BolsterUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BolsterF, _Sourcee)
					GetStatusTurns(_Character, STATUS:BolsterF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BolsterF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:BolsterG)
			IsEqual(_BolsterUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_BolsterUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BolsterG, _Sourcee)
					GetStatusTurns(_Character, STATUS:BolsterG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BolsterG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:BolsterH)
			IsLessThen(_BolsterUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_BolsterUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:BolsterH, _Sourcee)
					GetStatusTurns(_Character, STATUS:BolsterH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, BolsterH)
		ENDIF
		IF "c1"
			IsEqual(_BolsterUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, BolsterA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Changed")
		ELIF "c1"
			IsEqual(_BolsterUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, BolsterB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Changed")
		ELIF "c1"
			IsEqual(_BolsterUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, BolsterC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Changed")
		ELIF "c1"
			IsEqual(_BolsterUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, BolsterD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Changed")
		ELIF "c1"
			IsEqual(_BolsterUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, BolsterE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Changed")
		ELIF "c1"
			IsEqual(_BolsterUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, BolsterF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Changed")
		ELIF "c1"
			IsEqual(_BolsterUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, BolsterG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Changed")
		ELIF "!c1"
			IsLessThen(_BolsterUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, BolsterH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Changed")
		ELSE
			ClearTag(_Character, "Blue_Bolster_Tag")
			CharacterEvent(_Character, "Blue_Bolster_Removed")
		ENDIF
	ENDIF

	IF "c1"
		IsGreaterThen(_MagicShellUSV, FLOAT:900)
	THEN
		Set(_Turns, INT:2)
		Set(_Sourcee, _OriginSource)
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MagicShellA)
			IsEqual(_MagicShellUSV, FLOAT:1001)
		THEN
			IF "c1"
				IsLessThen(_MagicShellUSV, FLOAT:1001)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MagicShellA, _Sourcee)
					GetStatusTurns(_Character, STATUS:MagicShellA, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MagicShellA)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MagicShellB)
			IsEqual(_MagicShellUSV, FLOAT:1002)
		THEN
			IF "c1"
				IsLessThen(_MagicShellUSV, FLOAT:1002)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MagicShellB, _Sourcee)
					GetStatusTurns(_Character, STATUS:MagicShellB, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MagicShellB)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MagicShellC)
			IsEqual(_MagicShellUSV, FLOAT:1003)
		THEN
			IF "c1"
				IsLessThen(_MagicShellUSV, FLOAT:1003)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MagicShellC, _Sourcee)
					GetStatusTurns(_Character, STATUS:MagicShellC, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MagicShellC)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MagicShellD)
			IsEqual(_MagicShellUSV, FLOAT:1004)
		THEN
			IF "c1"
				IsLessThen(_MagicShellUSV, FLOAT:1004)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MagicShellD, _Sourcee)
					GetStatusTurns(_Character, STATUS:MagicShellD, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MagicShellD)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MagicShellE)
			IsEqual(_MagicShellUSV, FLOAT:1005)
		THEN
			IF "c1"
				IsLessThen(_MagicShellUSV, FLOAT:1005)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MagicShellE, _Sourcee)
					GetStatusTurns(_Character, STATUS:MagicShellE, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MagicShellE)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MagicShellF)
			IsEqual(_MagicShellUSV, FLOAT:1006)
		THEN
			IF "c1"
				IsLessThen(_MagicShellUSV, FLOAT:1006)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MagicShellF, _Sourcee)
					GetStatusTurns(_Character, STATUS:MagicShellF, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MagicShellF)
		ENDIF
		IF "c1&!c2"
			CharacterHasStatus(_Character, STATUS:MagicShellG)
			IsEqual(_MagicShellUSV, FLOAT:1007)
		THEN
			IF "c1"
				IsLessThen(_MagicShellUSV, FLOAT:1007)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MagicShellG, _Sourcee)
					GetStatusTurns(_Character, STATUS:MagicShellG, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MagicShellG)
		ENDIF
		IF "c1&c2"
			CharacterHasStatus(_Character, STATUS:MagicShellH)
			IsLessThen(_MagicShellUSV, FLOAT:1008)
		THEN
			IF "c1"
				IsLessThen(_MagicShellUSV, FLOAT:1008)
			THEN
				IF "c1&c2"
					CharacterGetStatusSourceCharacter(_Character, STATUS:MagicShellH, _Sourcee)
					GetStatusTurns(_Character, STATUS:MagicShellH, _Turns)
				THEN
				ENDIF
			ENDIF
			ListAdd(_RemoveList, MagicShellH)
		ENDIF
		IF "c1"
			IsEqual(_MagicShellUSV, FLOAT:1001)
		THEN
			CharacterApplyStatus(_Character, MagicShellA, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Changed")
		ELIF "c1"
			IsEqual(_MagicShellUSV, FLOAT:1002)
		THEN
			CharacterApplyStatus(_Character, MagicShellB, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Changed")
		ELIF "c1"
			IsEqual(_MagicShellUSV, FLOAT:1003)
		THEN
			CharacterApplyStatus(_Character, MagicShellC, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Changed")
		ELIF "c1"
			IsEqual(_MagicShellUSV, FLOAT:1004)
		THEN
			CharacterApplyStatus(_Character, MagicShellD, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Changed")
		ELIF "c1"
			IsEqual(_MagicShellUSV, FLOAT:1005)
		THEN
			CharacterApplyStatus(_Character, MagicShellE, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Changed")
		ELIF "c1"
			IsEqual(_MagicShellUSV, FLOAT:1006)
		THEN
			CharacterApplyStatus(_Character, MagicShellF, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Changed")
		ELIF "c1"
			IsEqual(_MagicShellUSV, FLOAT:1007)
		THEN
			CharacterApplyStatus(_Character, MagicShellG, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Changed")
		ELIF "!c1"
			IsLessThen(_MagicShellUSV, FLOAT:1008)
		THEN
			CharacterApplyStatus(_Character, MagicShellH, _Turns, 0, _Sourcee)
			SetTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Changed")
		ELSE
			ClearTag(_Character, "Blue_MagicShell_Tag")
			CharacterEvent(_Character, "Blue_MagicShell_Removed")
		ENDIF
	ENDIF
	IF "c1"
		IsTagged(_Character, "BlueSaveTagPRETIERCLEAR")
	THEN
		ClearTag(_Character, "BlueSaveTagPRETIERCLEAR")
	ENDIF
	RETURN(_RemoveList,null,INT:2)
			
		