EVENTS

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Turn back. Please don't look at this. I beg of ye.
	Everything below this point is generated code.
	Going any further is sure to result in pain.
	
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */





EVENT Blue_Aerotheurge_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Aerotheurge_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Projectile_ShockingTouch
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ShockingTouch)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ShockingTouch)
			CharacterAddSkill(_Character, Blue_Projectile_ShockingTouch_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ShockingTouch_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ShockingTouch_SE)
			CharacterAddSkill(_Character, Blue_Projectile_ShockingTouch)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_FavourableWind
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FavourableWind)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FavourableWind)
			CharacterAddSkill(_Character, Blue_Target_FavourableWind_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FavourableWind_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FavourableWind_SE)
			CharacterAddSkill(_Character, Blue_Target_FavourableWind)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_ElectricDischarge
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge)
			CharacterAddSkill(_Character, Blue_Projectile_ElectricDischarge_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge_SE)
			CharacterAddSkill(_Character, Blue_Projectile_ElectricDischarge)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_MultiStrike_Thunderjump
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_MultiStrike_Thunderjump)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_MultiStrike_Thunderjump)
			CharacterAddSkill(_Character, Blue_MultiStrike_Thunderjump_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_MultiStrike_Thunderjump_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_MultiStrike_Thunderjump_SE)
			CharacterAddSkill(_Character, Blue_MultiStrike_Thunderjump)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Cyclone
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Cyclone)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Cyclone)
			CharacterAddSkill(_Character, Blue_Shout_Cyclone_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Cyclone_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Cyclone_SE)
			CharacterAddSkill(_Character, Blue_Shout_Cyclone)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Teleportation_Teleport
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Teleport)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Teleportation_Teleport)
			CharacterAddSkill(_Character, Blue_Teleportation_Teleport_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Teleport_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Teleportation_Teleport_SE)
			CharacterAddSkill(_Character, Blue_Teleportation_Teleport)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_PressureSpike
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_PressureSpike)
		IsEqual(_AbilityID, SKILL:Blue_Target_PressureSpike_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_PressureSpike)
			CharacterAddSkill(_Character, Blue_Target_PressureSpike_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_PressureSpike_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_PressureSpike_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_PressureSpike_SE)
			CharacterAddSkill(_Character, Blue_Target_PressureSpike)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_ProjectileStrike_DazingBolt
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_DazingBolt)
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_DazingBolt_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_DazingBolt)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_DazingBolt_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_DazingBolt_SE)
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_DazingBolt_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_DazingBolt_SE)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_DazingBolt)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_MakeInvisible
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_MakeInvisible)
		IsEqual(_AbilityID, SKILL:Blue_Target_MakeInvisible_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_MakeInvisible)
			CharacterAddSkill(_Character, Blue_Target_MakeInvisible_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_MakeInvisible_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_MakeInvisible_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_MakeInvisible_SE)
			CharacterAddSkill(_Character, Blue_Target_MakeInvisible)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Teleportation_Netherswap
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Netherswap)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Teleportation_Netherswap)
			CharacterAddSkill(_Character, Blue_Teleportation_Netherswap_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Netherswap_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Teleportation_Netherswap_SE)
			CharacterAddSkill(_Character, Blue_Teleportation_Netherswap)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_RendingGale
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_RendingGale)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_RendingGale)
			CharacterAddSkill(_Character, Blue_Target_RendingGale_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_RendingGale_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_RendingGale_SE)
			CharacterAddSkill(_Character, Blue_Target_RendingGale)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Tornado_Tornado
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Tornado_Tornado)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Tornado_Tornado)
			CharacterAddSkill(_Character, Blue_Tornado_Tornado_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Tornado_Tornado_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Tornado_Tornado_SE)
			CharacterAddSkill(_Character, Blue_Tornado_Tornado)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_Superconductor
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Superconductor)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Superconductor)
			CharacterAddSkill(_Character, Blue_Projectile_Superconductor_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Superconductor_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Superconductor_SE)
			CharacterAddSkill(_Character, Blue_Projectile_Superconductor)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_ChainLightning
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ChainLightning)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ChainLightning_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ChainLightning)
			CharacterAddSkill(_Character, Blue_Projectile_ChainLightning_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ChainLightning_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ChainLightning_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ChainLightning_SE)
			CharacterAddSkill(_Character, Blue_Projectile_ChainLightning)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_ProtectionBubble
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_ProtectionBubble)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_ProtectionBubble)
			CharacterAddSkill(_Character, Blue_Target_ProtectionBubble_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_ProtectionBubble_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_ProtectionBubble_SE)
			CharacterAddSkill(_Character, Blue_Target_ProtectionBubble)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Storm_Thunderstorm
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Storm_Thunderstorm)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Storm_Thunderstorm)
			CharacterAddSkill(_Character, Blue_Storm_Thunderstorm_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Storm_Thunderstorm_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Storm_Thunderstorm_SE)
			CharacterAddSkill(_Character, Blue_Storm_Thunderstorm)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


EVENT Blue_Berserker_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Berserker_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF


	//Blue_Shout_Indomitable
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Indomitable)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Indomitable)
			CharacterAddSkill(_Character, Blue_Shout_Indomitable_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Indomitable_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Indomitable_SE)
			CharacterAddSkill(_Character, Blue_Shout_Indomitable)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


	//Blue_Shout_MartialStance
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_MartialStance)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_MartialStance)
			CharacterAddSkill(_Character, Blue_Shout_MartialStance_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_MartialStance_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_MartialStance_SE)
			CharacterAddSkill(_Character, Blue_Shout_MartialStance)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_WrathStance
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_WrathStance)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_WrathStance)
			CharacterAddSkill(_Character, Blue_Shout_WrathStance_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_WrathStance_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_WrathStance_SE)
			CharacterAddSkill(_Character, Blue_Shout_WrathStance)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_CleavingStance
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_CleavingStance)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_CleavingStance)
			CharacterAddSkill(_Character, Blue_Shout_CleavingStance_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_CleavingStance_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_CleavingStance_SE)
			CharacterAddSkill(_Character, Blue_Shout_CleavingStance)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Cone_Cleave
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Cone_Cleave)
		IsEqual(_AbilityID, SKILL:Blue_Cone_Cleave_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Cone_Cleave)
			CharacterAddSkill(_Character, Blue_Cone_Cleave_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Cone_Cleave_SE)
		IsEqual(_AbilityID, SKILL:Blue_Cone_Cleave_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Cone_Cleave_SE)
			CharacterAddSkill(_Character, Blue_Cone_Cleave)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_PumpingIron
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron)
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_C2)
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron)
			CharacterAddSkill(_Character, Blue_Shout_PumpingIron_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_SE)
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron_SE)
			CharacterAddSkill(_Character, Blue_Shout_PumpingIron)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Anticipation
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Anticipation)
		IsEqual(_AbilityID, SKILL:Blue_Shout_Anticipation_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Anticipation)
			CharacterAddSkill(_Character, Blue_Shout_Anticipation_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Anticipation_SE)
		IsEqual(_AbilityID, SKILL:Blue_Shout_Anticipation_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Anticipation_SE)
			CharacterAddSkill(_Character, Blue_Shout_Anticipation)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Teleportation_Throw
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Throw)
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Throw_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Teleportation_Throw)
			CharacterAddSkill(_Character, Blue_Teleportation_Throw_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Throw_SE)
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Throw_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Teleportation_Throw_SE)
			CharacterAddSkill(_Character, Blue_Teleportation_Throw)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Enrage
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Enrage)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Enrage)
			CharacterAddSkill(_Character, Blue_Shout_Enrage_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Enrage_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Enrage_SE)
			CharacterAddSkill(_Character, Blue_Shout_Enrage)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Whirlwind
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Whirlwind)
		IsEqual(_AbilityID, SKILL:Blue_Shout_Whirlwind_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Whirlwind)
			CharacterAddSkill(_Character, Blue_Shout_Whirlwind_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Whirlwind_SE)
		IsEqual(_AbilityID, SKILL:Blue_Shout_Whirlwind_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Whirlwind_SE)
			CharacterAddSkill(_Character, Blue_Shout_Whirlwind)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Ironhide
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Ironhide)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Ironhide)
			CharacterAddSkill(_Character, Blue_Shout_Ironhide_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Ironhide_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Ironhide_SE)
			CharacterAddSkill(_Character, Blue_Shout_Ironhide)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_Grapple
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Grapple)
			CharacterAddSkill(_Character, Blue_Projectile_Grapple_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Grapple_SE)
			CharacterAddSkill(_Character, Blue_Projectile_Grapple)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Disembowl
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl)
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Disembowl)
			CharacterAddSkill(_Character, Blue_Target_Disembowl_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Disembowl_SE)
			CharacterAddSkill(_Character, Blue_Target_Disembowl)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_ThickOfTheFight
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ThickOfTheFight)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ThickOfTheFight)
			CharacterAddSkill(_Character, Blue_Shout_ThickOfTheFight_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ThickOfTheFight_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ThickOfTheFight_SE)
			CharacterAddSkill(_Character, Blue_Shout_ThickOfTheFight)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Onslaught
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Onslaught)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Onslaught)
			CharacterAddSkill(_Character, Blue_Target_Onslaught_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Onslaught_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Onslaught_SE)
			CharacterAddSkill(_Character, Blue_Target_Onslaught)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Jump_Leap
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Jump_Leap)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Jump_Leap)
			CharacterAddSkill(_Character, Blue_Jump_Leap_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Jump_Leap_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Jump_Leap_SE)
			CharacterAddSkill(_Character, Blue_Jump_Leap)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Crush
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Crush)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Crush)
			CharacterAddSkill(_Character, Blue_Target_Crush_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Crush_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Crush_SE)
			CharacterAddSkill(_Character, Blue_Target_Crush)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


EVENT Blue_Divine_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Divine_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF


	//Blue_Dome_Consecrate
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Dome_Consecrate)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Dome_Consecrate)
			CharacterAddSkill(_Character, Blue_Dome_Consecrate_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Dome_Consecrate_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Dome_Consecrate_SE)
			CharacterAddSkill(_Character, Blue_Dome_Consecrate)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Safeguard
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Safeguard)
		IsEqual(_AbilityID, SKILL:Blue_Target_Safeguard_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Safeguard)
			CharacterAddSkill(_Character, Blue_Target_Safeguard_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Safeguard_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Safeguard_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Safeguard_SE)
			CharacterAddSkill(_Character, Blue_Target_Safeguard)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Cleanse
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse)
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Cleanse)
			CharacterAddSkill(_Character, Blue_Target_Cleanse_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Cleanse_SE)
			CharacterAddSkill(_Character, Blue_Target_Cleanse)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Summon_Illuminate
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Summon_Illuminate)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Summon_Illuminate)
			CharacterAddSkill(_Character, Blue_Summon_Illuminate_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Summon_Illuminate_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Summon_Illuminate_SE)
			CharacterAddSkill(_Character, Blue_Summon_Illuminate)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Teleportation_Revivify
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Revivify)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Teleportation_Revivify)
			CharacterAddSkill(_Character, Blue_Teleportation_Revivify_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Revivify_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Teleportation_Revivify_SE)
			CharacterAddSkill(_Character, Blue_Teleportation_Revivify)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Smite
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite)
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Smite)
			CharacterAddSkill(_Character, Blue_Target_Smite_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Smite_SE)
			CharacterAddSkill(_Character, Blue_Target_Smite)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Bless
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Bless)
		IsEqual(_AbilityID, SKILL:Blue_Target_Bless_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Bless)
			CharacterAddSkill(_Character, Blue_Target_Bless_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Bless_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Bless_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Bless_SE)
			CharacterAddSkill(_Character, Blue_Target_Bless)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Intertwine
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Intertwine)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Intertwine)
			CharacterAddSkill(_Character, Blue_Target_Intertwine_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Intertwine_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Intertwine_SE)
			CharacterAddSkill(_Character, Blue_Target_Intertwine)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Zone_DrainArcana
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Zone_DrainArcana)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Zone_DrainArcana)
			CharacterAddSkill(_Character, Blue_Zone_DrainArcana_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Zone_DrainArcana_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Zone_DrainArcana_SE)
			CharacterAddSkill(_Character, Blue_Zone_DrainArcana)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Fracture
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Fracture)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Fracture)
			CharacterAddSkill(_Character, Blue_Target_Fracture_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Fracture_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Fracture_SE)
			CharacterAddSkill(_Character, Blue_Target_Fracture)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Condemn
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Condemn)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Condemn)
			CharacterAddSkill(_Character, Blue_Target_Condemn_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Condemn_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Condemn_SE)
			CharacterAddSkill(_Character, Blue_Target_Condemn)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_DivineArmor
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_DivineArmor)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DivineArmor)
			CharacterAddSkill(_Character, Blue_Target_DivineArmor_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_DivineArmor_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DivineArmor_SE)
			CharacterAddSkill(_Character, Blue_Target_DivineArmor)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_TwistFate
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_TwistFate)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_TwistFate)
			CharacterAddSkill(_Character, Blue_Shout_TwistFate_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_TwistFate_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_TwistFate_SE)
			CharacterAddSkill(_Character, Blue_Shout_TwistFate)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Restore
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Restore)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Restore)
			CharacterAddSkill(_Character, Blue_Target_Restore_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Restore_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Restore_SE)
			CharacterAddSkill(_Character, Blue_Target_Restore)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Crucify
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Crucify)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Crucify)
			CharacterAddSkill(_Character, Blue_Target_Crucify_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Crucify_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Crucify_SE)
			CharacterAddSkill(_Character, Blue_Target_Crucify)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_DivineFavor
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_DivineFavor)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_DivineFavor)
			CharacterAddSkill(_Character, Blue_Shout_DivineFavor_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_DivineFavor_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_DivineFavor_SE)
			CharacterAddSkill(_Character, Blue_Shout_DivineFavor)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


EVENT Blue_Geomancer_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Geomancer_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Projectile_AcidDart
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart)
			CharacterAddSkill(_Character, Blue_Projectile_AcidDart_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart_SE)
			CharacterAddSkill(_Character, Blue_Projectile_AcidDart)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_OilBlob
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_OilBlob)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_OilBlob)
			CharacterAddSkill(_Character, Blue_Projectile_OilBlob_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_OilBlob_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_OilBlob_SE)
			CharacterAddSkill(_Character, Blue_Projectile_OilBlob)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_ThrowDust
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowDust)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ThrowDust)
			CharacterAddSkill(_Character, Blue_Projectile_ThrowDust_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowDust_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ThrowDust_SE)
			CharacterAddSkill(_Character, Blue_Projectile_ThrowDust)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_FossilStrike
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FossilStrike)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FossilStrike_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_FossilStrike)
			CharacterAddSkill(_Character, Blue_Projectile_FossilStrike_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FossilStrike_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FossilStrike_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_FossilStrike_SE)
			CharacterAddSkill(_Character, Blue_Projectile_FossilStrike)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Cone_Tremor
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Cone_Tremor)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Cone_Tremor)
			CharacterAddSkill(_Character, Blue_Cone_Tremor_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Cone_Tremor_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Cone_Tremor_SE)
			CharacterAddSkill(_Character, Blue_Cone_Tremor)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Rain_CreateOil
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil)
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_C2)
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Rain_CreateOil)
			CharacterAddSkill(_Character, Blue_Rain_CreateOil_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_SE)
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Rain_CreateOil_SE)
			CharacterAddSkill(_Character, Blue_Rain_CreateOil)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Fortify
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Fortify)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Fortify)
			CharacterAddSkill(_Character, Blue_Target_Fortify_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Fortify_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Fortify_SE)
			CharacterAddSkill(_Character, Blue_Target_Fortify)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Vineyard
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Vineyard)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Vineyard)
			CharacterAddSkill(_Character, Blue_Target_Vineyard_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Vineyard_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Vineyard_SE)
			CharacterAddSkill(_Character, Blue_Target_Vineyard)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Impalement
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Impalement)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Impalement)
			CharacterAddSkill(_Character, Blue_Target_Impalement_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Impalement_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Impalement_SE)
			CharacterAddSkill(_Character, Blue_Target_Impalement)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Cone_PetrifyingGaze
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Cone_PetrifyingGaze)
		IsEqual(_AbilityID, SKILL:Blue_Cone_PetrifyingGaze_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Cone_PetrifyingGaze)
			CharacterAddSkill(_Character, Blue_Cone_PetrifyingGaze_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Cone_PetrifyingGaze_SE)
		IsEqual(_AbilityID, SKILL:Blue_Cone_PetrifyingGaze_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Cone_PetrifyingGaze_SE)
			CharacterAddSkill(_Character, Blue_Cone_PetrifyingGaze)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Wall_Living
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Wall_Living)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Wall_Living)
			CharacterAddSkill(_Character, Blue_Wall_Living_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Wall_Living_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Wall_Living_SE)
			CharacterAddSkill(_Character, Blue_Wall_Living)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_AcidSpores
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidSpores)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidSpores_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_AcidSpores)
			CharacterAddSkill(_Character, Blue_Projectile_AcidSpores_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidSpores_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidSpores_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_AcidSpores_SE)
			CharacterAddSkill(_Character, Blue_Projectile_AcidSpores)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_StalwartDefense
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_StalwartDefense)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_StalwartDefense)
			CharacterAddSkill(_Character, Blue_Shout_StalwartDefense_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_StalwartDefense_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_StalwartDefense_SE)
			CharacterAddSkill(_Character, Blue_Shout_StalwartDefense)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Quake_Earthquake
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Quake_Earthquake)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:99)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-99)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Quake_Earthquake)
			CharacterAddSkill(_Character, Blue_Quake_Earthquake_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:99)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:99)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:99)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Quake_Earthquake_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Quake_Earthquake_SE)
			CharacterAddSkill(_Character, Blue_Quake_Earthquake)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_ProjectileStrike_Devastate
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Devastate)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Devastate)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_Devastate_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Devastate_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Devastate_SE)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_Devastate)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_SandCoffin
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_SandCoffin)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_SandCoffin)
			CharacterAddSkill(_Character, Blue_Target_SandCoffin_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_SandCoffin_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_SandCoffin_SE)
			CharacterAddSkill(_Character, Blue_Target_SandCoffin)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


EVENT Blue_Hydrosophist_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Hydrosophist_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_FreezingTouch
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch)
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch)
			CharacterAddSkill(_Character, Blue_Target_FreezingTouch_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch_SE)
			CharacterAddSkill(_Character, Blue_Target_FreezingTouch)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Regenerate
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate)
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Regenerate)
			CharacterAddSkill(_Character, Blue_Target_Regenerate_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Regenerate_SE)
			CharacterAddSkill(_Character, Blue_Target_Regenerate)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_ProjectileStrike_Deluge
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Deluge)
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Deluge_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Deluge)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_Deluge_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Deluge_SE)
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Deluge_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Deluge_SE)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_Deluge)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Rain_Rain
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rain_Rain)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Rain_Rain)
			CharacterAddSkill(_Character, Blue_Rain_Rain_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rain_Rain_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Rain_Rain_SE)
			CharacterAddSkill(_Character, Blue_Rain_Rain)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_IceFan
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_IceFan)
			CharacterAddSkill(_Character, Blue_Projectile_IceFan_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_IceFan_SE)
			CharacterAddSkill(_Character, Blue_Projectile_IceFan)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_LethalTorrent
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_LethalTorrent)
		IsEqual(_AbilityID, SKILL:Blue_Target_LethalTorrent_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_LethalTorrent)
			CharacterAddSkill(_Character, Blue_Target_LethalTorrent_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_LethalTorrent_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_LethalTorrent_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_LethalTorrent_SE)
			CharacterAddSkill(_Character, Blue_Target_LethalTorrent)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_ArmorOfFrost
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_ArmorOfFrost)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_ArmorOfFrost)
			CharacterAddSkill(_Character, Blue_Target_ArmorOfFrost_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_ArmorOfFrost_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_ArmorOfFrost_SE)
			CharacterAddSkill(_Character, Blue_Target_ArmorOfFrost)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_GlobalCooling
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_GlobalCooling)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_GlobalCooling)
			CharacterAddSkill(_Character, Blue_Shout_GlobalCooling_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_GlobalCooling_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_GlobalCooling_SE)
			CharacterAddSkill(_Character, Blue_Shout_GlobalCooling)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_WinterBlast
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_WinterBlast)
		IsEqual(_AbilityID, SKILL:Blue_Target_WinterBlast_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_WinterBlast)
			CharacterAddSkill(_Character, Blue_Target_WinterBlast_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_WinterBlast_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_WinterBlast_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_WinterBlast_SE)
			CharacterAddSkill(_Character, Blue_Target_WinterBlast)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Icebreaker
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Icebreaker)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Icebreaker)
			CharacterAddSkill(_Character, Blue_Shout_Icebreaker_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Icebreaker_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Icebreaker_SE)
			CharacterAddSkill(_Character, Blue_Shout_Icebreaker)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Summon_HorridWilting
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Summon_HorridWilting)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Summon_HorridWilting)
			CharacterAddSkill(_Character, Blue_Summon_HorridWilting_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Summon_HorridWilting_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Summon_HorridWilting_SE)
			CharacterAddSkill(_Character, Blue_Summon_HorridWilting)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_ColdSnap
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_ColdSnap)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_ColdSnap)
			CharacterAddSkill(_Character, Blue_Target_ColdSnap_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_ColdSnap_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_ColdSnap_SE)
			CharacterAddSkill(_Character, Blue_Target_ColdSnap)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_HealingRitual
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_HealingRitual)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_HealingRitual)
			CharacterAddSkill(_Character, Blue_Projectile_HealingRitual_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_HealingRitual_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_HealingRitual_SE)
			CharacterAddSkill(_Character, Blue_Projectile_HealingRitual)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_ProjectileStrike_Hailstorm
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Hailstorm)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Hailstorm)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_Hailstorm_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Hailstorm_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Hailstorm_SE)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_Hailstorm)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_MassHeal
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_MassHeal)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_MassHeal)
			CharacterAddSkill(_Character, Blue_Target_MassHeal_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_MassHeal_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_MassHeal_SE)
			CharacterAddSkill(_Character, Blue_Target_MassHeal)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Rain_Blizzard
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rain_Blizzard)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Rain_Blizzard)
			CharacterAddSkill(_Character, Blue_Rain_Blizzard_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rain_Blizzard_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Rain_Blizzard_SE)
			CharacterAddSkill(_Character, Blue_Rain_Blizzard)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


EVENT Blue_Knight_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Knight_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_HelpingHand
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_HelpingHand)
		IsEqual(_AbilityID, SKILL:Blue_Target_HelpingHand_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_HelpingHand)
			CharacterAddSkill(_Character, Blue_Target_HelpingHand_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_HelpingHand_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_HelpingHand_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_HelpingHand_SE)
			CharacterAddSkill(_Character, Blue_Target_HelpingHand)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_WeakeningStrike
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike)
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike)
			CharacterAddSkill(_Character, Blue_Target_WeakeningStrike_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike_SE)
			CharacterAddSkill(_Character, Blue_Target_WeakeningStrike)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Hold
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Hold)
		IsEqual(_AbilityID, SKILL:Blue_Shout_Hold_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Hold)
			CharacterAddSkill(_Character, Blue_Shout_Hold_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Hold_SE)
		IsEqual(_AbilityID, SKILL:Blue_Shout_Hold_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Hold_SE)
			CharacterAddSkill(_Character, Blue_Shout_Hold)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Rush_BatteringRam
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rush_BatteringRam)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Rush_BatteringRam)
			CharacterAddSkill(_Character, Blue_Rush_BatteringRam_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rush_BatteringRam_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Rush_BatteringRam_SE)
			CharacterAddSkill(_Character, Blue_Rush_BatteringRam)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_CureWounds
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_CureWounds)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_CureWounds)
			CharacterAddSkill(_Character, Blue_Target_CureWounds_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_CureWounds_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_CureWounds_SE)
			CharacterAddSkill(_Character, Blue_Target_CureWounds)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_BouncingShield
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BouncingShield)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_BouncingShield)
			CharacterAddSkill(_Character, Blue_Projectile_BouncingShield_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BouncingShield_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_BouncingShield_SE)
			CharacterAddSkill(_Character, Blue_Projectile_BouncingShield)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Taunt
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Taunt)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Taunt)
			CharacterAddSkill(_Character, Blue_Target_Taunt_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Taunt_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Taunt_SE)
			CharacterAddSkill(_Character, Blue_Target_Taunt)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_CripplingBlow
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow)
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow)
			CharacterAddSkill(_Character, Blue_Target_CripplingBlow_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow_SE)
			CharacterAddSkill(_Character, Blue_Target_CripplingBlow)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_ElementalBastion
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ElementalBastion)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ElementalBastion)
			CharacterAddSkill(_Character, Blue_Shout_ElementalBastion_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ElementalBastion_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ElementalBastion_SE)
			CharacterAddSkill(_Character, Blue_Shout_ElementalBastion)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_ImpenetrableBarrier
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ImpenetrableBarrier)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ImpenetrableBarrier)
			CharacterAddSkill(_Character, Blue_Shout_ImpenetrableBarrier_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ImpenetrableBarrier_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ImpenetrableBarrier_SE)
			CharacterAddSkill(_Character, Blue_Shout_ImpenetrableBarrier)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_DeflectiveShield
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_DeflectiveShield)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_DeflectiveShield)
			CharacterAddSkill(_Character, Blue_Shout_DeflectiveShield_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_DeflectiveShield_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_DeflectiveShield_SE)
			CharacterAddSkill(_Character, Blue_Shout_DeflectiveShield)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_GuardianAngel
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_GuardianAngel)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_GuardianAngel)
			CharacterAddSkill(_Character, Blue_Shout_GuardianAngel_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_GuardianAngel_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_GuardianAngel_SE)
			CharacterAddSkill(_Character, Blue_Shout_GuardianAngel)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Stifle
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Stifle)
		IsEqual(_AbilityID, SKILL:Blue_Target_Stifle_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Stifle)
			CharacterAddSkill(_Character, Blue_Target_Stifle_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Stifle_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Stifle_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Stifle_SE)
			CharacterAddSkill(_Character, Blue_Target_Stifle)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Sunder
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Sunder)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Sunder)
			CharacterAddSkill(_Character, Blue_Target_Sunder_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Sunder_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Sunder_SE)
			CharacterAddSkill(_Character, Blue_Target_Sunder)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_ProtectKnight
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_ProtectKnight)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_ProtectKnight)
			CharacterAddSkill(_Character, Blue_Target_ProtectKnight_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_ProtectKnight_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_ProtectKnight_SE)
			CharacterAddSkill(_Character, Blue_Target_ProtectKnight)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_ShacklesOfPain
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ShacklesOfPain)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ShacklesOfPain)
			CharacterAddSkill(_Character, Blue_Shout_ShacklesOfPain_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ShacklesOfPain_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ShacklesOfPain_SE)
			CharacterAddSkill(_Character, Blue_Shout_ShacklesOfPain)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF



EVENT Blue_Pyrokinetic_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Pyrokinetic_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_PeaceOfMind
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_PeaceOfMind)
		IsEqual(_AbilityID, SKILL:Blue_Target_PeaceOfMind_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_PeaceOfMind)
			CharacterAddSkill(_Character, Blue_Target_PeaceOfMind_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_PeaceOfMind_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_PeaceOfMind_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_PeaceOfMind_SE)
			CharacterAddSkill(_Character, Blue_Target_PeaceOfMind)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_FlamingDaggers
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers)
			CharacterAddSkill(_Character, Blue_Projectile_FlamingDaggers_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers_SE)
			CharacterAddSkill(_Character, Blue_Projectile_FlamingDaggers)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_HeatMetal
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_HeatMetal)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_HeatMetal)
			CharacterAddSkill(_Character, Blue_Target_HeatMetal_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_HeatMetal_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_HeatMetal_SE)
			CharacterAddSkill(_Character, Blue_Target_HeatMetal)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Haste
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Haste)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Haste)
			CharacterAddSkill(_Character, Blue_Target_Haste_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Haste_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Haste_SE)
			CharacterAddSkill(_Character, Blue_Target_Haste)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_Fireball
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fireball)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fireball_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Fireball)
			CharacterAddSkill(_Character, Blue_Projectile_Fireball_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fireball_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fireball_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Fireball_SE)
			CharacterAddSkill(_Character, Blue_Projectile_Fireball)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_FlamingCrescendo
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FlamingCrescendo)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FlamingCrescendo)
			CharacterAddSkill(_Character, Blue_Target_FlamingCrescendo_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FlamingCrescendo_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FlamingCrescendo_SE)
			CharacterAddSkill(_Character, Blue_Target_FlamingCrescendo)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_PurifyingFire
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_PurifyingFire)
		IsEqual(_AbilityID, SKILL:Blue_Target_PurifyingFire_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_PurifyingFire)
			CharacterAddSkill(_Character, Blue_Target_PurifyingFire_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_PurifyingFire_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_PurifyingFire_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_PurifyingFire_SE)
			CharacterAddSkill(_Character, Blue_Target_PurifyingFire)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Supernova
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Supernova)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Supernova)
			CharacterAddSkill(_Character, Blue_Shout_Supernova_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Supernova_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Supernova_SE)
			CharacterAddSkill(_Character, Blue_Shout_Supernova)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_SpontaneousCombustion
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_SpontaneousCombustion)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_SpontaneousCombustion)
			CharacterAddSkill(_Character, Blue_Target_SpontaneousCombustion_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_SpontaneousCombustion_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_SpontaneousCombustion_SE)
			CharacterAddSkill(_Character, Blue_Target_SpontaneousCombustion)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_TerribleFlame
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_TerribleFlame)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_TerribleFlame)
			CharacterAddSkill(_Character, Blue_Target_TerribleFlame_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_TerribleFlame_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_TerribleFlame_SE)
			CharacterAddSkill(_Character, Blue_Target_TerribleFlame)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_InfectiousFlame
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_InfectiousFlame)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_InfectiousFlame)
			CharacterAddSkill(_Character, Blue_Projectile_InfectiousFlame_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_InfectiousFlame_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_InfectiousFlame_SE)
			CharacterAddSkill(_Character, Blue_Projectile_InfectiousFlame)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_FireWhip
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip)
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FireWhip)
			CharacterAddSkill(_Character, Blue_Target_FireWhip_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FireWhip_SE)
			CharacterAddSkill(_Character, Blue_Target_FireWhip)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Zone_LaserRay
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Zone_LaserRay)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Zone_LaserRay)
			CharacterAddSkill(_Character, Blue_Zone_LaserRay_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Zone_LaserRay_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Zone_LaserRay_SE)
			CharacterAddSkill(_Character, Blue_Zone_LaserRay)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Soulfire
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Soulfire)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Soulfire)
			CharacterAddSkill(_Character, Blue_Target_Soulfire_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Soulfire_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Soulfire_SE)
			CharacterAddSkill(_Character, Blue_Target_Soulfire)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


	//Blue_ProjectileStrike_MeteorShower
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_MeteorShower)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_MeteorShower)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_MeteorShower_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_MeteorShower_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_ProjectileStrike_MeteorShower_SE)
			CharacterAddSkill(_Character, Blue_ProjectileStrike_MeteorShower)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF



EVENT Blue_Ranger_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Ranger_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_FirstAid
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_FirstAid)
		IsEqual(_AbilityID, SKILL:Blue_Target_FirstAid_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FirstAid)
			CharacterAddSkill(_Character, Blue_Target_FirstAid_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_FirstAid_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_FirstAid_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_FirstAid_SE)
			CharacterAddSkill(_Character, Blue_Target_FirstAid)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_Ricochet
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Ricochet)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Ricochet_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Ricochet)
			CharacterAddSkill(_Character, Blue_Projectile_Ricochet_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Ricochet_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Ricochet_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Ricochet_SE)
			CharacterAddSkill(_Character, Blue_Projectile_Ricochet)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_PinningStance
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PinningStance)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_PinningStance)
			CharacterAddSkill(_Character, Blue_Shout_PinningStance_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PinningStance_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_PinningStance_SE)
			CharacterAddSkill(_Character, Blue_Shout_PinningStance)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Antidote
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Antidote)
		IsEqual(_AbilityID, SKILL:Blue_Target_Antidote_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Antidote)
			CharacterAddSkill(_Character, Blue_Target_Antidote_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Antidote_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Antidote_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Antidote_SE)
			CharacterAddSkill(_Character, Blue_Target_Antidote)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_GlitterDust
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_GlitterDust)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_GlitterDust)
			CharacterAddSkill(_Character, Blue_Projectile_GlitterDust_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_GlitterDust_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_GlitterDust_SE)
			CharacterAddSkill(_Character, Blue_Projectile_GlitterDust)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_PrecisionStance
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PrecisionStance)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_PrecisionStance)
			CharacterAddSkill(_Character, Blue_Shout_PrecisionStance_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PrecisionStance_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_PrecisionStance_SE)
			CharacterAddSkill(_Character, Blue_Shout_PrecisionStance)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_BullseyeStance
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_BullseyeStance)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_BullseyeStance)
			CharacterAddSkill(_Character, Blue_Shout_BullseyeStance_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_BullseyeStance_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_BullseyeStance_SE)
			CharacterAddSkill(_Character, Blue_Shout_BullseyeStance)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_Skyshot
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot)
			CharacterAddSkill(_Character, Blue_Projectile_Skyshot_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot_SE)
			CharacterAddSkill(_Character, Blue_Projectile_Skyshot)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_Barrage
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Barrage)
			CharacterAddSkill(_Character, Blue_Projectile_Barrage_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Barrage_SE)
			CharacterAddSkill(_Character, Blue_Projectile_Barrage)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_PowerStance
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PowerStance)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_PowerStance)
			CharacterAddSkill(_Character, Blue_Shout_PowerStance_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PowerStance_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_PowerStance_SE)
			CharacterAddSkill(_Character, Blue_Shout_PowerStance)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_BoundingBlow
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BoundingBlow)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_BoundingBlow)
			CharacterAddSkill(_Character, Blue_Projectile_BoundingBlow_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BoundingBlow_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_BoundingBlow_SE)
			CharacterAddSkill(_Character, Blue_Projectile_BoundingBlow)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_MarksmansFang
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MarksmansFang)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MarksmansFang_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_MarksmansFang)
			CharacterAddSkill(_Character, Blue_Projectile_MarksmansFang_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MarksmansFang_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MarksmansFang_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_MarksmansFang_SE)
			CharacterAddSkill(_Character, Blue_Projectile_MarksmansFang)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_BallisticShot
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BallisticShot)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BallisticShot_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_BallisticShot)
			CharacterAddSkill(_Character, Blue_Projectile_BallisticShot_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BallisticShot_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BallisticShot_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_BallisticShot_SE)
			CharacterAddSkill(_Character, Blue_Projectile_BallisticShot)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Dome_ReactiveShot
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Dome_ReactiveShot)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Dome_ReactiveShot)
			CharacterAddSkill(_Character, Blue_Dome_ReactiveShot_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Dome_ReactiveShot_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Dome_ReactiveShot_SE)
			CharacterAddSkill(_Character, Blue_Dome_ReactiveShot)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_Fusillade
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fusillade)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Fusillade)
			CharacterAddSkill(_Character, Blue_Projectile_Fusillade_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fusillade_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Fusillade_SE)
			CharacterAddSkill(_Character, Blue_Projectile_Fusillade)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_ArrowheadStance
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ArrowheadStance)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ArrowheadStance)
			CharacterAddSkill(_Character, Blue_Shout_ArrowheadStance_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_ArrowheadStance_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_ArrowheadStance_SE)
			CharacterAddSkill(_Character, Blue_Shout_ArrowheadStance)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF



EVENT Blue_Rogue_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Rogue_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_Disarm
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disarm)
		IsEqual(_AbilityID, SKILL:Blue_Target_Disarm_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Disarm)
			CharacterAddSkill(_Character, Blue_Target_Disarm_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disarm_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Disarm_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Disarm_SE)
			CharacterAddSkill(_Character, Blue_Target_Disarm)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Multistrike_Backlash
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Multistrike_Backlash)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Multistrike_Backlash)
			CharacterAddSkill(_Character, Blue_Multistrike_Backlash_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Multistrike_Backlash_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Multistrike_Backlash_SE)
			CharacterAddSkill(_Character, Blue_Multistrike_Backlash)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_ThrowingKnives
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives)
			CharacterAddSkill(_Character, Blue_Projectile_ThrowingKnives_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives_SE)
			CharacterAddSkill(_Character, Blue_Projectile_ThrowingKnives)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_Chloroform
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Chloroform)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Chloroform_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Chloroform)
			CharacterAddSkill(_Character, Blue_Projectile_Chloroform_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Chloroform_SE)
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Chloroform_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_Chloroform_SE)
			CharacterAddSkill(_Character, Blue_Projectile_Chloroform)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_LightFeet
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_LightFeet)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_LightFeet)
			CharacterAddSkill(_Character, Blue_Shout_LightFeet_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_LightFeet_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_LightFeet_SE)
			CharacterAddSkill(_Character, Blue_Shout_LightFeet)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_SawtoothKnife
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_SawtoothKnife)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_SawtoothKnife)
			CharacterAddSkill(_Character, Blue_Target_SawtoothKnife_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_SawtoothKnife_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_SawtoothKnife_SE)
			CharacterAddSkill(_Character, Blue_Target_SawtoothKnife)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Lurk
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Lurk)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Lurk)
			CharacterAddSkill(_Character, Blue_Shout_Lurk_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Lurk_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Lurk_SE)
			CharacterAddSkill(_Character, Blue_Shout_Lurk)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Adrenaline
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Adrenaline)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Adrenaline)
			CharacterAddSkill(_Character, Blue_Shout_Adrenaline_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Adrenaline_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Adrenaline_SE)
			CharacterAddSkill(_Character, Blue_Shout_Adrenaline)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Jump_CloakAndDagger
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Jump_CloakAndDagger)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Jump_CloakAndDagger)
			CharacterAddSkill(_Character, Blue_Jump_CloakAndDagger_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Jump_CloakAndDagger_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Jump_CloakAndDagger_SE)
			CharacterAddSkill(_Character, Blue_Jump_CloakAndDagger)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_CorruptedBlade
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_CorruptedBlade)
		IsEqual(_AbilityID, SKILL:Blue_Target_CorruptedBlade_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_CorruptedBlade)
			CharacterAddSkill(_Character, Blue_Target_CorruptedBlade_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_CorruptedBlade_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_CorruptedBlade_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_CorruptedBlade_SE)
			CharacterAddSkill(_Character, Blue_Target_CorruptedBlade)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Cruelty
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cruelty)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Cruelty)
			CharacterAddSkill(_Character, Blue_Target_Cruelty_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cruelty_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Cruelty_SE)
			CharacterAddSkill(_Character, Blue_Target_Cruelty)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_RupturedTendons
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_RupturedTendons)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_RupturedTendons)
			CharacterAddSkill(_Character, Blue_Target_RupturedTendons_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_RupturedTendons_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_RupturedTendons_SE)
			CharacterAddSkill(_Character, Blue_Target_RupturedTendons)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_GhostForm
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_GhostForm)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_GhostForm)
			CharacterAddSkill(_Character, Blue_Shout_GhostForm_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_GhostForm_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_GhostForm_SE)
			CharacterAddSkill(_Character, Blue_Shout_GhostForm)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_DaggersDrawn
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_DaggersDrawn)
		IsEqual(_AbilityID, SKILL:Blue_Target_DaggersDrawn_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DaggersDrawn)
			CharacterAddSkill(_Character, Blue_Target_DaggersDrawn_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_DaggersDrawn_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_DaggersDrawn_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DaggersDrawn_SE)
			CharacterAddSkill(_Character, Blue_Target_DaggersDrawn)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_Premeditate
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Premeditate)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Premeditate)
			CharacterAddSkill(_Character, Blue_Shout_Premeditate_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Premeditate_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_Premeditate_SE)
			CharacterAddSkill(_Character, Blue_Shout_Premeditate)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Bladestorm
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Bladestorm)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Bladestorm)
			CharacterAddSkill(_Character, Blue_Target_Bladestorm_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Bladestorm_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Bladestorm_SE)
			CharacterAddSkill(_Character, Blue_Target_Bladestorm)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


EVENT Blue_Witchcraft_Activate_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
	INT:_CounterMax
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	FIXEDSTRING:_Text
	STRING:_Str
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Witchcraft_Activate_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF
	IF "c1"
		GetVar(_CounterMax, _Character, "SourceEmpoweredCounterMax")
	THEN
	ENDIF
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF



	//Blue_Target_Brainrot
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Brainrot)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Brainrot)
			CharacterAddSkill(_Character, Blue_Target_Brainrot_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Brainrot_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Brainrot_SE)
			CharacterAddSkill(_Character, Blue_Target_Brainrot)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Heartseeker
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Heartseeker)
		IsEqual(_AbilityID, SKILL:Blue_Target_Heartseeker_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Heartseeker)
			CharacterAddSkill(_Character, Blue_Target_Heartseeker_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Heartseeker_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Heartseeker_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Heartseeker_SE)
			CharacterAddSkill(_Character, Blue_Target_Heartseeker)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_MosquitoSwarm
	IF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm)
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_C3)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm)
			CharacterAddSkill(_Character, Blue_Target_MosquitoSwarm_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2|c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_SE_C2)
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_SE_C3)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm_SE)
			CharacterAddSkill(_Character, Blue_Target_MosquitoSwarm)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Malediction
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Malediction)
		IsEqual(_AbilityID, SKILL:Blue_Target_Malediction_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Malediction)
			CharacterAddSkill(_Character, Blue_Target_Malediction_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Malediction_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Malediction_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Malediction_SE)
			CharacterAddSkill(_Character, Blue_Target_Malediction)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Shout_VampiricAura
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_VampiricAura)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_VampiricAura)
			CharacterAddSkill(_Character, Blue_Shout_VampiricAura_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_VampiricAura_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Shout_VampiricAura_SE)
			CharacterAddSkill(_Character, Blue_Shout_VampiricAura)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_LowerResistances
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_LowerResistances)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_LowerResistances)
			CharacterAddSkill(_Character, Blue_Target_LowerResistances_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_LowerResistances_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_LowerResistances_SE)
			CharacterAddSkill(_Character, Blue_Target_LowerResistances)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_DecayingTouch
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_DecayingTouch)
		IsEqual(_AbilityID, SKILL:Blue_Target_DecayingTouch_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DecayingTouch)
			CharacterAddSkill(_Character, Blue_Target_DecayingTouch_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_DecayingTouch_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_DecayingTouch_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DecayingTouch_SE)
			CharacterAddSkill(_Character, Blue_Target_DecayingTouch)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_DeathWish
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_DeathWish)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DeathWish)
			CharacterAddSkill(_Character, Blue_Target_DeathWish_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_DeathWish_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DeathWish_SE)
			CharacterAddSkill(_Character, Blue_Target_DeathWish)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Remorse
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Remorse)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Remorse)
			CharacterAddSkill(_Character, Blue_Target_Remorse_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Remorse_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Remorse_SE)
			CharacterAddSkill(_Character, Blue_Target_Remorse)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Suggest
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Suggest)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Suggest)
			CharacterAddSkill(_Character, Blue_Target_Suggest_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Suggest_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Suggest_SE)
			CharacterAddSkill(_Character, Blue_Target_Suggest)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_DrainWillpower
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_DrainWillpower)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DrainWillpower)
			CharacterAddSkill(_Character, Blue_Target_DrainWillpower_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_DrainWillpower_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_DrainWillpower_SE)
			CharacterAddSkill(_Character, Blue_Target_DrainWillpower)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Despair
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Despair)
		IsEqual(_AbilityID, SKILL:Blue_Target_Despair_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-2)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Despair)
			CharacterAddSkill(_Character, Blue_Target_Despair_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:2)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Despair_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Despair_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Despair_SE)
			CharacterAddSkill(_Character, Blue_Target_Despair)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Necroplague
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Necroplague)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Necroplague)
			CharacterAddSkill(_Character, Blue_Target_Necroplague_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Necroplague_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Necroplague_SE)
			CharacterAddSkill(_Character, Blue_Target_Necroplague)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Projectile_MonaxVitae
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MonaxVitae)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_MonaxVitae)
			CharacterAddSkill(_Character, Blue_Projectile_MonaxVitae_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MonaxVitae_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Projectile_MonaxVitae_SE)
			CharacterAddSkill(_Character, Blue_Projectile_MonaxVitae)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Dome_BlightCurse
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Dome_BlightCurse)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Dome_BlightCurse)
			CharacterAddSkill(_Character, Blue_Dome_BlightCurse_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Dome_BlightCurse_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Dome_BlightCurse_SE)
			CharacterAddSkill(_Character, Blue_Dome_BlightCurse)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_SoulSap
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_SoulSap)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_SoulSap)
			CharacterAddSkill(_Character, Blue_Target_SoulSap_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_SoulSap_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_SoulSap_SE)
			CharacterAddSkill(_Character, Blue_Target_SoulSap)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Curse
	IF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Curse)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-3)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Curse)
			CharacterAddSkill(_Character, Blue_Target_Curse_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:3)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Curse_SE)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Curse_SE)
			CharacterAddSkill(_Character, Blue_Target_Curse)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF

	//Blue_Target_Cannibalize
	IF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cannibalize)
		IsEqual(_AbilityID, SKILL:Blue_Target_Cannibalize_C2)
	THEN
		IF "c1&!c2&c3"
			CharacterGetSourcePoints(_Character, _AbilityCheck)
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			CharacterAddSourcePoints(_Character, INT:-1)
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Cannibalize)
			CharacterAddSkill(_Character, Blue_Target_Cannibalize_SE)
			Add(_Counter, INT:1)
			Print(_Str, "Skill empowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source to empower", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "!c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ELIF "c1&!c2"
			IsLessThen(_AbilityCheck, INT:1)
			IsTagged(_Character, "Blue_Empowering")
		THEN
			Print(_Str, "Not enough Source, not enough Empowering Slots: [1]/[2] used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
		ClearTag(_Character, "Blue_Empowering_RemoveOnly")
		ClearTag(_Character, "Blue_Empowering")
	ELIF "c1|c2"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cannibalize_SE)
		IsEqual(_AbilityID, SKILL:Blue_Target_Cannibalize_SE_C2)
	THEN
		IF "c1"
			IsTagged(_Character, "Blue_Empowering_RemoveOnly")
		THEN
			ClearTag(_Character, "Blue_Empowering_RemoveOnly")
			ClearTag(_Character, "Blue_Empowering")
			CharacterRemoveSkill(_Character, Blue_Target_Cannibalize_SE)
			CharacterAddSkill(_Character, Blue_Target_Cannibalize)
			Subtract(_Counter, INT:1)
			Print(_Str, "Skill unempowered, [1]/[2] Empowering Slots used", _Counter, _CounterMax)
			Cast(_Text, _Str)
			StatusText(_Character, _Text)
		ENDIF
	ENDIF


EVENT Blue_Aerotheurge_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Aerotheurge_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Projectile_ShockingTouch
	//Blue_Target_FavourableWind
	//Blue_Projectile_ElectricDischarge
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ElectricDischarge_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ElectricDischarge_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ElectricDischarge_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ElectricDischarge_SE_C3)
	ENDIF
	//Blue_MultiStrike_Thunderjump
	//Blue_Shout_Cyclone
	//Blue_Teleportation_Teleport
	//Blue_Target_PressureSpike
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_PressureSpike)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_PressureSpike_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_PressureSpike_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_PressureSpike_SE_C2)
	ENDIF
	//Blue_ProjectileStrike_DazingBolt
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_DazingBolt)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_ProjectileStrike_DazingBolt_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_DazingBolt_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_ProjectileStrike_DazingBolt_SE_C2)
	ENDIF
	//Blue_Target_MakeInvisible
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_MakeInvisible)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Target_MakeInvisible_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_MakeInvisible_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Target_MakeInvisible_SE_C2)
	ENDIF
	//Blue_Teleportation_Netherswap
	//Blue_Target_RendingGale
	//Blue_Tornado_Tornado
	//Blue_Projectile_Superconductor
	//Blue_Projectile_ChainLightning
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ChainLightning)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ChainLightning_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ChainLightning_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ChainLightning_SE_C2)
	ENDIF
	//Blue_Target_ProtectionBubble
	//Blue_Storm_Thunderstorm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF

EVENT Blue_Berserker_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Berserker_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF


	//Blue_Shout_Indomitable
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF

	//Blue_Shout_MartialStance
	//Blue_Shout_WrathStance
	//Blue_Shout_CleavingStance
	//Blue_Cone_Cleave
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Cone_Cleave)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Cone_Cleave_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Cone_Cleave_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Cone_Cleave_SE_C2)
	ENDIF
	//Blue_Shout_PumpingIron
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_PumpingIron_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_PumpingIron_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_PumpingIron_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_SE_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_PumpingIron_SE_C3)
	ENDIF
	//Blue_Shout_Anticipation
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Anticipation)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_Anticipation_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Anticipation_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_Anticipation_SE_C2)
	ENDIF
	//Blue_Teleportation_Throw
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Throw)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Teleportation_Throw_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Throw_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Teleportation_Throw_SE_C2)
	ENDIF
	//Blue_Shout_Enrage
	//Blue_Shout_Whirlwind
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Whirlwind)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_Whirlwind_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Whirlwind_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_Whirlwind_SE_C2)
	ENDIF
	//Blue_Shout_Ironhide
	//Blue_Projectile_Grapple
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Grapple_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Grapple_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Grapple_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_SE_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Grapple_SE_C3)
	ENDIF
	//Blue_Target_Disembowl
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Disembowl_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Disembowl_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Disembowl_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_SE_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Disembowl_SE_C3)
	ENDIF
	//Blue_Shout_ThickOfTheFight
	//Blue_Target_Onslaught
	//Blue_Jump_Leap
	//Blue_Target_Crush
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF

EVENT Blue_Divine_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Divine_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF


	//Blue_Dome_Consecrate
	//Blue_Target_Safeguard
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Safeguard)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Safeguard_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Safeguard_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Safeguard_SE_C2)
	ENDIF
	//Blue_Target_Cleanse
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Cleanse_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Cleanse_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Cleanse_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Cleanse_SE_C3)
	ENDIF
	//Blue_Summon_Illuminate
	//Blue_Teleportation_Revivify
	//Blue_Target_Smite
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Smite_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Smite_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Smite_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_SE_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Smite_SE_C3)
	ENDIF
	//Blue_Target_Bless
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Bless)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Bless_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Bless_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Bless_SE_C2)
	ENDIF
	//Blue_Target_Intertwine
	//Blue_Zone_DrainArcana
	//Blue_Target_Fracture
	//Blue_Target_Condemn
	//Blue_Target_DivineArmor
	//Blue_Shout_TwistFate
	//Blue_Target_Restore
	//Blue_Target_Crucify
	//Blue_Shout_DivineFavor
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF

EVENT Blue_Geomancer_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Geomancer_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Projectile_AcidDart
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_AcidDart_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_AcidDart_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_AcidDart_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_AcidDart_SE_C3)
	ENDIF
	//Blue_Projectile_OilBlob
	//Blue_Projectile_ThrowDust
	//Blue_Projectile_FossilStrike
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FossilStrike)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_FossilStrike_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FossilStrike_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_FossilStrike_SE_C2)
	ENDIF
	//Blue_Cone_Tremor
	//Blue_Rain_CreateOil
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Rain_CreateOil_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Rain_CreateOil_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Rain_CreateOil_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_SE_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Rain_CreateOil_SE_C3)
	ENDIF
	//Blue_Target_Fortify
	//Blue_Target_Vineyard
	//Blue_Target_Impalement
	//Blue_Cone_PetrifyingGaze
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Cone_PetrifyingGaze)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Cone_PetrifyingGaze_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Cone_PetrifyingGaze_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Cone_PetrifyingGaze_SE_C2)
	ENDIF
	//Blue_Wall_Living
	//Blue_Projectile_AcidSpores
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidSpores)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_AcidSpores_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidSpores_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_AcidSpores_SE_C2)
	ENDIF
	//Blue_Shout_StalwartDefense
	//Blue_Quake_Earthquake
	//Blue_ProjectileStrike_Devastate
	//Blue_Target_SandCoffin
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF

EVENT Blue_Hydrosophist_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Hydrosophist_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_FreezingTouch
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FreezingTouch_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FreezingTouch_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FreezingTouch_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FreezingTouch_SE_C3)
	ENDIF
	//Blue_Target_Regenerate
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Regenerate_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Regenerate_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Regenerate_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_SE_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Regenerate_SE_C3)
	ENDIF
	//Blue_ProjectileStrike_Deluge
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Deluge)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_ProjectileStrike_Deluge_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Deluge_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_ProjectileStrike_Deluge_SE_C2)
	ENDIF
	//Blue_Rain_Rain
	//Blue_Projectile_IceFan
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_IceFan_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_IceFan_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_IceFan_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_SE_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_IceFan_SE_C3)
	ENDIF
	//Blue_Target_LethalTorrent
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_LethalTorrent)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Target_LethalTorrent_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_LethalTorrent_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Target_LethalTorrent_SE_C2)
	ENDIF
	//Blue_Target_ArmorOfFrost
	//Blue_Shout_GlobalCooling
	//Blue_Target_WinterBlast
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_WinterBlast)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_WinterBlast_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_WinterBlast_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_WinterBlast_SE_C2)
	ENDIF
	//Blue_Shout_Icebreaker
	//Blue_Summon_HorridWilting
	//Blue_Target_ColdSnap
	//Blue_Projectile_HealingRitual
	//Blue_ProjectileStrike_Hailstorm
	//Blue_Target_MassHeal
	//Blue_Rain_Blizzard
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF

EVENT Blue_Knight_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Knight_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_HelpingHand
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_HelpingHand)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_HelpingHand_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_HelpingHand_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_HelpingHand_SE_C2)
	ENDIF
	//Blue_Target_WeakeningStrike
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Target_WeakeningStrike_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_WeakeningStrike_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Target_WeakeningStrike_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_WeakeningStrike_SE_C3)
	ENDIF
	//Blue_Shout_Hold
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Hold)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_Hold_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Hold_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Shout_Hold_SE_C2)
	ENDIF
	//Blue_Rush_BatteringRam
	//Blue_Target_CureWounds
	//Blue_Projectile_BouncingShield
	//Blue_Target_Taunt
	//Blue_Target_CripplingBlow
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Target_CripplingBlow_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_CripplingBlow_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Target_CripplingBlow_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_SE_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_CripplingBlow_SE_C3)
	ENDIF
	//Blue_Shout_ElementalBastion
	//Blue_Shout_ImpenetrableBarrier
	//Blue_Shout_DeflectiveShield
	//Blue_Shout_GuardianAngel
	//Blue_Target_Stifle
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Stifle)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Stifle_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Stifle_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Stifle_SE_C2)
	ENDIF
	//Blue_Target_Sunder
	//Blue_Target_ProtectKnight
	//Blue_Shout_ShacklesOfPain
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF


EVENT Blue_Pyrokinetic_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Pyrokinetic_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_PeaceOfMind
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_PeaceOfMind)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_PeaceOfMind_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_PeaceOfMind_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_PeaceOfMind_SE_C2)
	ENDIF
	//Blue_Projectile_FlamingDaggers
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_FlamingDaggers_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_FlamingDaggers_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_FlamingDaggers_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_FlamingDaggers_SE_C3)
	ENDIF
	//Blue_Target_HeatMetal
	//Blue_Target_Haste
	//Blue_Projectile_Fireball
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fireball)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Fireball_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fireball_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Fireball_SE_C2)
	ENDIF
	//Blue_Target_FlamingCrescendo
	//Blue_Target_PurifyingFire
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_PurifyingFire)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_PurifyingFire_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_PurifyingFire_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_PurifyingFire_SE_C2)
	ENDIF
	//Blue_Shout_Supernova
	//Blue_Target_SpontaneousCombustion
	//Blue_Target_TerribleFlame
	//Blue_Projectile_InfectiousFlame
	//Blue_Target_FireWhip
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FireWhip_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FireWhip_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FireWhip_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_SE_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FireWhip_SE_C3)
	ENDIF
	//Blue_Zone_LaserRay
	//Blue_Target_Soulfire
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF

	//Blue_ProjectileStrike_MeteorShower
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF


EVENT Blue_Ranger_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Ranger_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_FirstAid
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FirstAid)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FirstAid_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_FirstAid_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_FirstAid_SE_C2)
	ENDIF
	//Blue_Projectile_Ricochet
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Ricochet)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Ricochet_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Ricochet_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Ricochet_SE_C2)
	ENDIF
	//Blue_Shout_PinningStance
	//Blue_Target_Antidote
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Antidote)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Antidote_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Antidote_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Antidote_SE_C2)
	ENDIF
	//Blue_Projectile_GlitterDust
	//Blue_Shout_PrecisionStance
	//Blue_Shout_BullseyeStance
	//Blue_Projectile_Skyshot
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Skyshot_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Skyshot_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Skyshot_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_SE_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Skyshot_SE_C3)
	ENDIF
	//Blue_Projectile_Barrage
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Barrage_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Barrage_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Barrage_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_SE_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Barrage_SE_C3)
	ENDIF
	//Blue_Shout_PowerStance
	//Blue_Projectile_BoundingBlow
	//Blue_Projectile_MarksmansFang
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MarksmansFang)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_MarksmansFang_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MarksmansFang_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_MarksmansFang_SE_C2)
	ENDIF
	//Blue_Projectile_BallisticShot
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BallisticShot)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_BallisticShot_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BallisticShot_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_BallisticShot_SE_C2)
	ENDIF
	//Blue_Dome_ReactiveShot
	//Blue_Projectile_Fusillade
	//Blue_Shout_ArrowheadStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF


EVENT Blue_Rogue_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Rogue_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF

	//Blue_Target_Disarm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disarm)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Disarm_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disarm_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Disarm_SE_C2)
	ENDIF
	//Blue_Multistrike_Backlash
	//Blue_Projectile_ThrowingKnives
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ThrowingKnives_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ThrowingKnives_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ThrowingKnives_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_SE_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_ThrowingKnives_SE_C3)
	ENDIF
	//Blue_Projectile_Chloroform
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Chloroform)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Chloroform_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Chloroform_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Projectile_Chloroform_SE_C2)
	ENDIF
	//Blue_Shout_LightFeet
	//Blue_Target_SawtoothKnife
	//Blue_Shout_Lurk
	//Blue_Shout_Adrenaline
	//Blue_Jump_CloakAndDagger
	//Blue_Target_CorruptedBlade
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_CorruptedBlade)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Target_CorruptedBlade_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_CorruptedBlade_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Target_CorruptedBlade_SE_C2)
	ENDIF
	//Blue_Target_Cruelty
	//Blue_Target_RupturedTendons
	//Blue_Shout_GhostForm
	//Blue_Target_DaggersDrawn
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_DaggersDrawn)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Target_DaggersDrawn_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_DaggersDrawn_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterAddSkill(_Character, Blue_Target_DaggersDrawn_SE_C2)
	ENDIF
	//Blue_Shout_Premeditate
	//Blue_Target_Bladestorm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF

EVENT Blue_Witchcraft_Activate
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Witchcraft_Activate")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF



	//Blue_Target_Brainrot
	//Blue_Target_Heartseeker
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Heartseeker)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Heartseeker_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Heartseeker_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Heartseeker_SE_C2)
	ENDIF
	//Blue_Target_MosquitoSwarm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Target_MosquitoSwarm_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_MosquitoSwarm_C3)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterAddSkill(_Character, Blue_Target_MosquitoSwarm_SE_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterAddSkill(_Character, Blue_Target_MosquitoSwarm_SE_C3)
	ENDIF
	//Blue_Target_Malediction
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Malediction)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Malediction_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Malediction_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Malediction_SE_C2)
	ENDIF
	//Blue_Shout_VampiricAura
	//Blue_Target_LowerResistances
	//Blue_Target_DecayingTouch
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_DecayingTouch)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_DecayingTouch_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_DecayingTouch_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_DecayingTouch_SE_C2)
	ENDIF
	//Blue_Target_DeathWish
	//Blue_Target_Remorse
	//Blue_Target_Suggest
	//Blue_Target_DrainWillpower
	//Blue_Target_Despair
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Despair)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Despair_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Despair_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Despair_SE_C2)
	ENDIF
	//Blue_Target_Necroplague
	//Blue_Projectile_MonaxVitae
	//Blue_Dome_BlightCurse
	//Blue_Target_SoulSap
	//Blue_Target_Curse
	//Blue_Target_Cannibalize
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cannibalize)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Cannibalize_C2)
	ELIF "c1&!c2&!c3"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cannibalize_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterAddSkill(_Character, Blue_Target_Cannibalize_SE_C2)
	ENDIF

EVENT Blue_Aerotheurge_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Aerotheurge_Correcter")
ACTIONS

	//Blue_Projectile_ShockingTouch
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_ShockingTouch)
		CharacterHasSkill(_Character, Blue_Projectile_ShockingTouch_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ShockingTouch)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ShockingTouch)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ShockingTouch)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ShockingTouch_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ShockingTouch_SE)
	ENDIF

	//Blue_Target_FavourableWind
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_FavourableWind)
		CharacterHasSkill(_Character, Blue_Target_FavourableWind_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FavourableWind)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FavourableWind)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FavourableWind)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FavourableWind_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FavourableWind_SE)
	ENDIF

	//Blue_Projectile_ElectricDischarge
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_ElectricDischarge)
		CharacterHasSkill(_Character, Blue_Projectile_ElectricDischarge_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ElectricDischarge)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ElectricDischarge)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ElectricDischarge_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ElectricDischarge)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ElectricDischarge_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ElectricDischarge_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ElectricDischarge_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ElectricDischarge_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ElectricDischarge_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ElectricDischarge_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ElectricDischarge_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_MultiStrike_Thunderjump
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_MultiStrike_Thunderjump)
		CharacterHasSkill(_Character, Blue_MultiStrike_Thunderjump_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_MultiStrike_Thunderjump)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_MultiStrike_Thunderjump)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_MultiStrike_Thunderjump)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_MultiStrike_Thunderjump_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_MultiStrike_Thunderjump_SE)
	ENDIF

	//Blue_Shout_Cyclone
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Cyclone)
		CharacterHasSkill(_Character, Blue_Shout_Cyclone_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Cyclone)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Cyclone)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Cyclone)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Cyclone_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Cyclone_SE)
	ENDIF

	//Blue_Teleportation_Teleport
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Teleportation_Teleport)
		CharacterHasSkill(_Character, Blue_Teleportation_Teleport_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Teleportation_Teleport)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Teleportation_Teleport)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Teleport)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Teleportation_Teleport_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Teleport_SE)
	ENDIF

	//Blue_Target_PressureSpike
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_PressureSpike)
		CharacterHasSkill(_Character, Blue_Target_PressureSpike_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PressureSpike)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_PressureSpike)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PressureSpike)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_PressureSpike_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PressureSpike_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_PressureSpike)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PressureSpike_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_PressureSpike_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PressureSpike_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_ProjectileStrike_DazingBolt
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_DazingBolt)
		CharacterHasSkill(_Character, Blue_ProjectileStrike_DazingBolt_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_DazingBolt)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_DazingBolt)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_DazingBolt)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_DazingBolt_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_DazingBolt_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_ProjectileStrike_DazingBolt)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_DazingBolt_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_ProjectileStrike_DazingBolt_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_DazingBolt_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_MakeInvisible
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_MakeInvisible)
		CharacterHasSkill(_Character, Blue_Target_MakeInvisible_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MakeInvisible)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_MakeInvisible)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MakeInvisible)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_MakeInvisible_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MakeInvisible_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_MakeInvisible)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MakeInvisible_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_MakeInvisible_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MakeInvisible_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Teleportation_Netherswap
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Teleportation_Netherswap)
		CharacterHasSkill(_Character, Blue_Teleportation_Netherswap_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Teleportation_Netherswap)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Teleportation_Netherswap)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Netherswap)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Teleportation_Netherswap_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Netherswap_SE)
	ENDIF

	//Blue_Target_RendingGale
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_RendingGale)
		CharacterHasSkill(_Character, Blue_Target_RendingGale_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_RendingGale)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_RendingGale)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_RendingGale)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_RendingGale_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_RendingGale_SE)
	ENDIF

	//Blue_Tornado_Tornado
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Tornado_Tornado)
		CharacterHasSkill(_Character, Blue_Tornado_Tornado_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Tornado_Tornado)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Tornado_Tornado)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Tornado_Tornado)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Tornado_Tornado_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Tornado_Tornado_SE)
	ENDIF

	//Blue_Projectile_Superconductor
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_Superconductor)
		CharacterHasSkill(_Character, Blue_Projectile_Superconductor_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Superconductor)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Superconductor)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Superconductor)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Superconductor_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Superconductor_SE)
	ENDIF

	//Blue_Projectile_ChainLightning
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_ChainLightning)
		CharacterHasSkill(_Character, Blue_Projectile_ChainLightning_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ChainLightning)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ChainLightning)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ChainLightning)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ChainLightning_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ChainLightning_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ChainLightning)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ChainLightning_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ChainLightning_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ChainLightning_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_ProtectionBubble
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_ProtectionBubble)
		CharacterHasSkill(_Character, Blue_Target_ProtectionBubble_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_ProtectionBubble)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_ProtectionBubble)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_ProtectionBubble)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_ProtectionBubble_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_ProtectionBubble_SE)
	ENDIF

	//Blue_Storm_Thunderstorm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, AirSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, AirSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Storm_Thunderstorm)
		CharacterHasSkill(_Character, Blue_Storm_Thunderstorm_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Storm_Thunderstorm)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Storm_Thunderstorm)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Storm_Thunderstorm)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Storm_Thunderstorm_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Storm_Thunderstorm_SE)
	ENDIF


EVENT Blue_Berserker_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Berserker_Correcter")
ACTIONS


	//Blue_Shout_Indomitable
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Indomitable)
		CharacterHasSkill(_Character, Blue_Shout_Indomitable_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Indomitable)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Indomitable)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Indomitable)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Indomitable_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Indomitable_SE)
	ENDIF


	//Blue_Shout_MartialStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_MartialStance)
		CharacterHasSkill(_Character, Blue_Shout_MartialStance_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_MartialStance)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_MartialStance)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_MartialStance)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_MartialStance_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_MartialStance_SE)
	ENDIF

	//Blue_Shout_WrathStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_WrathStance)
		CharacterHasSkill(_Character, Blue_Shout_WrathStance_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_WrathStance)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_WrathStance)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_WrathStance)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_WrathStance_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_WrathStance_SE)
	ENDIF

	//Blue_Shout_CleavingStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_CleavingStance)
		CharacterHasSkill(_Character, Blue_Shout_CleavingStance_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_CleavingStance)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_CleavingStance)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_CleavingStance)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_CleavingStance_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_CleavingStance_SE)
	ENDIF

	//Blue_Cone_Cleave
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Cone_Cleave)
		CharacterHasSkill(_Character, Blue_Cone_Cleave_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Cone_Cleave)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Cone_Cleave)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_Cleave)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Cone_Cleave_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_Cleave_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Cone_Cleave)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Cone_Cleave_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Cone_Cleave_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Cone_Cleave_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_PumpingIron
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_PumpingIron)
		CharacterHasSkill(_Character, Blue_Shout_PumpingIron_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_PumpingIron)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_PumpingIron)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_PumpingIron_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_PumpingIron)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_PumpingIron_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_PumpingIron_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_PumpingIron_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_PumpingIron_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_PumpingIron_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_PumpingIron_SE_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_PumpingIron_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_Anticipation
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Anticipation)
		CharacterHasSkill(_Character, Blue_Shout_Anticipation_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Anticipation)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Anticipation)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Anticipation)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Anticipation_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Anticipation_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_Anticipation)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Anticipation_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_Anticipation_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Anticipation_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Teleportation_Throw
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Teleportation_Throw)
		CharacterHasSkill(_Character, Blue_Teleportation_Throw_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Teleportation_Throw)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Teleportation_Throw)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Throw)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Teleportation_Throw_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Throw_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Teleportation_Throw)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Teleportation_Throw_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Teleportation_Throw_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Teleportation_Throw_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_Enrage
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Enrage)
		CharacterHasSkill(_Character, Blue_Shout_Enrage_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Enrage)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Enrage)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Enrage)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Enrage_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Enrage_SE)
	ENDIF

	//Blue_Shout_Whirlwind
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Whirlwind)
		CharacterHasSkill(_Character, Blue_Shout_Whirlwind_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Whirlwind)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Whirlwind)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Whirlwind)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Whirlwind_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Whirlwind_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_Whirlwind)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Whirlwind_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_Whirlwind_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Whirlwind_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_Ironhide
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Ironhide)
		CharacterHasSkill(_Character, Blue_Shout_Ironhide_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Ironhide)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Ironhide)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Ironhide)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Ironhide_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Ironhide_SE)
	ENDIF

	//Blue_Projectile_Grapple
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_Grapple)
		CharacterHasSkill(_Character, Blue_Projectile_Grapple_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Grapple)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Grapple)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Grapple)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Grapple_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Grapple_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Grapple)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Grapple_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Grapple_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Grapple_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Grapple_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Grapple_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Grapple_SE_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Grapple_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Disembowl
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Disembowl)
		CharacterHasSkill(_Character, Blue_Target_Disembowl_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Disembowl)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Disembowl)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disembowl)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Disembowl_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disembowl_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Disembowl)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Disembowl_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Disembowl_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Disembowl_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Disembowl_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Disembowl_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Disembowl_SE_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Disembowl_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_ThickOfTheFight
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_ThickOfTheFight)
		CharacterHasSkill(_Character, Blue_Shout_ThickOfTheFight_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_ThickOfTheFight)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ThickOfTheFight)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ThickOfTheFight)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ThickOfTheFight_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ThickOfTheFight_SE)
	ENDIF

	//Blue_Target_Onslaught
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Onslaught)
		CharacterHasSkill(_Character, Blue_Target_Onslaught_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Onslaught)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Onslaught)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Onslaught)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Onslaught_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Onslaught_SE)
	ENDIF

	//Blue_Jump_Leap
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Jump_Leap)
		CharacterHasSkill(_Character, Blue_Jump_Leap_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Jump_Leap)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Jump_Leap)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Jump_Leap)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Jump_Leap_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Jump_Leap_SE)
	ENDIF

	//Blue_Target_Crush
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, WarriorLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, WarriorLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Crush)
		CharacterHasSkill(_Character, Blue_Target_Crush_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Crush)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Crush)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Crush)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Crush_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Crush_SE)
	ENDIF


EVENT Blue_Divine_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Divine_Correcter")
ACTIONS


	//Blue_Dome_Consecrate
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Dome_Consecrate)
		CharacterHasSkill(_Character, Blue_Dome_Consecrate_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Dome_Consecrate)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Dome_Consecrate)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Dome_Consecrate)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Dome_Consecrate_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Dome_Consecrate_SE)
	ENDIF

	//Blue_Target_Safeguard
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Safeguard)
		CharacterHasSkill(_Character, Blue_Target_Safeguard_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Safeguard)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Safeguard)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Safeguard)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Safeguard_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Safeguard_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Safeguard)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Safeguard_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Safeguard_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Safeguard_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Cleanse
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Cleanse)
		CharacterHasSkill(_Character, Blue_Target_Cleanse_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cleanse)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Cleanse)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cleanse)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Cleanse_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cleanse_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Cleanse)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cleanse_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Cleanse_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cleanse_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Cleanse_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cleanse_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Cleanse_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cleanse_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Summon_Illuminate
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Summon_Illuminate)
		CharacterHasSkill(_Character, Blue_Summon_Illuminate_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Summon_Illuminate)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Summon_Illuminate)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Summon_Illuminate)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Summon_Illuminate_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Summon_Illuminate_SE)
	ENDIF

	//Blue_Teleportation_Revivify
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Teleportation_Revivify)
		CharacterHasSkill(_Character, Blue_Teleportation_Revivify_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Teleportation_Revivify)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Teleportation_Revivify)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Revivify)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Teleportation_Revivify_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Revivify_SE)
	ENDIF

	//Blue_Target_Smite
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Smite)
		CharacterHasSkill(_Character, Blue_Target_Smite_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Smite)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Smite)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Smite)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Smite_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Smite_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Smite)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Smite_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Smite_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Smite_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Smite_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Smite_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Smite_SE_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Smite_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Bless
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Bless)
		CharacterHasSkill(_Character, Blue_Target_Bless_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Bless)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Bless)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Bless)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Bless_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Bless_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Bless)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Bless_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Bless_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Bless_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Intertwine
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Intertwine)
		CharacterHasSkill(_Character, Blue_Target_Intertwine_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Intertwine)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Intertwine)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Intertwine)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Intertwine_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Intertwine_SE)
	ENDIF

	//Blue_Zone_DrainArcana
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Zone_DrainArcana)
		CharacterHasSkill(_Character, Blue_Zone_DrainArcana_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Zone_DrainArcana)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Zone_DrainArcana)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Zone_DrainArcana)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Zone_DrainArcana_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Zone_DrainArcana_SE)
	ENDIF

	//Blue_Target_Fracture
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Fracture)
		CharacterHasSkill(_Character, Blue_Target_Fracture_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Fracture)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Fracture)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Fracture)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Fracture_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Fracture_SE)
	ENDIF

	//Blue_Target_Condemn
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Condemn)
		CharacterHasSkill(_Character, Blue_Target_Condemn_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Condemn)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Condemn)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Condemn)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Condemn_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Condemn_SE)
	ENDIF

	//Blue_Target_DivineArmor
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_DivineArmor)
		CharacterHasSkill(_Character, Blue_Target_DivineArmor_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DivineArmor)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DivineArmor)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DivineArmor)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DivineArmor_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DivineArmor_SE)
	ENDIF

	//Blue_Shout_TwistFate
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_TwistFate)
		CharacterHasSkill(_Character, Blue_Shout_TwistFate_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_TwistFate)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_TwistFate)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_TwistFate)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_TwistFate_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_TwistFate_SE)
	ENDIF

	//Blue_Target_Restore
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Restore)
		CharacterHasSkill(_Character, Blue_Target_Restore_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Restore)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Restore)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Restore)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Restore_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Restore_SE)
	ENDIF

	//Blue_Target_Crucify
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Crucify)
		CharacterHasSkill(_Character, Blue_Target_Crucify_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Crucify)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Crucify)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Crucify)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Crucify_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Crucify_SE)
	ENDIF

	//Blue_Shout_DivineFavor
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Reflection)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Reflection)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_DivineFavor)
		CharacterHasSkill(_Character, Blue_Shout_DivineFavor_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_DivineFavor)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_DivineFavor)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_DivineFavor)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_DivineFavor_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_DivineFavor_SE)
	ENDIF


EVENT Blue_Geomancer_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Geomancer_Correcter")
ACTIONS

	//Blue_Projectile_AcidDart
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_AcidDart)
		CharacterHasSkill(_Character, Blue_Projectile_AcidDart_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_AcidDart)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_AcidDart)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_AcidDart_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_AcidDart)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_AcidDart_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_AcidDart_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_AcidDart_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_AcidDart_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_AcidDart_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_AcidDart_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_AcidDart_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Projectile_OilBlob
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_OilBlob)
		CharacterHasSkill(_Character, Blue_Projectile_OilBlob_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_OilBlob)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_OilBlob)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_OilBlob)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_OilBlob_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_OilBlob_SE)
	ENDIF

	//Blue_Projectile_ThrowDust
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_ThrowDust)
		CharacterHasSkill(_Character, Blue_Projectile_ThrowDust_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ThrowDust)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ThrowDust)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowDust)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ThrowDust_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowDust_SE)
	ENDIF

	//Blue_Projectile_FossilStrike
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_FossilStrike)
		CharacterHasSkill(_Character, Blue_Projectile_FossilStrike_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_FossilStrike)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_FossilStrike)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FossilStrike)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_FossilStrike_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FossilStrike_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_FossilStrike)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_FossilStrike_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_FossilStrike_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_FossilStrike_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Cone_Tremor
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Cone_Tremor)
		CharacterHasSkill(_Character, Blue_Cone_Tremor_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Cone_Tremor)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Cone_Tremor)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_Tremor)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Cone_Tremor_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_Tremor_SE)
	ENDIF

	//Blue_Rain_CreateOil
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Rain_CreateOil)
		CharacterHasSkill(_Character, Blue_Rain_CreateOil_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Rain_CreateOil)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Rain_CreateOil)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_CreateOil)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Rain_CreateOil_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_CreateOil_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Rain_CreateOil)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Rain_CreateOil_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Rain_CreateOil_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Rain_CreateOil_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Rain_CreateOil_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Rain_CreateOil_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Rain_CreateOil_SE_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Rain_CreateOil_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Fortify
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Fortify)
		CharacterHasSkill(_Character, Blue_Target_Fortify_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Fortify)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Fortify)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Fortify)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Fortify_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Fortify_SE)
	ENDIF

	//Blue_Target_Vineyard
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Vineyard)
		CharacterHasSkill(_Character, Blue_Target_Vineyard_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Vineyard)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Vineyard)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Vineyard)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Vineyard_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Vineyard_SE)
	ENDIF

	//Blue_Target_Impalement
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Impalement)
		CharacterHasSkill(_Character, Blue_Target_Impalement_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Impalement)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Impalement)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Impalement)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Impalement_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Impalement_SE)
	ENDIF

	//Blue_Cone_PetrifyingGaze
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Cone_PetrifyingGaze)
		CharacterHasSkill(_Character, Blue_Cone_PetrifyingGaze_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Cone_PetrifyingGaze)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Cone_PetrifyingGaze)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_PetrifyingGaze)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Cone_PetrifyingGaze_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_PetrifyingGaze_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Cone_PetrifyingGaze)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Cone_PetrifyingGaze_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Cone_PetrifyingGaze_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Cone_PetrifyingGaze_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Wall_Living
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Wall_Living)
		CharacterHasSkill(_Character, Blue_Wall_Living_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Wall_Living)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Wall_Living)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Wall_Living)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Wall_Living_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Wall_Living_SE)
	ENDIF

	//Blue_Projectile_AcidSpores
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_AcidSpores)
		CharacterHasSkill(_Character, Blue_Projectile_AcidSpores_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_AcidSpores)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_AcidSpores)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidSpores)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_AcidSpores_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidSpores_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_AcidSpores)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_AcidSpores_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_AcidSpores_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_AcidSpores_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_StalwartDefense
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_StalwartDefense)
		CharacterHasSkill(_Character, Blue_Shout_StalwartDefense_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_StalwartDefense)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_StalwartDefense)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_StalwartDefense)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_StalwartDefense_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_StalwartDefense_SE)
	ENDIF

	//Blue_Quake_Earthquake
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Quake_Earthquake)
		CharacterHasSkill(_Character, Blue_Quake_Earthquake_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Quake_Earthquake)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Quake_Earthquake)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Quake_Earthquake)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Quake_Earthquake_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Quake_Earthquake_SE)
	ENDIF

	//Blue_ProjectileStrike_Devastate
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Devastate)
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Devastate_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_Devastate)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Devastate)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Devastate)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Devastate_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Devastate_SE)
	ENDIF

	//Blue_Target_SandCoffin
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, EarthSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, EarthSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_SandCoffin)
		CharacterHasSkill(_Character, Blue_Target_SandCoffin_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_SandCoffin)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_SandCoffin)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_SandCoffin)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_SandCoffin_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_SandCoffin_SE)
	ENDIF


EVENT Blue_Hydrosophist_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Hydrosophist_Correcter")
ACTIONS

	//Blue_Target_FreezingTouch
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_FreezingTouch)
		CharacterHasSkill(_Character, Blue_Target_FreezingTouch_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FreezingTouch)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FreezingTouch)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FreezingTouch_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FreezingTouch)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FreezingTouch_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FreezingTouch_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FreezingTouch_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FreezingTouch_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FreezingTouch_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FreezingTouch_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FreezingTouch_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Regenerate
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Regenerate)
		CharacterHasSkill(_Character, Blue_Target_Regenerate_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Regenerate)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Regenerate)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Regenerate)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Regenerate_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Regenerate_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Regenerate)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Regenerate_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Regenerate_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Regenerate_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Regenerate_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Regenerate_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Regenerate_SE_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Regenerate_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_ProjectileStrike_Deluge
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Deluge)
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Deluge_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_Deluge)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Deluge)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Deluge)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Deluge_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Deluge_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_ProjectileStrike_Deluge)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_Deluge_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_ProjectileStrike_Deluge_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_Deluge_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Rain_Rain
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Rain_Rain)
		CharacterHasSkill(_Character, Blue_Rain_Rain_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Rain_Rain)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Rain_Rain)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_Rain)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Rain_Rain_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_Rain_SE)
	ENDIF

	//Blue_Projectile_IceFan
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_IceFan)
		CharacterHasSkill(_Character, Blue_Projectile_IceFan_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_IceFan)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_IceFan)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_IceFan)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_IceFan_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_IceFan_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_IceFan)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_IceFan_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_IceFan_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_IceFan_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_IceFan_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_IceFan_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_IceFan_SE_C2)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_IceFan_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_LethalTorrent
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_LethalTorrent)
		CharacterHasSkill(_Character, Blue_Target_LethalTorrent_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_LethalTorrent)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_LethalTorrent)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_LethalTorrent)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_LethalTorrent_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_LethalTorrent_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_LethalTorrent)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_LethalTorrent_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_LethalTorrent_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_LethalTorrent_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_ArmorOfFrost
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_ArmorOfFrost)
		CharacterHasSkill(_Character, Blue_Target_ArmorOfFrost_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_ArmorOfFrost)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_ArmorOfFrost)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_ArmorOfFrost)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_ArmorOfFrost_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_ArmorOfFrost_SE)
	ENDIF

	//Blue_Shout_GlobalCooling
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_GlobalCooling)
		CharacterHasSkill(_Character, Blue_Shout_GlobalCooling_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_GlobalCooling)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_GlobalCooling)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_GlobalCooling)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_GlobalCooling_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_GlobalCooling_SE)
	ENDIF

	//Blue_Target_WinterBlast
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_WinterBlast)
		CharacterHasSkill(_Character, Blue_Target_WinterBlast_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_WinterBlast)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_WinterBlast)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WinterBlast)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_WinterBlast_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WinterBlast_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_WinterBlast)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_WinterBlast_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_WinterBlast_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_WinterBlast_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_Icebreaker
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Icebreaker)
		CharacterHasSkill(_Character, Blue_Shout_Icebreaker_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Icebreaker)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Icebreaker)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Icebreaker)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Icebreaker_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Icebreaker_SE)
	ENDIF

	//Blue_Summon_HorridWilting
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Summon_HorridWilting)
		CharacterHasSkill(_Character, Blue_Summon_HorridWilting_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Summon_HorridWilting)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Summon_HorridWilting)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Summon_HorridWilting)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Summon_HorridWilting_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Summon_HorridWilting_SE)
	ENDIF

	//Blue_Target_ColdSnap
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_ColdSnap)
		CharacterHasSkill(_Character, Blue_Target_ColdSnap_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_ColdSnap)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_ColdSnap)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_ColdSnap)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_ColdSnap_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_ColdSnap_SE)
	ENDIF

	//Blue_Projectile_HealingRitual
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_HealingRitual)
		CharacterHasSkill(_Character, Blue_Projectile_HealingRitual_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_HealingRitual)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_HealingRitual)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_HealingRitual)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_HealingRitual_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_HealingRitual_SE)
	ENDIF

	//Blue_ProjectileStrike_Hailstorm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Hailstorm)
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Hailstorm_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_Hailstorm)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Hailstorm)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Hailstorm)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_Hailstorm_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Hailstorm_SE)
	ENDIF

	//Blue_Target_MassHeal
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_MassHeal)
		CharacterHasSkill(_Character, Blue_Target_MassHeal_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MassHeal)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_MassHeal)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MassHeal)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_MassHeal_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MassHeal_SE)
	ENDIF

	//Blue_Rain_Blizzard
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Summoning)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Summoning)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Rain_Blizzard)
		CharacterHasSkill(_Character, Blue_Rain_Blizzard_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Rain_Blizzard)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Rain_Blizzard)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_Blizzard)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Rain_Blizzard_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_Blizzard_SE)
	ENDIF


EVENT Blue_Knight_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Knight_Correcter")
ACTIONS

	//Blue_Target_HelpingHand
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_HelpingHand)
		CharacterHasSkill(_Character, Blue_Target_HelpingHand_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_HelpingHand)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_HelpingHand)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_HelpingHand)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_HelpingHand_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_HelpingHand_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_HelpingHand)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_HelpingHand_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_HelpingHand_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_HelpingHand_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_WeakeningStrike
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_WeakeningStrike)
		CharacterHasSkill(_Character, Blue_Target_WeakeningStrike_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_WeakeningStrike)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_WeakeningStrike)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_WeakeningStrike_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_WeakeningStrike)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_WeakeningStrike_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_WeakeningStrike_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_WeakeningStrike_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_WeakeningStrike_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_WeakeningStrike_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_WeakeningStrike_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_WeakeningStrike_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_Hold
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Hold)
		CharacterHasSkill(_Character, Blue_Shout_Hold_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Hold)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Hold)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Hold)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Hold_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Hold_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_Hold)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Hold_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Shout_Hold_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Hold_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Rush_BatteringRam
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Rush_BatteringRam)
		CharacterHasSkill(_Character, Blue_Rush_BatteringRam_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Rush_BatteringRam)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Rush_BatteringRam)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rush_BatteringRam)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Rush_BatteringRam_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rush_BatteringRam_SE)
	ENDIF

	//Blue_Target_CureWounds
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_CureWounds)
		CharacterHasSkill(_Character, Blue_Target_CureWounds_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CureWounds)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_CureWounds)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CureWounds)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_CureWounds_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CureWounds_SE)
	ENDIF

	//Blue_Projectile_BouncingShield
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_BouncingShield)
		CharacterHasSkill(_Character, Blue_Projectile_BouncingShield_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_BouncingShield)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_BouncingShield)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_BouncingShield)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_BouncingShield_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_BouncingShield_SE)
	ENDIF

	//Blue_Target_Taunt
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Taunt)
		CharacterHasSkill(_Character, Blue_Target_Taunt_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Taunt)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Taunt)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Taunt)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Taunt_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Taunt_SE)
	ENDIF

	//Blue_Target_CripplingBlow
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_CripplingBlow)
		CharacterHasSkill(_Character, Blue_Target_CripplingBlow_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CripplingBlow)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_CripplingBlow)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_CripplingBlow_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_CripplingBlow)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CripplingBlow_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_CripplingBlow_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CripplingBlow_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_CripplingBlow_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CripplingBlow_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_CripplingBlow_SE_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CripplingBlow_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_ElementalBastion
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_ElementalBastion)
		CharacterHasSkill(_Character, Blue_Shout_ElementalBastion_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_ElementalBastion)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ElementalBastion)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ElementalBastion)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ElementalBastion_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ElementalBastion_SE)
	ENDIF

	//Blue_Shout_ImpenetrableBarrier
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_ImpenetrableBarrier)
		CharacterHasSkill(_Character, Blue_Shout_ImpenetrableBarrier_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_ImpenetrableBarrier)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ImpenetrableBarrier)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ImpenetrableBarrier)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ImpenetrableBarrier_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ImpenetrableBarrier_SE)
	ENDIF

	//Blue_Shout_DeflectiveShield
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_DeflectiveShield)
		CharacterHasSkill(_Character, Blue_Shout_DeflectiveShield_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_DeflectiveShield)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_DeflectiveShield)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_DeflectiveShield)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_DeflectiveShield_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_DeflectiveShield_SE)
	ENDIF

	//Blue_Shout_GuardianAngel
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_GuardianAngel)
		CharacterHasSkill(_Character, Blue_Shout_GuardianAngel_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_GuardianAngel)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_GuardianAngel)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_GuardianAngel)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_GuardianAngel_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_GuardianAngel_SE)
	ENDIF

	//Blue_Target_Stifle
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Stifle)
		CharacterHasSkill(_Character, Blue_Target_Stifle_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Stifle)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Stifle)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Stifle)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Stifle_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Stifle_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Stifle)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Stifle_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Stifle_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Stifle_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Sunder
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Sunder)
		CharacterHasSkill(_Character, Blue_Target_Sunder_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Sunder)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Sunder)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Sunder)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Sunder_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Sunder_SE)
	ENDIF

	//Blue_Target_ProtectKnight
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_ProtectKnight)
		CharacterHasSkill(_Character, Blue_Target_ProtectKnight_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_ProtectKnight)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_ProtectKnight)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_ProtectKnight)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_ProtectKnight_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_ProtectKnight_SE)
	ENDIF

	//Blue_Shout_ShacklesOfPain
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Perseverance)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Perseverance)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_ShacklesOfPain)
		CharacterHasSkill(_Character, Blue_Shout_ShacklesOfPain_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_ShacklesOfPain)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ShacklesOfPain)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ShacklesOfPain)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ShacklesOfPain_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ShacklesOfPain_SE)
	ENDIF



EVENT Blue_Pyrokinetic_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Pyrokinetic_Correcter")
ACTIONS

	//Blue_Target_PeaceOfMind
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_PeaceOfMind)
		CharacterHasSkill(_Character, Blue_Target_PeaceOfMind_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PeaceOfMind)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_PeaceOfMind)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PeaceOfMind)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_PeaceOfMind_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PeaceOfMind_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_PeaceOfMind)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PeaceOfMind_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_PeaceOfMind_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PeaceOfMind_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Projectile_FlamingDaggers
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_FlamingDaggers)
		CharacterHasSkill(_Character, Blue_Projectile_FlamingDaggers_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_FlamingDaggers)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_FlamingDaggers)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_FlamingDaggers_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_FlamingDaggers)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_FlamingDaggers_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_FlamingDaggers_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_FlamingDaggers_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_FlamingDaggers_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_FlamingDaggers_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_FlamingDaggers_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_FlamingDaggers_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_HeatMetal
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_HeatMetal)
		CharacterHasSkill(_Character, Blue_Target_HeatMetal_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_HeatMetal)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_HeatMetal)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_HeatMetal)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_HeatMetal_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_HeatMetal_SE)
	ENDIF

	//Blue_Target_Haste
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Haste)
		CharacterHasSkill(_Character, Blue_Target_Haste_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Haste)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Haste)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Haste)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Haste_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Haste_SE)
	ENDIF

	//Blue_Projectile_Fireball
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_Fireball)
		CharacterHasSkill(_Character, Blue_Projectile_Fireball_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Fireball)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Fireball)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Fireball)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Fireball_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Fireball_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Fireball)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Fireball_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Fireball_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Fireball_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_FlamingCrescendo
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_FlamingCrescendo)
		CharacterHasSkill(_Character, Blue_Target_FlamingCrescendo_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FlamingCrescendo)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FlamingCrescendo)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FlamingCrescendo)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FlamingCrescendo_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FlamingCrescendo_SE)
	ENDIF

	//Blue_Target_PurifyingFire
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_PurifyingFire)
		CharacterHasSkill(_Character, Blue_Target_PurifyingFire_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PurifyingFire)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_PurifyingFire)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PurifyingFire)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_PurifyingFire_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PurifyingFire_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_PurifyingFire)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PurifyingFire_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_PurifyingFire_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_PurifyingFire_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_Supernova
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Supernova)
		CharacterHasSkill(_Character, Blue_Shout_Supernova_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Supernova)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Supernova)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Supernova)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Supernova_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Supernova_SE)
	ENDIF

	//Blue_Target_SpontaneousCombustion
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_SpontaneousCombustion)
		CharacterHasSkill(_Character, Blue_Target_SpontaneousCombustion_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_SpontaneousCombustion)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_SpontaneousCombustion)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_SpontaneousCombustion)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_SpontaneousCombustion_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_SpontaneousCombustion_SE)
	ENDIF

	//Blue_Target_TerribleFlame
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_TerribleFlame)
		CharacterHasSkill(_Character, Blue_Target_TerribleFlame_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_TerribleFlame)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_TerribleFlame)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_TerribleFlame)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_TerribleFlame_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_TerribleFlame_SE)
	ENDIF

	//Blue_Projectile_InfectiousFlame
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_InfectiousFlame)
		CharacterHasSkill(_Character, Blue_Projectile_InfectiousFlame_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_InfectiousFlame)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_InfectiousFlame)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_InfectiousFlame)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_InfectiousFlame_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_InfectiousFlame_SE)
	ENDIF

	//Blue_Target_FireWhip
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_FireWhip)
		CharacterHasSkill(_Character, Blue_Target_FireWhip_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FireWhip)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FireWhip)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FireWhip)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FireWhip_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FireWhip_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FireWhip)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FireWhip_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FireWhip_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FireWhip_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FireWhip_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FireWhip_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FireWhip_SE_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FireWhip_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Zone_LaserRay
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Zone_LaserRay)
		CharacterHasSkill(_Character, Blue_Zone_LaserRay_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Zone_LaserRay)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Zone_LaserRay)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Zone_LaserRay)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Zone_LaserRay_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Zone_LaserRay_SE)
	ENDIF

	//Blue_Target_Soulfire
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Soulfire)
		CharacterHasSkill(_Character, Blue_Target_Soulfire_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Soulfire)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Soulfire)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Soulfire)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Soulfire_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Soulfire_SE)
	ENDIF


	//Blue_ProjectileStrike_MeteorShower
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, FireSpecialist)
		CharacterGetAbility(_SecondAbilityCheck, _Character, FireSpecialist)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_MeteorShower)
		CharacterHasSkill(_Character, Blue_ProjectileStrike_MeteorShower_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_ProjectileStrike_MeteorShower)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_MeteorShower)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_MeteorShower)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_ProjectileStrike_MeteorShower_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_MeteorShower_SE)
	ENDIF



EVENT Blue_Ranger_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Ranger_Correcter")
ACTIONS

	//Blue_Target_FirstAid
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_FirstAid)
		CharacterHasSkill(_Character, Blue_Target_FirstAid_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FirstAid)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FirstAid)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FirstAid)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_FirstAid_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FirstAid_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FirstAid)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FirstAid_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_FirstAid_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_FirstAid_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Projectile_Ricochet
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_Ricochet)
		CharacterHasSkill(_Character, Blue_Projectile_Ricochet_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Ricochet)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Ricochet)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Ricochet)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Ricochet_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Ricochet_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Ricochet)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Ricochet_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Ricochet_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Ricochet_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_PinningStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_PinningStance)
		CharacterHasSkill(_Character, Blue_Shout_PinningStance_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_PinningStance)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_PinningStance)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PinningStance)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_PinningStance_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PinningStance_SE)
	ENDIF

	//Blue_Target_Antidote
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Antidote)
		CharacterHasSkill(_Character, Blue_Target_Antidote_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Antidote)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Antidote)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Antidote)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Antidote_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Antidote_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Antidote)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Antidote_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Antidote_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Antidote_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Projectile_GlitterDust
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_GlitterDust)
		CharacterHasSkill(_Character, Blue_Projectile_GlitterDust_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_GlitterDust)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_GlitterDust)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_GlitterDust)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_GlitterDust_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_GlitterDust_SE)
	ENDIF

	//Blue_Shout_PrecisionStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_PrecisionStance)
		CharacterHasSkill(_Character, Blue_Shout_PrecisionStance_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_PrecisionStance)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_PrecisionStance)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PrecisionStance)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_PrecisionStance_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PrecisionStance_SE)
	ENDIF

	//Blue_Shout_BullseyeStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_BullseyeStance)
		CharacterHasSkill(_Character, Blue_Shout_BullseyeStance_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_BullseyeStance)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_BullseyeStance)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_BullseyeStance)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_BullseyeStance_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_BullseyeStance_SE)
	ENDIF

	//Blue_Projectile_Skyshot
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_Skyshot)
		CharacterHasSkill(_Character, Blue_Projectile_Skyshot_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Skyshot)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Skyshot)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Skyshot_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Skyshot)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Skyshot_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Skyshot_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Skyshot_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Skyshot_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Skyshot_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Skyshot_SE_C2)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Skyshot_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Projectile_Barrage
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_Barrage)
		CharacterHasSkill(_Character, Blue_Projectile_Barrage_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Barrage)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Barrage)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Barrage)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Barrage_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Barrage_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Barrage)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Barrage_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Barrage_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Barrage_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Barrage_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Barrage_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Barrage_SE_C2)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Barrage_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_PowerStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_PowerStance)
		CharacterHasSkill(_Character, Blue_Shout_PowerStance_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_PowerStance)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_PowerStance)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PowerStance)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_PowerStance_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PowerStance_SE)
	ENDIF

	//Blue_Projectile_BoundingBlow
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_BoundingBlow)
		CharacterHasSkill(_Character, Blue_Projectile_BoundingBlow_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_BoundingBlow)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_BoundingBlow)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_BoundingBlow)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_BoundingBlow_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_BoundingBlow_SE)
	ENDIF

	//Blue_Projectile_MarksmansFang
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_MarksmansFang)
		CharacterHasSkill(_Character, Blue_Projectile_MarksmansFang_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_MarksmansFang)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_MarksmansFang)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_MarksmansFang)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_MarksmansFang_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_MarksmansFang_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_MarksmansFang)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_MarksmansFang_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_MarksmansFang_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_MarksmansFang_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Projectile_BallisticShot
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_BallisticShot)
		CharacterHasSkill(_Character, Blue_Projectile_BallisticShot_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_BallisticShot)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_BallisticShot)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_BallisticShot)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_BallisticShot_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_BallisticShot_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_BallisticShot)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_BallisticShot_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_BallisticShot_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_BallisticShot_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Dome_ReactiveShot
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Dome_ReactiveShot)
		CharacterHasSkill(_Character, Blue_Dome_ReactiveShot_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Dome_ReactiveShot)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Dome_ReactiveShot)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Dome_ReactiveShot)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Dome_ReactiveShot_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Dome_ReactiveShot_SE)
	ENDIF

	//Blue_Projectile_Fusillade
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_Fusillade)
		CharacterHasSkill(_Character, Blue_Projectile_Fusillade_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Fusillade)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Fusillade)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Fusillade)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Fusillade_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Fusillade_SE)
	ENDIF

	//Blue_Shout_ArrowheadStance
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, RangerLore)
		CharacterGetAbility(_SecondAbilityCheck, _Character, RangerLore)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_ArrowheadStance)
		CharacterHasSkill(_Character, Blue_Shout_ArrowheadStance_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_ArrowheadStance)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ArrowheadStance)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ArrowheadStance)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_ArrowheadStance_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_ArrowheadStance_SE)
	ENDIF



EVENT Blue_Rogue_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Rogue_Correcter")
ACTIONS

	//Blue_Target_Disarm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Disarm)
		CharacterHasSkill(_Character, Blue_Target_Disarm_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Disarm)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Disarm)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disarm)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Disarm_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disarm_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Disarm)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Disarm_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Disarm_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Disarm_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Multistrike_Backlash
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Multistrike_Backlash)
		CharacterHasSkill(_Character, Blue_Multistrike_Backlash_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Multistrike_Backlash)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Multistrike_Backlash)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Multistrike_Backlash)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Multistrike_Backlash_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Multistrike_Backlash_SE)
	ENDIF

	//Blue_Projectile_ThrowingKnives
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_ThrowingKnives)
		CharacterHasSkill(_Character, Blue_Projectile_ThrowingKnives_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ThrowingKnives)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ThrowingKnives)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_ThrowingKnives_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ThrowingKnives)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ThrowingKnives_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ThrowingKnives_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ThrowingKnives_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ThrowingKnives_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ThrowingKnives_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_ThrowingKnives_SE_C2)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_ThrowingKnives_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Projectile_Chloroform
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_Chloroform)
		CharacterHasSkill(_Character, Blue_Projectile_Chloroform_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Chloroform)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Chloroform)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Chloroform)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_Chloroform_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Chloroform_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Chloroform)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Chloroform_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Projectile_Chloroform_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_Chloroform_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_LightFeet
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_LightFeet)
		CharacterHasSkill(_Character, Blue_Shout_LightFeet_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_LightFeet)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_LightFeet)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_LightFeet)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_LightFeet_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_LightFeet_SE)
	ENDIF

	//Blue_Target_SawtoothKnife
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_SawtoothKnife)
		CharacterHasSkill(_Character, Blue_Target_SawtoothKnife_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_SawtoothKnife)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_SawtoothKnife)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_SawtoothKnife)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_SawtoothKnife_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_SawtoothKnife_SE)
	ENDIF

	//Blue_Shout_Lurk
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Lurk)
		CharacterHasSkill(_Character, Blue_Shout_Lurk_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Lurk)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Lurk)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Lurk)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Lurk_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Lurk_SE)
	ENDIF

	//Blue_Shout_Adrenaline
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Adrenaline)
		CharacterHasSkill(_Character, Blue_Shout_Adrenaline_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Adrenaline)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Adrenaline)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Adrenaline)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Adrenaline_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Adrenaline_SE)
	ENDIF

	//Blue_Jump_CloakAndDagger
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Jump_CloakAndDagger)
		CharacterHasSkill(_Character, Blue_Jump_CloakAndDagger_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Jump_CloakAndDagger)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Jump_CloakAndDagger)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Jump_CloakAndDagger)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Jump_CloakAndDagger_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Jump_CloakAndDagger_SE)
	ENDIF

	//Blue_Target_CorruptedBlade
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_CorruptedBlade)
		CharacterHasSkill(_Character, Blue_Target_CorruptedBlade_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CorruptedBlade)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_CorruptedBlade)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CorruptedBlade)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_CorruptedBlade_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CorruptedBlade_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_CorruptedBlade)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CorruptedBlade_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_CorruptedBlade_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_CorruptedBlade_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Cruelty
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Cruelty)
		CharacterHasSkill(_Character, Blue_Target_Cruelty_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cruelty)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Cruelty)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cruelty)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Cruelty_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cruelty_SE)
	ENDIF

	//Blue_Target_RupturedTendons
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_RupturedTendons)
		CharacterHasSkill(_Character, Blue_Target_RupturedTendons_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_RupturedTendons)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_RupturedTendons)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_RupturedTendons)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_RupturedTendons_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_RupturedTendons_SE)
	ENDIF

	//Blue_Shout_GhostForm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_GhostForm)
		CharacterHasSkill(_Character, Blue_Shout_GhostForm_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_GhostForm)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_GhostForm)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_GhostForm)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_GhostForm_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_GhostForm_SE)
	ENDIF

	//Blue_Target_DaggersDrawn
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_DaggersDrawn)
		CharacterHasSkill(_Character, Blue_Target_DaggersDrawn_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DaggersDrawn)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DaggersDrawn)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DaggersDrawn)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DaggersDrawn_SE)
		IsLessThen(_AbilityCheck, INT:9)
		IsLessThen(_SecondAbilityCheck, INT:9)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DaggersDrawn_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_DaggersDrawn)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DaggersDrawn_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_DaggersDrawn_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DaggersDrawn_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_Premeditate
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_Premeditate)
		CharacterHasSkill(_Character, Blue_Shout_Premeditate_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_Premeditate)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Premeditate)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Premeditate)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_Premeditate_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Premeditate_SE)
	ENDIF

	//Blue_Target_Bladestorm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Leadership)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Leadership)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Bladestorm)
		CharacterHasSkill(_Character, Blue_Target_Bladestorm_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Bladestorm)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Bladestorm)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Bladestorm)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Bladestorm_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Bladestorm_SE)
	ENDIF


EVENT Blue_Witchcraft_Correcter
VARS
	CHARACTER:_Character
	INT:_AbilityCheck
	INT:_SecondAbilityCheck
ON
	OnCharacterEvent(_Character, "Witchcraft_Correcter")
ACTIONS



	//Blue_Target_Brainrot
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Brainrot)
		CharacterHasSkill(_Character, Blue_Target_Brainrot_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Brainrot)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Brainrot)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Brainrot)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Brainrot_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Brainrot_SE)
	ENDIF

	//Blue_Target_Heartseeker
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Heartseeker)
		CharacterHasSkill(_Character, Blue_Target_Heartseeker_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Heartseeker)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Heartseeker)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Heartseeker)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Heartseeker_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Heartseeker_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Heartseeker)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Heartseeker_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Heartseeker_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Heartseeker_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_MosquitoSwarm
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_MosquitoSwarm)
		CharacterHasSkill(_Character, Blue_Target_MosquitoSwarm_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MosquitoSwarm)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_MosquitoSwarm)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_MosquitoSwarm_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_MosquitoSwarm)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MosquitoSwarm_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_MosquitoSwarm_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MosquitoSwarm_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_MosquitoSwarm_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MosquitoSwarm_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_MosquitoSwarm_SE_C2)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_MosquitoSwarm_SE_C3)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Malediction
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Malediction)
		CharacterHasSkill(_Character, Blue_Target_Malediction_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Malediction)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Malediction)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Malediction)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Malediction_SE)
		IsLessThen(_AbilityCheck, INT:1)
		IsLessThen(_SecondAbilityCheck, INT:1)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Malediction_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Malediction)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Malediction_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Malediction_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Malediction_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Shout_VampiricAura
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Shout_VampiricAura)
		CharacterHasSkill(_Character, Blue_Shout_VampiricAura_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Shout_VampiricAura)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_VampiricAura)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_VampiricAura)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Shout_VampiricAura_SE)
		IsLessThen(_AbilityCheck, INT:4)
		IsLessThen(_SecondAbilityCheck, INT:4)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_VampiricAura_SE)
	ENDIF

	//Blue_Target_LowerResistances
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_LowerResistances)
		CharacterHasSkill(_Character, Blue_Target_LowerResistances_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_LowerResistances)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_LowerResistances)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_LowerResistances)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_LowerResistances_SE)
		IsLessThen(_AbilityCheck, INT:2)
		IsLessThen(_SecondAbilityCheck, INT:2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_LowerResistances_SE)
	ENDIF

	//Blue_Target_DecayingTouch
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_DecayingTouch)
		CharacterHasSkill(_Character, Blue_Target_DecayingTouch_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DecayingTouch)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DecayingTouch)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DecayingTouch)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DecayingTouch_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DecayingTouch_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_DecayingTouch)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DecayingTouch_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_DecayingTouch_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DecayingTouch_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_DeathWish
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_DeathWish)
		CharacterHasSkill(_Character, Blue_Target_DeathWish_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DeathWish)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DeathWish)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DeathWish)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DeathWish_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DeathWish_SE)
	ENDIF

	//Blue_Target_Remorse
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Remorse)
		CharacterHasSkill(_Character, Blue_Target_Remorse_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Remorse)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Remorse)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Remorse)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Remorse_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Remorse_SE)
	ENDIF

	//Blue_Target_Suggest
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Suggest)
		CharacterHasSkill(_Character, Blue_Target_Suggest_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Suggest)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Suggest)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Suggest)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Suggest_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Suggest_SE)
	ENDIF

	//Blue_Target_DrainWillpower
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_DrainWillpower)
		CharacterHasSkill(_Character, Blue_Target_DrainWillpower_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_DrainWillpower)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DrainWillpower)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DrainWillpower)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_DrainWillpower_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DrainWillpower_SE)
	ENDIF

	//Blue_Target_Despair
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Despair)
		CharacterHasSkill(_Character, Blue_Target_Despair_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Despair)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Despair)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Despair)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Despair_SE)
		IsLessThen(_AbilityCheck, INT:5)
		IsLessThen(_SecondAbilityCheck, INT:5)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Despair_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Despair)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Despair_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Despair_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Despair_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF

	//Blue_Target_Necroplague
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Necroplague)
		CharacterHasSkill(_Character, Blue_Target_Necroplague_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Necroplague)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Necroplague)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Necroplague)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Necroplague_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Necroplague_SE)
	ENDIF

	//Blue_Projectile_MonaxVitae
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Projectile_MonaxVitae)
		CharacterHasSkill(_Character, Blue_Projectile_MonaxVitae_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Projectile_MonaxVitae)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_MonaxVitae)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_MonaxVitae)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Projectile_MonaxVitae_SE)
		IsLessThen(_AbilityCheck, INT:7)
		IsLessThen(_SecondAbilityCheck, INT:7)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_MonaxVitae_SE)
	ENDIF

	//Blue_Dome_BlightCurse
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Dome_BlightCurse)
		CharacterHasSkill(_Character, Blue_Dome_BlightCurse_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Dome_BlightCurse)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Dome_BlightCurse)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Dome_BlightCurse)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Dome_BlightCurse_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Dome_BlightCurse_SE)
	ENDIF

	//Blue_Target_SoulSap
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_SoulSap)
		CharacterHasSkill(_Character, Blue_Target_SoulSap_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_SoulSap)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_SoulSap)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_SoulSap)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_SoulSap_SE)
		IsLessThen(_AbilityCheck, INT:10)
		IsLessThen(_SecondAbilityCheck, INT:10)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_SoulSap_SE)
	ENDIF

	//Blue_Target_Curse
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Curse)
		CharacterHasSkill(_Character, Blue_Target_Curse_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Curse)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Curse)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Curse)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Curse_SE)
		IsLessThen(_AbilityCheck, INT:8)
		IsLessThen(_SecondAbilityCheck, INT:8)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Curse_SE)
	ENDIF

	//Blue_Target_Cannibalize
	IF "c1&c2"
		CharacterGetAbility(_AbilityCheck, _Character, Necromancy)
		CharacterGetAbility(_SecondAbilityCheck, _Character, Necromancy)
	THEN
	ENDIF
	IF "!c1&!c2&!c3&!c4"
		CharacterHasSkill(_Character, Blue_Target_Cannibalize)
		CharacterHasSkill(_Character, Blue_Target_Cannibalize_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cannibalize)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Cannibalize)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cannibalize)
	ELIF "c1&c2&c3"
		CharacterHasSkill(_Character, Blue_Target_Cannibalize_SE)
		IsLessThen(_AbilityCheck, INT:3)
		IsLessThen(_SecondAbilityCheck, INT:3)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cannibalize_SE)
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Cannibalize)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cannibalize_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ELIF "c1&!c2&!c3"
		IsSkillActive(_Character, Blue_Target_Cannibalize_SE)
		IsLessThen(_AbilityCheck, INT:6)
		IsLessThen(_SecondAbilityCheck, INT:6)
	THEN
		SetVar(_Character, "AbilityID", SKILL:Blue_Target_Cannibalize_SE_C2)
		CharacterEvent(_Character, "Blue_AddSkillToList")
	ENDIF


EVENT Blue_Aerotheurge_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Aerotheurge_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF

	//Blue_Projectile_ShockingTouch
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_ShockingTouch_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_FavourableWind
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_FavourableWind_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_ElectricDischarge
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_ElectricDischarge_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_MultiStrike_Thunderjump
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_MultiStrike_Thunderjump_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Cyclone
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Cyclone_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Teleportation_Teleport
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Teleportation_Teleport_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_PressureSpike
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_PressureSpike_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_ProjectileStrike_DazingBolt
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_ProjectileStrike_DazingBolt_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_MakeInvisible
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_MakeInvisible_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Teleportation_Netherswap
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Teleportation_Netherswap_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_RendingGale
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_RendingGale_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Tornado_Tornado
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Tornado_Tornado_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_Superconductor
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_Superconductor_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_ChainLightning
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_ChainLightning_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_ProtectionBubble
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_ProtectionBubble_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Storm_Thunderstorm
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Storm_Thunderstorm_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Berserker_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Berserker_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF


	//Blue_Shout_Indomitable
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Indomitable_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF

	//Blue_Shout_MartialStance
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_MartialStance_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_WrathStance
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_WrathStance_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_CleavingStance
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_CleavingStance_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Cone_Cleave
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Cone_Cleave_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_PumpingIron
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_PumpingIron_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Anticipation
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Anticipation_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Teleportation_Throw
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Teleportation_Throw_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Enrage
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Enrage_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Whirlwind
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Whirlwind_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Ironhide
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Ironhide_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_Grapple
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_Grapple_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Disembowl
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Disembowl_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_ThickOfTheFight
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_ThickOfTheFight_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Onslaught
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Onslaught_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Jump_Leap
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Jump_Leap_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Crush
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Crush_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Divine_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Divine_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF


	//Blue_Dome_Consecrate
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Dome_Consecrate_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Safeguard
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Safeguard_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Cleanse
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Cleanse_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Summon_Illuminate
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Summon_Illuminate_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Teleportation_Revivify
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Teleportation_Revivify_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Smite
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Smite_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Bless
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Bless_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Intertwine
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Intertwine_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Zone_DrainArcana
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Zone_DrainArcana_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Fracture
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Fracture_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Condemn
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Condemn_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_DivineArmor
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_DivineArmor_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_TwistFate
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_TwistFate_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Restore
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Restore_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Crucify
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Crucify_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_DivineFavor
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_DivineFavor_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Geomancer_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Geomancer_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF

	//Blue_Projectile_AcidDart
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_AcidDart_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_OilBlob
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_OilBlob_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_ThrowDust
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_ThrowDust_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_FossilStrike
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_FossilStrike_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Cone_Tremor
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Cone_Tremor_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Rain_CreateOil
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Rain_CreateOil_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Fortify
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Fortify_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Vineyard
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Vineyard_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Impalement
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Impalement_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Cone_PetrifyingGaze
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Cone_PetrifyingGaze_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Wall_Living
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Wall_Living_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_AcidSpores
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_AcidSpores_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_StalwartDefense
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_StalwartDefense_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Quake_Earthquake
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Quake_Earthquake_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_ProjectileStrike_Devastate
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_ProjectileStrike_Devastate_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_SandCoffin
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_SandCoffin_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Hydrosophist_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Hydrosophist_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF

	//Blue_Target_FreezingTouch
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_FreezingTouch_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Regenerate
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Regenerate_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_ProjectileStrike_Deluge
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_ProjectileStrike_Deluge_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Rain_Rain
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Rain_Rain_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_IceFan
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_IceFan_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_LethalTorrent
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_LethalTorrent_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_ArmorOfFrost
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_ArmorOfFrost_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_GlobalCooling
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_GlobalCooling_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_WinterBlast
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_WinterBlast_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Icebreaker
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Icebreaker_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Summon_HorridWilting
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Summon_HorridWilting_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_ColdSnap
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_ColdSnap_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_HealingRitual
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_HealingRitual_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_ProjectileStrike_Hailstorm
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_ProjectileStrike_Hailstorm_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_MassHeal
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_MassHeal_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Rain_Blizzard
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Rain_Blizzard_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Knight_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Knight_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF

	//Blue_Target_HelpingHand
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_HelpingHand_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_WeakeningStrike
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_WeakeningStrike_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Hold
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Hold_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Rush_BatteringRam
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Rush_BatteringRam_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_CureWounds
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_CureWounds_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_BouncingShield
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_BouncingShield_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Taunt
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Taunt_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_CripplingBlow
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_CripplingBlow_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_ElementalBastion
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_ElementalBastion_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_ImpenetrableBarrier
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_ImpenetrableBarrier_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_DeflectiveShield
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_DeflectiveShield_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_GuardianAngel
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_GuardianAngel_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Stifle
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Stifle_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Sunder
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Sunder_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_ProtectKnight
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_ProtectKnight_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_ShacklesOfPain
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_ShacklesOfPain_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF

	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Pyrokinetic_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Pyrokinetic_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF

	//Blue_Target_PeaceOfMind
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_PeaceOfMind_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_FlamingDaggers
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_FlamingDaggers_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_HeatMetal
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_HeatMetal_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Haste
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Haste_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_Fireball
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_Fireball_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_FlamingCrescendo
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_FlamingCrescendo_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_PurifyingFire
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_PurifyingFire_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Supernova
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Supernova_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_SpontaneousCombustion
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_SpontaneousCombustion_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_TerribleFlame
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_TerribleFlame_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_InfectiousFlame
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_InfectiousFlame_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_FireWhip
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_FireWhip_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Zone_LaserRay
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Zone_LaserRay_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Soulfire
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Soulfire_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF

	//Blue_ProjectileStrike_MeteorShower
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_ProjectileStrike_MeteorShower_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF

	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Ranger_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Ranger_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF

	//Blue_Target_FirstAid
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_FirstAid_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_Ricochet
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_Ricochet_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_PinningStance
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_PinningStance_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Antidote
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Antidote_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_GlitterDust
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_GlitterDust_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_PrecisionStance
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_PrecisionStance_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_BullseyeStance
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_BullseyeStance_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_Skyshot
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_Skyshot_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_Barrage
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_Barrage_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_PowerStance
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_PowerStance_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_BoundingBlow
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_BoundingBlow_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_MarksmansFang
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_MarksmansFang_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_BallisticShot
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_BallisticShot_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Dome_ReactiveShot
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Dome_ReactiveShot_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_Fusillade
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_Fusillade_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_ArrowheadStance
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_ArrowheadStance_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF

	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Rogue_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Rogue_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF

	//Blue_Target_Disarm
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Disarm_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Multistrike_Backlash
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Multistrike_Backlash_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_ThrowingKnives
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_ThrowingKnives_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_Chloroform
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_Chloroform_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_LightFeet
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_LightFeet_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_SawtoothKnife
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_SawtoothKnife_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Lurk
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Lurk_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Adrenaline
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Adrenaline_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Jump_CloakAndDagger
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Jump_CloakAndDagger_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_CorruptedBlade
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_CorruptedBlade_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Cruelty
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Cruelty_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_RupturedTendons
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_RupturedTendons_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_GhostForm
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_GhostForm_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_DaggersDrawn
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_DaggersDrawn_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_Premeditate
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_Premeditate_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Bladestorm
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Bladestorm_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Witchcraft_Count_Empower
VARS
	CHARACTER:_Character
	INT:_Counter
ON
	OnCharacterEvent(_Character, "Witchcraft_Count_Empower")
ACTIONS
	IF "c1"
		GetVar(_Counter, _Character, "SourceEmpoweredCounter")
	THEN
	ENDIF



	//Blue_Target_Brainrot
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Brainrot_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Heartseeker
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Heartseeker_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_MosquitoSwarm
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_MosquitoSwarm_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Malediction
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Malediction_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Shout_VampiricAura
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Shout_VampiricAura_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_LowerResistances
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_LowerResistances_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_DecayingTouch
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_DecayingTouch_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_DeathWish
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_DeathWish_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Remorse
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Remorse_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Suggest
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Suggest_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_DrainWillpower
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_DrainWillpower_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Despair
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Despair_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Necroplague
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Necroplague_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Projectile_MonaxVitae
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Projectile_MonaxVitae_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Dome_BlightCurse
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Dome_BlightCurse_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_SoulSap
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_SoulSap_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Curse
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Curse_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	//Blue_Target_Cannibalize
	IF "c1"
		CharacterHasSkill(_Character, SKILL:Blue_Target_Cannibalize_SE)
	THEN
		Add(_Counter, INT:1)
	ENDIF
	SetVar(_Character, "SourceEmpoweredCounter", INT:_Counter)

EVENT Blue_Aerotheurge_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Aerotheurge_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	IF "c1"
		//Blue_Projectile_ElectricDischarge
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ElectricDischarge_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ElectricDischarge_SE_C3)
	ELIF "c1"
		//Blue_Target_PressureSpike
		IsEqual(_AbilityID, SKILL:Blue_Target_PressureSpike)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PressureSpike_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_PressureSpike_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PressureSpike_SE_C2)
	ELIF "c1"
		//Blue_ProjectileStrike_DazingBolt
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_DazingBolt)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_DazingBolt_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_DazingBolt_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_DazingBolt_SE_C2)
	ELIF "c1"
		//Blue_Target_MakeInvisible
		IsEqual(_AbilityID, SKILL:Blue_Target_MakeInvisible)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MakeInvisible_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_MakeInvisible_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MakeInvisible_SE_C2)
	ELIF "c1"
		//Blue_Projectile_ChainLightning
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ChainLightning)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ChainLightning_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ChainLightning_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ChainLightning_SE_C2)
	ENDIF


EVENT Blue_Berserker_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Berserker_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	

IF "c1"
		//Blue_Cone_Cleave
		IsEqual(_AbilityID, SKILL:Blue_Cone_Cleave)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_Cleave_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Cone_Cleave_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_Cleave_SE_C2)
	ELIF "c1"
		//Blue_Shout_PumpingIron
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron_C2)
		CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_PumpingIron_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_PumpingIron_SE_C3)
	ELIF "c1"
		//Blue_Shout_Anticipation
		IsEqual(_AbilityID, SKILL:Blue_Shout_Anticipation)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Anticipation_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Anticipation_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Anticipation_SE_C2)
	ELIF "c1"
		//Blue_Teleportation_Throw
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Throw)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Throw_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Teleportation_Throw_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Teleportation_Throw_SE_C2)
	ELIF "c1"
		//Blue_Shout_Whirlwind
		IsEqual(_AbilityID, SKILL:Blue_Shout_Whirlwind)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Whirlwind_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Whirlwind_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Whirlwind_SE_C2)
	ELIF "c1"
		//Blue_Projectile_Grapple
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Grapple_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_Grapple_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Grapple_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Grapple_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_Grapple_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Grapple_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Grapple_SE_C3)
	ELIF "c1"
		//Blue_Target_Disembowl
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disembowl_C2)
		CharacterRemoveSkill(_Character, Blue_Target_Disembowl_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disembowl_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disembowl_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_Disembowl_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disembowl_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disembowl_SE_C3)
	ENDIF


EVENT Blue_Divine_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Divine_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	
IF "c1"
		//Blue_Target_Safeguard
		IsEqual(_AbilityID, SKILL:Blue_Target_Safeguard)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Safeguard_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Safeguard_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Safeguard_SE_C2)
	ELIF "c1"
		//Blue_Target_Cleanse
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cleanse_C2)
		CharacterRemoveSkill(_Character, Blue_Target_Cleanse_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cleanse_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cleanse_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_Cleanse_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cleanse_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cleanse_SE_C3)
	ELIF "c1"
		//Blue_Target_Smite
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Smite_C2)
		CharacterRemoveSkill(_Character, Blue_Target_Smite_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Smite_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Smite_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_Smite_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Smite_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Smite_SE_C3)
	ELIF "c1"
		//Blue_Target_Bless
		IsEqual(_AbilityID, SKILL:Blue_Target_Bless)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Bless_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Bless_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Bless_SE_C2)
	ENDIF


EVENT Blue_Geomancer_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Geomancer_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	IF "c1"
		//Blue_Projectile_AcidDart
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidDart_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidDart_SE_C3)
	ELIF "c1"
		//Blue_Projectile_FossilStrike
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FossilStrike)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FossilStrike_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FossilStrike_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FossilStrike_SE_C2)
	ELIF "c1"
		//Blue_Rain_CreateOil
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_CreateOil_C2)
		CharacterRemoveSkill(_Character, Blue_Rain_CreateOil_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_CreateOil_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_CreateOil_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Rain_CreateOil_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Rain_CreateOil_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Rain_CreateOil_SE_C3)
	ELIF "c1"
		//Blue_Cone_PetrifyingGaze
		IsEqual(_AbilityID, SKILL:Blue_Cone_PetrifyingGaze)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_PetrifyingGaze_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Cone_PetrifyingGaze_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Cone_PetrifyingGaze_SE_C2)
	ELIF "c1"
		//Blue_Projectile_AcidSpores
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidSpores)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidSpores_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_AcidSpores_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_AcidSpores_SE_C2)
	ENDIF


EVENT Blue_Hydrosophist_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Hydrosophist_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	IF "c1"
		//Blue_Target_FreezingTouch
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch_C2)
		CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FreezingTouch_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FreezingTouch_SE_C3)
	ELIF "c1"
		//Blue_Target_Regenerate
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Regenerate_C2)
		CharacterRemoveSkill(_Character, Blue_Target_Regenerate_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Regenerate_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Regenerate_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_Regenerate_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Regenerate_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Regenerate_SE_C3)
	ELIF "c1"
		//Blue_ProjectileStrike_Deluge
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Deluge)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Deluge_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_ProjectileStrike_Deluge_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_ProjectileStrike_Deluge_SE_C2)
	ELIF "c1"
		//Blue_Projectile_IceFan
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_IceFan_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_IceFan_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_IceFan_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_IceFan_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_IceFan_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_IceFan_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_IceFan_SE_C3)
	ELIF "c1"
		//Blue_Target_LethalTorrent
		IsEqual(_AbilityID, SKILL:Blue_Target_LethalTorrent)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_LethalTorrent_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_LethalTorrent_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_LethalTorrent_SE_C2)
	ELIF "c1"
		//Blue_Target_WinterBlast
		IsEqual(_AbilityID, SKILL:Blue_Target_WinterBlast)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WinterBlast_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_WinterBlast_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WinterBlast_SE_C2)
	ENDIF


EVENT Blue_Knight_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Knight_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	IF "c1"
		//Blue_Target_HelpingHand
		IsEqual(_AbilityID, SKILL:Blue_Target_HelpingHand)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_HelpingHand_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_HelpingHand_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_HelpingHand_SE_C2)
	ELIF "c1"
		//Blue_Target_WeakeningStrike
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike_C2)
		CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_WeakeningStrike_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_WeakeningStrike_SE_C3)
	ELIF "c1"
		//Blue_Shout_Hold
		IsEqual(_AbilityID, SKILL:Blue_Shout_Hold)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Hold_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Shout_Hold_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Shout_Hold_SE_C2)
	ELIF "c1"
		//Blue_Target_CripplingBlow
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow_C2)
		CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_CripplingBlow_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CripplingBlow_SE_C3)
	ELIF "c1"
		//Blue_Target_Stifle
		IsEqual(_AbilityID, SKILL:Blue_Target_Stifle)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Stifle_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Stifle_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Stifle_SE_C2)
	ENDIF



EVENT Blue_Pyrokinetic_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Pyrokinetic_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	IF "c1"
		//Blue_Target_PeaceOfMind
		IsEqual(_AbilityID, SKILL:Blue_Target_PeaceOfMind)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PeaceOfMind_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_PeaceOfMind_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PeaceOfMind_SE_C2)
	ELIF "c1"
		//Blue_Projectile_FlamingDaggers
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_FlamingDaggers_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_FlamingDaggers_SE_C3)
	ELIF "c1"
		//Blue_Projectile_Fireball
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fireball)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Fireball_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Fireball_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Fireball_SE_C2)
	ELIF "c1"
		//Blue_Target_PurifyingFire
		IsEqual(_AbilityID, SKILL:Blue_Target_PurifyingFire)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PurifyingFire_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_PurifyingFire_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_PurifyingFire_SE_C2)
	ELIF "c1"
		//Blue_Target_FireWhip
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FireWhip_C2)
		CharacterRemoveSkill(_Character, Blue_Target_FireWhip_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FireWhip_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FireWhip_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_FireWhip_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FireWhip_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FireWhip_SE_C3)
	ENDIF




EVENT Blue_Ranger_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Ranger_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	IF "c1"
		//Blue_Target_FirstAid
		IsEqual(_AbilityID, SKILL:Blue_Target_FirstAid)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FirstAid_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_FirstAid_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_FirstAid_SE_C2)
	ELIF "c1"
		//Blue_Projectile_Ricochet
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Ricochet)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Ricochet_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Ricochet_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Ricochet_SE_C2)
	ELIF "c1"
		//Blue_Target_Antidote
		IsEqual(_AbilityID, SKILL:Blue_Target_Antidote)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Antidote_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Antidote_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Antidote_SE_C2)
	ELIF "c1"
		//Blue_Projectile_Skyshot
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Skyshot_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Skyshot_SE_C3)
	ELIF "c1"
		//Blue_Projectile_Barrage
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Barrage_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_Barrage_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Barrage_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Barrage_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_Barrage_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Barrage_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Barrage_SE_C3)
	ELIF "c1"
		//Blue_Projectile_MarksmansFang
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MarksmansFang)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_MarksmansFang_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_MarksmansFang_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_MarksmansFang_SE_C2)
	ELIF "c1"
		//Blue_Projectile_BallisticShot
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BallisticShot)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_BallisticShot_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_BallisticShot_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_BallisticShot_SE_C2)
	ENDIF



EVENT Blue_Rogue_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Rogue_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	IF "c1"
		//Blue_Target_Disarm
		IsEqual(_AbilityID, SKILL:Blue_Target_Disarm)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disarm_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Disarm_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Disarm_SE_C2)
	ELIF "c1"
		//Blue_Projectile_ThrowingKnives
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_ThrowingKnives_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_ThrowingKnives_SE_C3)
	ELIF "c1"
		//Blue_Projectile_Chloroform
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Chloroform)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Chloroform_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Projectile_Chloroform_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Projectile_Chloroform_SE_C2)
	ELIF "c1"
		//Blue_Target_CorruptedBlade
		IsEqual(_AbilityID, SKILL:Blue_Target_CorruptedBlade)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CorruptedBlade_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_CorruptedBlade_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_CorruptedBlade_SE_C2)
	ELIF "c1"
		//Blue_Target_DaggersDrawn
		IsEqual(_AbilityID, SKILL:Blue_Target_DaggersDrawn)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DaggersDrawn_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_DaggersDrawn_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DaggersDrawn_SE_C2)
	ENDIF


EVENT Blue_Witchcraft_Remove
VARS
	CHARACTER:_Character
	SKILL:_AbilityID
ON
	OnCharacterEvent(_Character, "Witchcraft_Remove")
ACTIONS
	IF "c1"
		GetVar(_AbilityID, _Character, "AbilityIdentifier")
	THEN
	ENDIF
	

IF "c1"
		//Blue_Target_Heartseeker
		IsEqual(_AbilityID, SKILL:Blue_Target_Heartseeker)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Heartseeker_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Heartseeker_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Heartseeker_SE_C2)
	ELIF "c1"
		//Blue_Target_MosquitoSwarm
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm_C2)
		CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm_SE_C2)
		CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm_SE_C3)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_MosquitoSwarm_SE_C2)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_MosquitoSwarm_SE_C3)
	ELIF "c1"
		//Blue_Target_Malediction
		IsEqual(_AbilityID, SKILL:Blue_Target_Malediction)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Malediction_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Malediction_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Malediction_SE_C2)
	ELIF "c1"
		//Blue_Target_DecayingTouch
		IsEqual(_AbilityID, SKILL:Blue_Target_DecayingTouch)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DecayingTouch_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_DecayingTouch_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_DecayingTouch_SE_C2)
	ELIF "c1"
		//Blue_Target_Despair
		IsEqual(_AbilityID, SKILL:Blue_Target_Despair)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Despair_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Despair_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Despair_SE_C2)
	ELIF "c1"
		//Blue_Target_Cannibalize
		IsEqual(_AbilityID, SKILL:Blue_Target_Cannibalize)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cannibalize_C2)
	ELIF "c1"
		IsEqual(_AbilityID, SKILL:Blue_Target_Cannibalize_SE)
	THEN
		CharacterRemoveSkill(_Character, Blue_Target_Cannibalize_SE_C2)
	ENDIF
