Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_Origins_MaxPartySize(4);

KBSECTION
//REGION Helpers
QRY
QRY_GLO_PartyMembers_GetInPartyDialogReset((CHARACTERGUID)_Member)
THEN
PROC_GLO_PartyMembers_ResetInPartyDialogs((CHARACTERGUID)_Member);

PROC
PROC_GLO_PartyMembers_ResetInPartyDialogs((CHARACTERGUID)_Origin)
AND
DB_GLO_PartyMembers_InPartyDialog(_Origin,_Dialog)
THEN
NOT DB_GLO_PartyMembers_InPartyDialog(_Origin,_Dialog);

PROC
PROC_GLO_PartyMembers_SetInpartyDialog((CHARACTERGUID)_Member,(STRING)_Dialog)
THEN
ProcRemoveAllDialogEntriesForSpeaker(_Member);

PROC
PROC_GLO_PartyMembers_SetInpartyDialog((CHARACTERGUID)_Member,(STRING)_Dialog)
AND
_Dialog != ""
THEN
DB_Dialogs(_Member,_Dialog);

PROC
ProcAssignCharacterToPlayer((CHARACTERGUID)_Char,(CHARACTERGUID)_Player)
AND
CharacterGetReservedUserID(_Player,_User)
THEN
CharacterAssignToUser(_User,_Char);
//END_REGION

//REGION Check Party Size
//Check for Solo Player
PROC
Proc_CheckPartyFull()
AND
SysCount("DB_IsPlayer",1,_Int)
AND
_Int == 1
THEN
GlobalSetFlag("GEN_SoloPlayer");

//Check for Max Player count
PROC
Proc_CheckPartyFull()
AND
SysCount("DB_IsPlayer",1,_Int)
AND
_Int != 1
THEN
GlobalClearFlag("GEN_SoloPlayer");

PROC
Proc_CheckPartyFull()
AND
SysCount("DB_IsPlayer",1,_Int)
AND
DB_Origins_MaxPartySize(_Max)
AND
_Int == _Max
THEN
GlobalSetFlag("GEN_MaxPlayerCountReached");

PROC
Proc_CheckPartyFull()
AND
SysCount("DB_IsPlayer",1,_Int)
AND
DB_Origins_MaxPartySize(_Max)
AND
_Int < _Max
THEN
GlobalClearFlag("GEN_MaxPlayerCountReached");

//END_REGION

//REGION Recruit/dismiss after dialog
IF
ObjectFlagSet("OriginRemoveFromPartyAfterDialog",(CHARACTERGUID)_Member,_ID)
THEN
ObjectClearFlag(_Member,"OriginRemoveFromPartyAfterDialog",0);
DB_GLO_PartyMembers_DismissAfterDialog(_ID,_Member);

IF
DialogEnded(_,_ID)
AND
DB_GLO_PartyMembers_DismissAfterDialog(_ID,_Member)
AND
DialogGetInvolvedPlayer(_ID,2,_Player)
THEN
NOT DB_GLO_PartyMembers_DismissAfterDialog(_ID,_Member);
PROC_GLO_PartyMembers_Remove(_Member,(CHARACTERGUID)_Player,0);

IF
DialogEnded(_,_ID)
AND
DB_GLO_PartyMembers_RecruitAfterDialog(_ID,_Origin,_Player)
THEN
PROC_GLO_PartyMembers_CheckAdd(_Origin,_Player);
NOT DB_GLO_PartyMembers_RecruitAfterDialog(_ID,_Origin,_Player);
//END_REGION

//REGION Recruit a party member
PROC
PROC_GLO_PartyMembers_CheckAdd((CHARACTERGUID)_Origin,(CHARACTERGUID)_Player)
AND
GlobalGetFlag("GEN_MaxPlayerCountReached",0)
THEN
PROC_GLO_PartyMembers_Add(_Origin,_Player);

// Dummy for adding avatars to the party; can happen after kicking them
QRY
QRY_GLO_PartyMembers_GetInPartyDialog((CHARACTERGUID)_Avatar)
AND
IsTagged(_Avatar,"AVATAR",1)
THEN
DB_GLO_PartyMembers_InPartyDialog(_Avatar,"");

PROC
Proc_CheckFirstTimeRecruited((CHARACTERGUID)_Companion)
THEN
DB_NOOP(1);

PROC
PROC_GLO_PartyMembers_Add((CHARACTERGUID)_Origin,(CHARACTERGUID)_Player)
AND
QRY_GLO_PartyMembers_GetInPartyDialogReset(_Origin)
AND
QRY_GLO_PartyMembers_GetInPartyDialog(_Origin)
AND
DB_GLO_PartyMembers_InPartyDialog(_Origin,_NewDialog)
AND
DB_GLO_PartyMembers_DefaultFaction(_Origin,_PlayerFaction)
THEN
CharacterRecruitCharacter(_Origin,_Player);
ProcCharacterDisableAllCrimes(_Origin);
ProcAssignCharacterToPlayer(_Origin,_Player);
ProcRegisterPlayerTriggers(_Origin);
PROC_GLO_PartyMembers_SetInpartyDialog(_Origin,_NewDialog);
SetFaction(_Origin,_PlayerFaction);
DB_IsPlayer(_Origin);
NOT DB_GLO_PartyMembers_DefaultFaction(_Origin,_PlayerFaction);
CharacterAttachToGroup(_Origin,_Player);
Proc_CheckPartyFull();
Proc_CheckFirstTimeRecruited(_Origin);
PROC_GLO_PartyMembers_RecruiteeAvatarBond_IfDifferent(_Origin,_Player);
Proc_BondedAvatarTutorial(_Player);
CharacterSetCorpseLootable(_Origin, 0);
SetStoryEvent(_Origin, "Blue_Character_AddedToParty");
PROC_GLO_PartyMembers_AddHook(_Origin,_Player);

PROC
PROC_GLO_PartyMembers_AddHook((CHARACTERGUID)_Origin,(CHARACTERGUID)_Player)
THEN
DB_NOOP(1);

// _Companion can equal _Player in case of ProcAddDebugCharToParty
PROC
PROC_GLO_PartyMembers_RecruiteeAvatarBond_IfDifferent((CHARACTERGUID)_Companion,(CHARACTERGUID)_Avatar)
AND
_Companion != _Avatar
THEN
PROC_GLO_PartyMembers_RecruiteeAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Avatar);

PROC
PROC_GLO_PartyMembers_RecruiteeAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Avatar)
THEN
DB_GLO_PartyMembers_RecruiteeAvatarBond(_Companion,_Avatar);

PROC
PROC_GLO_PartyMembers_ClearRecruiteeBonds((CHARACTERGUID)_Companion)
AND
DB_GLO_PartyMembers_RecruiteeAvatarBond(_Companion,_Avatar)
THEN
NOT DB_GLO_PartyMembers_RecruiteeAvatarBond(_Companion,_Avatar);



//END_REGION

//REGION Dismiss a party member
PROC
PROC_GLO_PartyMembers_Remove((CHARACTERGUID)_Origin,1)
THEN
PROC_GLO_PartyMembers_Remove(_Origin,(CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000,1);

PROC
PROC_GLO_PartyMembers_Remove((CHARACTERGUID)_Origin,0)
THEN
DebugBreak("this should not be called for unforced removals of origins!");


PROC
PROC_GLO_PartyMembers_Remove((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_Force)
THEN
PROC_GLO_PartyMembers_Remove(_Origin,_Dismisser,_Force,1);

PROC
PROC_GLO_PartyMembers_Remove((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_Force,(INTEGER)_TransferItems)
AND
CharacterGetHostCharacter(_HostChar)
AND
CharacterGetReservedUserID(_HostChar,_HostUser)
AND
CharacterGetReservedUserID(_Origin,_OriginUser)
THEN
PROC_GLO_PartyMembers_RemoveIfUserHasOtherCharacter(_Origin,_Dismisser,_HostUser,_OriginUser,_Force,_TransferItems);
Proc_CheckPartyFull();

PROC
PROC_GLO_PartyMembers_RemoveIfUserHasOtherCharacter((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_HostUser,(INTEGER)_OriginUser,(INTEGER)_ForceRemove,(INTEGER)_TransferItems)
AND
_OriginUser == _HostUser
THEN
DB_GLO_PartyMember_OriginUserHasOtherCharacter(1);

PROC
PROC_GLO_PartyMembers_RemoveIfUserHasOtherCharacter((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_HostUser,(INTEGER)_OriginUser,(INTEGER)_ForceRemove,(INTEGER)_TransferItems)
AND
_OriginUser != _HostUser
AND
DB_IsPlayer(_Player)
AND
_Player!=_Origin
AND
CharacterGetReservedUserID(_Player,_PlayerUser)
AND
_PlayerUser == _OriginUser
THEN
DB_GLO_PartyMember_OriginUserHasOtherCharacter(1);

PROC
PROC_GLO_PartyMembers_RemoveIfUserHasOtherCharacter((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_HostUser,(INTEGER)_OriginUser,1,(INTEGER)_TransferItems)
THEN
DB_GLO_PartyMember_OriginUserHasOtherCharacter(1);

PROC
PROC_GLO_PartyMembers_RemoveIfUserHasOtherCharacter((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_HostUser,(INTEGER)_OriginUser,(INTEGER)_ForceRemove,1)
AND
DB_GLO_PartyMember_OriginUserHasOtherCharacter(1)
THEN
PROC_GLO_PartyMembers_TransferStoryItems(_Origin,_Dismisser);

PROC
PROC_GLO_PartyMembers_RemoveIfUserHasOtherCharacter((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_HostUser,(INTEGER)_OriginUser,(INTEGER)_ForceRemove,(INTEGER)_TransferItems)
AND
DB_GLO_PartyMember_OriginUserHasOtherCharacter(1)
THEN
CharacterDetachFromGroup(_Origin);
CharacterRemoveFromParty(_Origin);
PROC_GLO_PartyMembers_MakeNPC(_Origin);
CharacterSetCorpseLootable(_Origin, 1);

PROC
PROC_GLO_PartyMembers_TransferStoryItems((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser)
AND
NOT DB_BlockStoryItemTransfer(_Origin)
AND
_Dismisser != NULL_00000000-0000-0000-0000-000000000000
AND
CharacterGetReservedUserID(_Dismisser,_User)
AND
CharacterGetReservedUserID(_Origin,_User)
AND
CharacterGetGold(_Origin,_Gold)
AND
IntegerProduct(_Gold,-1,_MinusGold)
THEN
TransferItemsToCharacter(_Origin,_Dismisser);
CharacterAddGold(_Origin,_MinusGold);
CharacterAddGold(_Dismisser,_Gold);
DB_StoryItemsTransfered(1);

PROC
PROC_GLO_PartyMembers_TransferStoryItems(_Origin,_)
AND
NOT DB_BlockStoryItemTransfer(_Origin)
AND
NOT DB_StoryItemsTransfered(1)
THEN
TransferItemsToUser(_Origin);

PROC
PROC_GLO_PartyMembers_TransferStoryItems(_,_)
THEN
NOT DB_StoryItemsTransfered(1);

PROC
PROC_GLO_PartyMembers_RemoveIfUserHasOtherCharacter((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_HostUser,(INTEGER)_OriginUser,1,(INTEGER)_TransferItems)
THEN
CharacterFlushQueue(_Origin);

PROC
PROC_GLO_PartyMembers_RemoveIfUserHasOtherCharacter((CHARACTERGUID)_Origin,(CHARACTERGUID)_Dismisser,(INTEGER)_HostUser,(INTEGER)_OriginUser,(INTEGER)_ForceRemove,(INTEGER)_TransferItems)
THEN
NOT DB_GLO_PartyMember_OriginUserHasOtherCharacter(1);
//END_REGION

//REGION User has other characters besides the current one
QRY
QRY_GLO_PartyMembers_UserHasOtherCharacters((CHARACTERGUID)_Player)
AND
CharacterGetReservedUserID(_Player,_ID)
AND
DB_IsPlayer(_OtherPlayer)
AND
_Player != _OtherPlayer
AND
CharacterGetReservedUserID(_OtherPlayer,_ID)
THEN
DB_NOOP(1);
//END_REGION

//REGION Dismiss all companions, except if the user has no avatar(s) -> dismiss non-controlled companions
// Remove remnants from previous call
PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_GLO_PartyMembers_CollectDismissAll_Keep(_Player)
THEN
NOT DB_GLO_PartyMembers_CollectDismissAll_Keep(_Player);

PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_GLO_PartyMembers_CollectDismissAll_RecruiteeAvatarBond(_Companion,_Player)
THEN
NOT DB_GLO_PartyMembers_CollectDismissAll_RecruiteeAvatarBond(_Companion,_Player);

PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_GLO_PartyMembers_CollectDismissAll_OriginalOwningUserChar(_OwnerChar,_Companion)
THEN
NOT DB_GLO_PartyMembers_CollectDismissAll_OriginalOwningUserChar(_OwnerChar,_Companion);


// Defines DB_GLO_PartyMembers_CollectDismissAll_Keep(_Player) for all players that should not be dismissed
PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_IsPlayer(_Player)
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
IsTagged(_Player,"AVATAR",_IsAvatar)
AND
CharacterIsControlled(_Player,_IsControlled)
THEN
DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_Player,_IsAvatar,_IsControlled);

// Prefer avatars over non-avatars
PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_AvatarPlayer,1,_)
AND
DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_NonAvatarPlayer,0,_IsControlled)
THEN
NOT DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_NonAvatarPlayer,0,_IsControlled);

// Prefer controlled companions over non-controlled companions
PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_ControlledCompanion,0,1)
AND
DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_UnControlledCompanion,0,0)
THEN
NOT DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_UnControlledCompanion,0,0);

PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_Player,_IsAvatar,_IsControlled)
THEN
NOT DB_GLO_PartyMembers_CollectDismissAll_MaybeKeep(_UserID,_Player,_IsAvatar,_IsControlled);
DB_GLO_PartyMembers_CollectDismissAll_Keep(_Player);

// Record avatar/companion bonds, so we can restore them after re-adding them to the party
PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_IsPlayer(_Companion)
AND
NOT DB_GLO_PartyMembers_CollectDismissAll_Keep(_Companion)
AND
DB_GLO_PartyMembers_RecruiteeAvatarBond(_Companion,_Avatar)
THEN
DB_GLO_PartyMembers_CollectDismissAll_RecruiteeAvatarBond(_Companion,_Avatar);

// Record which user controlled which dismissed characters, so we can assign them back to the correct user afterwards
// (you can switch characters between users, so recruiter/recruitee bonds are not sufficient)
PROC
PROC_GLO_PartyMembers_CollectDismissAll()
AND
DB_GLO_PartyMembers_CollectDismissAll_Keep(_KeepChar)
AND
CharacterGetReservedUserID(_KeepChar,_UserID)
AND
DB_IsPlayer(_Companion)
AND
NOT DB_GLO_PartyMembers_CollectDismissAll_Keep(_Companion)
AND
CharacterGetReservedUserID(_Companion,_UserID)
THEN
DB_GLO_PartyMembers_CollectDismissAll_OriginalOwningUserChar(_KeepChar,_Companion);

//REGION Fix up companion/avatar bonds after rejoining
// Restore bonds for a rejoined companion
PROC
PROC_GLO_PartyMembers_CollectDismissAll_RestoreCompanionBond((CHARACTERGUID)_Companion)
AND
DB_GLO_PartyMembers_CollectDismissAll_RecruiteeAvatarBond(_Companion,_Player)
AND
DB_IsPlayer(_Companion)
THEN
PROC_GLO_PartyMembers_ClearRecruiteeBonds(_Companion);
PROC_GLO_PartyMembers_RecruiteeAvatarBond(_Companion,_Player);

PROC
PROC_GLO_PartyMembers_CollectDismissAll_RestoreCompanionBond((CHARACTERGUID)_Companion)
AND
DB_GLO_PartyMembers_CollectDismissAll_RecruiteeAvatarBond(_Companion,_Player)
THEN
NOT
DB_GLO_PartyMembers_CollectDismissAll_RecruiteeAvatarBond(_Companion,_Player);

PROC
PROC_GLO_PartyMembers_CollectDismissAll_FixRejoinedRecruiteeAvatarBonds()
AND
DB_GLO_PartyMembers_CollectDismissAll_RecruiteeAvatarBond(_Companion,_)
THEN
PROC_GLO_PartyMembers_CollectDismissAll_RestoreCompanionBond(_Companion);


//END_REGION

//END_REGION

//REGION Character gets kicked from their own party (end-game situation)
// 0) Block any alignment changes by ProcFixPlayerAlignments() towards this character
//    and make immortal (needed for party restoration at the end)
PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
THEN
DB_PlayerAlignments_BlockFix(_Avatar);
CharacterSetImmortal(_Avatar,1);

// 1) Record current party layout
PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
AND
DB_IsPlayer(_PartyMember)
AND
_PartyMember != _Avatar
AND
CharacterIsInPartyWith(_PartyMember,_Avatar,1)
AND
CharacterGetReservedUserID(_Avatar,_AvatarUserID)
AND
CharacterGetReservedUserID(_PartyMember,_PartyMemberUserID)
THEN
PROC_GLO_PartyMembers_Kick_DefinePartyMemberDB(_Avatar,_AvatarUserID,_PartyMember,_PartyMemberUserID);

PROC
PROC_GLO_PartyMembers_Kick_DefinePartyMemberDB((CHARACTERGUID)_Avatar,(INTEGER)_AvatarUserID,(CHARACTERGUID)_PartyMember,(INTEGER)_PartyMemberUserID)
AND
_AvatarUserID == _PartyMemberUserID
THEN
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,1);

PROC
PROC_GLO_PartyMembers_Kick_DefinePartyMemberDB((CHARACTERGUID)_Avatar,(INTEGER)_AvatarUserID,(CHARACTERGUID)_PartyMember,(INTEGER)_PartyMemberUserID)
AND
_AvatarUserID != _PartyMemberUserID
THEN
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,0);

// 2) Move characters controlled by other players to a new party
PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
AND
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,0)
AND
CharacterGetReservedUserID(_PartyMember,_PartyMemberUserID)
THEN
PROC_GLO_PartyMembers_Kick_RemovePlayerMember(_Avatar,_PartyMember,_PartyMemberUserID);

//REGION Remove a player party member and add to newlly created party
PROC
PROC_GLO_PartyMembers_Kick_RemovePlayerMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(INTEGER)_PartyMemberUserID)
AND
NOT DB_GLO_PartyMembers_Kick_PartyMembers_UserLeft(_PartyMemberUserID)
THEN
DB_GLO_PartyMembers_Kick_PartyMembers_UserLeft(_PartyMemberUserID);
LeaveParty(_PartyMemberUserID);

PROC
PROC_GLO_PartyMembers_Kick_RemovePlayerMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(INTEGER)_PartyMemberUserID)
THEN
CharacterDetachFromGroup(_Player);

PROC
PROC_GLO_PartyMembers_Kick_RemovePlayerMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(INTEGER)_PartyMemberUserID)
AND
DB_GLO_PartyMembers_Kick_NewParty(_Avatar,_Party)
THEN
CharacterAddToParty(_Player,_Party);

PROC
PROC_GLO_PartyMembers_Kick_RemovePlayerMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(INTEGER)_PartyMemberUserID)
AND
NOT DB_GLO_PartyMembers_Kick_NewParty(_Avatar,_)
THEN
DB_GLO_PartyMembers_Kick_NewParty(_Avatar,_Player);

PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
AND
DB_GLO_PartyMembers_Kick_PartyMembers_UserLeft(_PartyMemberUserID)
THEN
NOT DB_GLO_PartyMembers_Kick_PartyMembers_UserLeft(_PartyMemberUserID);

//END_REGION

// 3) Make other party characters controlled by same player AI-controlled
PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
AND
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,1)
THEN
PROC_GLO_PartyMembers_Kick_RemoveAIMember(_Avatar,_PartyMember,_FallbackFactionForAI);

// In case the player controlled multiple avatars, this may not be set
PROC
PROC_GLO_PartyMembers_Kick_RemoveAIMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(STRING)_FallbackFactionForAI)
AND
NOT DB_GLO_PartyMembers_OriginalAlignment(_Player,_)
THEN
DB_GLO_PartyMembers_OriginalAlignment(_Player,_FallbackFactionForAI);

//REGION Non-avatar: record avatar bond to restore later (could be bonded to different avatar than this one)
PROC
PROC_GLO_PartyMembers_Kick_RemoveAIMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(STRING)_FallbackFactionForAI)
AND
DB_GLO_PartyMembers_RecruiteeAvatarBond(_Player,_AnyAvatar)
THEN
DB_GLO_PartyMembers_Kick_OldCompanionBond(_Avatar,_Player,_AnyAvatar);

PROC
PROC_GLO_PartyMembers_Kick_RemoveAIMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(STRING)_FallbackFactionForAI)
AND
NOT DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Player)
THEN
DB_GLO_PartyMembers_Kick_BlockedReturnToRecruitmentPosition(_Avatar,_Player);
DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Player);
//END_REGION

PROC
PROC_GLO_PartyMembers_Kick_RemoveAIMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(STRING)_FallbackFactionForAI)
AND
GetVarFixedString(_Player,"currentState",_State)
THEN
DB_GLO_PartyMembers_Kick_OrigState(_Avatar,_Player,_State);
SetVarFixedString(_Player,"currentState","");

PROC
PROC_GLO_PartyMembers_Kick_RemoveAIMember((CHARACTERGUID)_Avatar,(CHARACTERGUID)_Player,(STRING)_FallbackFactionForAI)
THEN
PROC_GLO_PartyMembers_MakeNPC(_Player);

// Make the dismissed AI-controlled characters allied with the rest of the players
PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTERGUID)_PartyMember)
AND
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,1)
THEN
DB_GLO_PartyMemebers_KickAvatar_RestoreHeroFactionRelationAfterDeath(_PartyMember);
CharacterSetRelationIndivFactionToFaction(_PartyMember,"Hero",100);
CharacterSetRelationFactionToIndivFaction("Hero",_PartyMember,100);

// 4) Make the Hero alignment hostile against the alignment of the kicked hero and vice versa
PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
THEN
DB_GLO_PartyMembers_Kicked(_Avatar);
SetTag(_Avatar,"BLOCK_RESURRECTION");
CharacterSetRelationIndivFactionToFaction(_Avatar,"Hero",-100);
CharacterSetRelationFactionToIndivFaction("Hero",_Avatar,-100);

// Also all other players individually, because their individual relations may have been overridden earlier and then changing Hero won't do anything anymore
PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
AND
DB_IsPlayer(_Player)
AND
_Player != _Avatar
THEN
CharacterSetRelationIndivFactionToIndivFaction(_Player,_Avatar,-100);
CharacterSetRelationIndivFactionToIndivFaction(_Avatar,_Player,-100);

// and make the kicked hero also hostile against the removed companions and vice versa
PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
AND
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,1)
THEN
CharacterSetRelationIndivFactionToIndivFaction(_Avatar,_PartyMember,-100);
CharacterSetRelationIndivFactionToIndivFaction(_PartyMember,_Avatar,-100);

// and report that we are ready
PROC
PROC_GLO_PartyMembers_Kick((CHARACTERGUID)_Avatar,(STRING)_FallbackFactionForAI)
THEN
SetStoryEvent(_Avatar,"GLO_PartyMembers_Kicked");

// 5) If that avatar dies, give its user control over the kicked AI party members (if any)
IF
CharacterReceivedDamage(_Avatar, _, _)
AND
DB_GLO_PartyMembers_Kicked(_Avatar)
AND
CharacterGetHitpointsPercentage(_Avatar,_Percentage)
AND
_Percentage <= 0.0
AND
NOT DB_GLO_PartyMembers_Kick_PartyMembers_Dying(_Avatar)
THEN
PROC_GLO_PartyMembers_Kick_PartyMembers_TryDead(_Avatar);

PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_TryDead((CHARACTERGUID)_Avatar)
AND
NOT QRY_GLO_PartyMembers_Kicked_BlockRestoreAvatarOnDeath(_Avatar)
THEN
PROC_GLO_PartyMembers_Kick_PartyMembers_Dead(_Avatar);
DB_GLO_PartyMembers_Kick_PartyMembers_Dying(_Avatar);

QRY
QRY_GLO_PartyMembers_Kicked_BlockRestoreAvatarOnDeath((CHARACTERGUID)_Avatar)
AND
1 == 0
THEN
DB_NOOP(1);

// First restore the NPC alignment relations
PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_Dead((CHARACTERGUID)_Avatar)
THEN
PROC_GLO_PartyMembers_Kick_PartyMembers_Restore_Internal((CHARACTERGUID)_Avatar);

PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_Restore((CHARACTERGUID)_Avatar)
THEN
PROC_GLO_PartyMembers_Kick_PartyMembers_Restore_Internal((CHARACTERGUID)_Avatar);

PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_Restore_Internal((CHARACTERGUID)_Avatar)
AND
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_,_)
AND
DB_GLO_PartyMemebers_KickAvatar_RestoreHeroFactionRelationAfterDeath(_PartyMember)
THEN
NOT DB_GLO_PartyMemebers_KickAvatar_RestoreHeroFactionRelationAfterDeath(_PartyMember);
CharacterSetRelationIndivFactionToFaction(_PartyMember,"Hero",50);
CharacterSetRelationFactionToIndivFaction("Hero",_PartyMember,50);

//REGION Add NPC party members again
PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_Restore_Internal((CHARACTERGUID)_Avatar)
AND
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,1)
THEN
PROC_GLO_PartyMembers_Add(_PartyMember,_Avatar);

// Restore original avatar bond: clear for avatars, clear then restore for companions
PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_Restore_Internal((CHARACTERGUID)_Avatar)
AND
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,1)
THEN
PROC_GLO_PartyMembers_ClearRecruiteeBonds(_PartyMember);

PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_Restore_Internal((CHARACTERGUID)_Avatar)
AND
DB_GLO_PartyMembers_Kick_OldCompanionBond(_Avatar,_PartyMember,_AnyAvatar)
THEN
NOT DB_GLO_PartyMembers_Kick_OldCompanionBond(_Avatar,_PartyMember,_AnyAvatar);
PROC_GLO_PartyMembers_RecruiteeAvatarBond(_PartyMember,_AnyAvatar);
//END_REGION

// And die permanently
PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_Dead(_Avatar)
THEN
CharacterSetImmortal(_Avatar,0);
CharacterDie(_Avatar,1,"DoT");

// Then remove the avatar from the party (if there were any non-controlled party members;
// otherwise doing this will kick the player from the game).

// Don't make an NPC and then die, because generics can kick in (regarding doing damage
// to a neutral NPC in combat) in case of surfaces etc.
IF
DB_Dead(_Avatar)
AND
DB_GLO_PartyMembers_Kicked(_Avatar)
THEN
PROC_GLO_PartyMembers_TryDropBackpackOnDeath((CHARACTERGUID)_Avatar);

PROC
PROC_GLO_PartyMembers_TryDropBackpackOnDeath((CHARACTERGUID)_Avatar)
AND
NOT QRY_GLO_PartyMembers_BlockBackpackOnDeath(_Avatar)
AND
GetPosition(_Avatar,_X,_Y,_Z)
AND
CreateItemTemplateAtPosition("CONT_Humans_Backpack_Merchant_A_360e3e11-c7f8-4281-848a-596e37df884b",_X,_Y,_Z,_BackPack)
THEN 
// Since IsLootable is disabled for the _Avatar, drop his items in a backpack instead
MoveAllItemsTo(_Avatar,_BackPack);
SetStoryEvent(_Avatar,"GLO_PartyMembers_KickedDied");

PROC
PROC_GLO_PartyMembers_TryDropBackpackOnDeath((CHARACTERGUID)_Avatar)
AND
QRY_GLO_PartyMembers_UserHasOtherCharacters(_Avatar)
THEN
NOT DB_IsPlayer(_Avatar);


QRY
QRY_GLO_PartyMembers_BlockBackpackOnDeath((CHARACTERGUID)_Avatar)
AND
1 == 0
THEN
DB_NOOP(0);

// Don't make NPC if last character for this user, because then will be kicked from the game
IF
DB_Dead(_Avatar)
AND
DB_GLO_PartyMembers_Kicked(_Avatar)
AND
QRY_GLO_PartyMembers_UserHasOtherCharacters(_Avatar)
THEN
CharacterMakeNPC(_Avatar);

// Clean up
IF
DB_Dead(_Avatar)
AND
DB_GLO_PartyMembers_Kick_PartyMembers_Dying(_Avatar)
THEN
NOT DB_GLO_PartyMembers_Kick_PartyMembers_Dying(_Avatar);
PROC_GLO_PartyMembers_Kick_CleanUp(_Avatar);

PROC
PROC_GLO_PartyMembers_Kick_PartyMembers_Restore((CHARACTERGUID)_Avatar)
THEN
PROC_GLO_PartyMembers_Kick_CleanUp(_Avatar);

// Remove everything so that this avatar dying will no longer result in returning
// control to the companions
PROC
PROC_GLO_PartyMembers_Kick_CleanUp((CHARACTERGUID)_Avatar)
THEN
CharacterSetImmortal(_Avatar,0);

PROC
PROC_GLO_PartyMembers_Kick_CleanUp((CHARACTERGUID)_Avatar)
AND
DB_GLO_PartyMembers_Kick_NewParty(_Avatar,_Party)
THEN
NOT DB_GLO_PartyMembers_Kick_NewParty(_Avatar,_Party);

PROC
PROC_GLO_PartyMembers_Kick_CleanUp((CHARACTERGUID)_Avatar)
AND
DB_GLO_PartyMembers_Kick_OrigState(_Avatar,_Player,_State)
THEN
NOT DB_GLO_PartyMembers_Kick_OrigState(_Avatar,_Player,_State);
SetVarFixedString(_Player,"currentState",_State);

PROC
PROC_GLO_PartyMembers_Kick_CleanUp((CHARACTERGUID)_Avatar)
AND
DB_GLO_PartyMembers_Kick_BlockedReturnToRecruitmentPosition(_Avatar,_Player)
THEN
NOT DB_GLO_PartyMembers_Kick_BlockedReturnToRecruitmentPosition(_Avatar,_Player);
NOT DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Player);

PROC
PROC_GLO_PartyMembers_Kick_CleanUp((CHARACTERGUID)_Avatar)
THEN
NOT DB_PlayerAlignments_BlockFix(_Avatar);

PROC
PROC_GLO_PartyMembers_Kick_CleanUp((CHARACTERGUID)_Avatar)
AND
DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,_AvatarUserOwned)
THEN
NOT DB_GLO_PartyMembers_Kick_PartyMembers(_Avatar,_PartyMember,_AvatarUserOwned);

PROC
PROC_GLO_PartyMembers_Kick_CleanUp((CHARACTERGUID)_Avatar)
THEN
NOT DB_GLO_PartyMembers_Kicked(_Avatar);
//END_REGION

//REGION Temporary removal of non-avatar characters controlled by this user, except if they only control companions (-> keep currently controlled companion)
PROC
PROC_GLO_PartyMembers_TempRemoveAll((INTEGER)_SetOffStage)
THEN
PROC_GLO_PartyMembers_CollectDismissAll();

// DB_GLO_PartyMembers_CollectDismissAll_Keep() keeps track which characters were kept (call PROC_GLO_PartyMembers_TempRestore() on these afterwards to get their companions back)
// DB_GLO_PartyMembers_CollectDismissAll_OriginalOwningUserChar() keeps track (via a character) of the user to which the removed characters were assigned
// DB_GLO_PartyMembers_TempRemoved() keeps track of the origin recruitee/recruiter bond, for use by callers afterwards (mainly backward compatibility)
PROC
PROC_GLO_PartyMembers_TempRemoveAll((INTEGER)_SetOffStage)
AND
DB_GLO_PartyMembers_CollectDismissAll_Keep(_KeepCharacter)
AND
DB_GLO_PartyMembers_RecruiteeAvatarBond(_Companion,_KeepCharacter)
AND
NOT DB_GLO_PartyMembers_CollectDismissAll_Keep(_Companion)
THEN
DB_GLO_PartyMembers_TempRemoved(_KeepCharacter,_Companion);

PROC
PROC_GLO_PartyMembers_TempRemoveAll((INTEGER)_SetOffStage)
AND
DB_IsPlayer(_Companion)
AND
NOT DB_GLO_PartyMembers_CollectDismissAll_Keep(_Companion)
THEN
DB_BlockStoryItemTransfer(_Companion);
PROC_GLO_PartyMembers_Remove(_Companion,1);
ProcForceStopDialog(_Companion);

PROC
PROC_GLO_PartyMembers_TempRemoveAll(1)
AND
DB_GLO_PartyMembers_TempRemoved(_KeepCharacter,_Companion)
THEN
SetOnStage(_Companion,0);

PROC
PROC_GLO_PartyMembers_TempRestore((CHARACTERGUID)_)
THEN
//because I don't want to disturb the flow too much, doing a check here on a new DB instead of the temp dismissed one
DB_BlockOwnershipChecks(1);

PROC
PROC_GLO_PartyMembers_TempRestore((CHARACTERGUID)_KeepCharacter)
AND
DB_GLO_PartyMembers_CollectDismissAll_OriginalOwningUserChar(_KeepCharacter,_Companion)
AND
DB_GLO_PartyMembers_TempRemoved(_Avatar,_Companion)
THEN
NOT DB_BlockStoryItemTransfer(_Companion);
SetOnStage(_Companion,1);
NOT DB_GLO_PartyMembers_TempRemoved(_Avatar,_Companion);
PROC_GLO_PartyMembers_Add(_Companion,_KeepCharacter);
TeleportTo(_Companion,_KeepCharacter);
CharacterAttachToGroup(_Companion,_KeepCharacter);
CharacterResurrect(_Companion);
ProcForceStopDialog(_Companion);
PROC_GLO_PartyMembers_CollectDismissAll_RestoreCompanionBond(_Companion);

PROC
PROC_GLO_PartyMembers_TempRestore((CHARACTERGUID)_)
THEN
//because I don't want to disturb the flow too much, doing a check here on a new DB instead of the temp dismissed one
NOT DB_BlockOwnershipChecks(1);
Proc_ItemEventCheck();

PROC
PROC_GLO_PartyMembers_TempRestoreAll()
AND
DB_GLO_PartyMembers_CollectDismissAll_Keep(_KeepCharacter)
THEN
PROC_GLO_PartyMembers_TempRestore(_KeepCharacter);

// If a removed character dies, don't restore it again afterwards
// (it died as an NPC)
IF
CharacterDied(_Companion)
AND
DB_GLO_PartyMembers_TempRemoved(_Avatar,_Companion)
THEN
NOT DB_GLO_PartyMembers_TempRemoved(_Avatar,_Companion);
//END_REGION

//REGION Party member dialogs (in-party)
IF
CharacterResurrected(_Origin)
AND
QRY_GLO_PartyMembers_GetInPartyDialogReset(_Origin)
AND
QRY_GLO_PartyMembers_GetInPartyDialog(_Origin)
AND
DB_GLO_PartyMembers_InPartyDialog(_Origin,_NewDialog)
AND
DB_GLO_PartyMembers_RecruiteeAvatarBond(_Origin,_)
THEN
PROC_GLO_PartyMembers_SetInpartyDialog(_Origin,_NewDialog);
//END_REGION

//REGION Turn a party member back into an NPC (after dismissing
PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTERGUID)_Member)
THEN
DB_NOOP(1);

PROC
PROC_GLO_PartyMembers_MakeNPC((CHARACTERGUID)_Member)
AND
GetFaction(_Member,_PlayerFaction)
AND
DB_GLO_PartyMembers_OriginalAlignment((CHARACTERGUID)_Member,(STRING)_NpcFaction)
THEN
NOT DB_IsPlayer(_Member);
CharacterMakeNPC(_Member);
ProcRemovePolymorphs(_Member);
ProcCharacterEnableAllCrimes(_Member);
ProcUnRegisterPlayerTriggers(_Member);
ProcRemoveGenericTimer(_Member);
DB_GLO_PartyMembers_DefaultFaction(_Member,_PlayerFaction);
SetFaction(_Member,_NpcFaction);
DB_NoLowAttitudeDialog(_Member);
ProcRemoveAllDialogEntriesForSpeaker(_Member);
SetHasDialog(_Member,0);
Proc_CheckPartyFull();
RemoveStatus(_Member,"FUGITIVE");
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTERGUID)_Member);

PROC
PROC_GLO_PartyMembers_MakeNPC((CHARACTERGUID)_Member)
AND
DB_GLO_PartyMembers_RecruiteeAvatarBond(_Member,_Avatar)
THEN
NOT DB_GLO_PartyMembers_RecruiteeAvatarBond(_Member,_Avatar);
//END_REGION

//REGION Transfer all items of an NPC to a player
PROC
PROC_GLO_PartyMembers_TransferInventoryToPlayer((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
AND
GetPosition(_Player,_X,_Y,_Z)
AND
CreateItemTemplateAtPosition("CONT_Humans_Backpack_Merchant_A_360e3e11-c7f8-4281-848a-596e37df884b",_X,_Y,_Z,_BackPack)
THEN
DB_CompanionLeavingBackPack(_Companion,_Player,_BackPack);
MoveAllItemsTo(_Companion,_BackPack);
ItemToInventory(_BackPack,_Player);
SetStoryNpcStatus(_Companion);
OpenMessageBox(_Player,"GLO_CompanionLeftPermanently");

//END_REGION


//REGION companion left, origin flag
PROC
Proc_OriginLeft((CHARACTERGUID)_Companion,(STRING)_Reason)
AND
DB_Origins_OriginTag(_Companion,(STRING)_Tag)
AND
StringConcatenate("CompanionLeft_",_Tag,_String1)
AND
StringConcatenate(_String1,_Reason,_FinalString)
THEN
GlobalSetFlag(_FinalString);

PROC
Proc_OriginLeft((CHARACTERGUID)_Companion,(STRING)_Reason)
AND
DB_QuestDef_State_CompanionLeft((STRING)_Tag,(STRING)_Flag,_Reason)
AND
IsTagged(_Companion,_Tag,1)
AND
DB_Avatars(_Char)
THEN
ObjectSetFlag(_Char,_Flag);

//END_REGION


//REGION Detect kicked avatars that have become an NPC
// Can't just check BLOCK_RESURRECTION, because can also be set on companions
// Can't check DB_Avatars/AVATAR tag, because those get removed
QRY
QRY_GLO_PartyMembers_IsKickedAvatarNpc((CHARACTERGUID)_Char)
AND
NOT DB_IsPlayer(_Char)
AND
IsTagged(_Char, "BLOCK_RESURRECTION", 1)
AND
// has the origin quest
DB_TUT_OriginQuestStarts(_Char, (STRING)_, (STRING)_OriginQuestFirstUpdate)
AND
DB_QuestDef_AddEvent(_OriginQuestID, _OriginQuestFirstUpdate)
AND
QuestAccepted(_Char, _OriginQuestID, 1)
THEN
DB_NOOP(1);
//END_REGION

//REGION Support
IF
TextEventSet("ResetIsPlayerDB")
AND
DB_CurrentLevel("CoS_Main_Ending")
THEN
DebugBreak("Do not use ResetIsPlayerDB in this level, it is unsafe. Nothing done.");

QRY
QRY_GLO_PartyMembers_AnyTempRemoved()
AND
DB_GLO_PartyMembers_TempRemoved(_,_)
THEN
DB_NOOP(1);

IF
TextEventSet("ResetIsPlayerDB")
AND
QRY_GLO_PartyMembers_AnyTempRemoved()
THEN
DebugBreak("Do not use ResetIsPlayerDB while characters have been temporarily removed from the party. Nothing done.");

IF
TextEventSet("ResetIsPlayerDB")
AND
NOT DB_CurrentLevel("CoS_Main_Ending")
AND
NOT QRY_GLO_PartyMembers_AnyTempRemoved()
AND
DB_IsPlayer(_Player)
AND
CharacterIsPlayer(_Player, 0)
THEN
NOT DB_IsPlayer(_Player);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Shared_Campaign"
